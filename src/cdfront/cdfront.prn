
                                        src/cdfront.s        Page 1       5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


    1                                   ;==========================================================
    2                                   ;
    3                                   ;
    4                                   ;	CD Front Panel Module
    5                                   ;
    6                                   ;	This module manages the Audio CD control functions and interface
    7                                   ;	to the Virtual Light Machine
    8                                   ;
    9                                   ;	Programmer: Dave Staugas
   10                                   ;
   11                                   ;
   12                                   ;
   13           =00000071               serial	equ	113		;serial # of this software revision
   14                                   ;
   15                                   ;
   16                                   ;
   21                                   	.list
   22                                   ; 
   23                                   ;
   24                                   ; Butch's hardware registers
   25                                   ;
   26                                   ;
   27           =00DFFF00               BUTCH     equ  $DFFF00		;base of Butch=interrupt control register, R/W
   28                                   ;
   29                                   ;  When written (Long):
   30                                   ;
   31                                   ;  bit0 - set to enable interrupts
   32                                   ;  bit1 - enable CD data FIFO half full interrupt
   33                                   ;  bit2 - enable CD subcode frame-time interrupt (@ 2x spped = 7ms.)
   34                                   ;  bit3 - enable pre-set subcode time-match found interrupt
   35                                   ;  bit4 - CD module command transmit buffer empty interrupt
   36                                   ;  bit5 - CD module command receive buffer full
   37                                   ;  bit6 - CIRC failure interrupt
   38                                   ;
   39                                   ;  bit7-31  reserved, set to 0 
   40                                   ;
   41                                   ;
   42                                   ;  When read (Long):
   43                                   ;
   44                                   ;  bit0-8 reserved
   45                                   ;
   46                                   ;  bit9  - CD data FIFO half-full flag pending
   47                                   ;  bit10 - Frame pending
   48                                   ;  bit11 - Subcode data pending
   49                                   ;  bit12 - Command to CD drive pending (trans buffer empty if 1)
   50                                   ;  bit13 - Response from CD drive pending (rec buffer full if 1)
   51                                   ;  bit14 - CD uncorrectable data error pending
   52                                   ;
   53                                   ;
   54                                   ;   Offsets from BUTCH
   55                                   ;
   56           =00000004               DSCNTRL   equ  4		; DSA control register, R/W
   57           =0000000A               DS_DATA   equ  $A		; DSA TX/RX data, R/W
   58                                   ;
   59                                   ;
   60                                   ;


                                        src/cdfront.s        Page 2       5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   61           =00000010               I2CNTRL   equ  $10		; i2s bus control register, R/W
   62                                   ;
   63                                   ;  When read:
   64                                   ;
   65                                   ;  b0 - I2S data from drive to BUTCH is ON if 1
   66                                   ;  b1 - I2S path from BUTCH to Jerry is ON if 1
   67                                   ;  b2 - reserved
   68                                   ;  b3 - host bus width is 16 if 1, else 32
   69                                   ;  b4 - FIFO state is not empty if 1
   70                                   ;
   71                                   ;
   72                                   ;
   73                                   ;
   74           =00000014               SBCNTRL   equ  $14		; CD subcode control register, R/W
   75           =00000018               SUBDATA   equ  $18		; Subcode data register A
   76           =0000001C               SUBDATB   equ  $1C		; Subcode data register B
   77           =00000020               SB_TIME   equ  $20		; Subcode time and compare enable (D24)
   78           =00000024               FIFODAT   equ  $24		; i2s FIFO data
   79           =00000028               I2SDAT2   equ  $28		; i2s FIFO data (old)
   80                                   ;
   81                                   ;
   82                                   ;  Some symbols imported from Jeff's code (10-Aug-94)
   83                                   ;
   84                                   	.include	"vlm.equ"
    1           =00192018               free		EQU	$00192018 ; start of Free run code
    2           =0019203E               audio		EQU	$0019203E ; start of audio reactive
    3           =0019207A               goag		EQU	$0019207A ; real start of audio reactive
    4           =001B00F8               board		EQU	$001B00F8 ; base of 1-bit/pixel 320x240 display
    5           =001AE4D2               frames		EQU	$001AE4D2 ;.w Jeff's frame count
    6           =001AE00C               pad_now		EQU	$001AE00C ;.w Jeff's joystick word
    7           =00198CAC               freerun		EQU	$00198CAC ;.w put a 2 in here to stop GPU in free run
    8           =00199994               davesvec	EQU	$00199994 ;.l vector for dave's mainloop
    9           =00199A18               cursimg		EQU	$00199A18 ; cursor image (to be cleared)
   10           =001AE148               davesobj	EQU	$001AE148 ; base addr of dave's overlay obj
   11           =001AE02A               vlm_mode	EQU	$001AE02A ;.w 0=no VLM controls, 1=VLM controls active
   12           =001AF05E               skid		EQU	$001AF05E ;.w 0..9 setting for free running screen
   13           =00196AA8               ObTypes		EQU	$00196AA8 ; ptr to object type definitions
   14           =00195076               skidoo		EQU	$00195076 ; value to stuff in 'action'
   15           =001AF068               imatrix		EQU	$001AF068 ;.w 0..9 bank number
   16           =001AE524               action		EQU	$001AE524 ; vector to initiate bank/effect switch
   17           =00196814               gm		EQU	$00196814 ; value to stuff in 'action'
   18           =001AE048               beasties	EQU	$001AE048 ; start of object list (davesobj is subset)
   19           =0019483A               print		EQU	$0019483A ; routine to print errors
   20           =001AE520               cursx		EQU	$001AE520 ;.w horz position associated with 'print'
   21           =001AE522               cursy		EQU	$001AE522 ;.w vert position associated with 'print'
   22           =001AC1A0               iansdoit	EQU	$001AC1A0 ; entry point for DSP init routine
   23           =001AF06E               vlmtim		EQU	$001AF06E ;.w turn-off timer for VLM logo
   24           =001AEC7C               blist		EQU	$001AEC7C ;.l ptr to build (shadow) display list
   25           =001AEC80               dlist		EQU	$001AEC80 ;.l ptr to hardware display list
   26           =00195B4C               RunBeast	EQU	$00195B4C ; Jeff's object build routine
   27           =00194C90               Frame		EQU	$00194C90 ; Jeff's v_blank routine
   28           =00196446               readpad		EQU	$00196446 ; Jeff's joystick routine
   29           =0019ADD0               vlmlogo		EQU	$0019ADD0 ; Base addr of VLM logo grafix
   30           =00194F66               no_ksel		EQU	$00194F66 ;vlm label,@ +8.w bit15 set disables vlmedit
   31           =001FD426               pal		EQU	$001FD426 ;.w =1 if on PAL system, =0 for NTSC
   32           =00198CB0               myFont		EQU	$00198CB0 ;base address of internal font


                                        src/cdfront.s        Page 3       5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   85                                   ;
   86           =00F1BE04               VOLUME	equ	$F1BE04		;.l DSP volume constant (0..$7FFF)
   87                                   ;
   88                                   ;
   89                                   ;
   90           =00002800               DSPqcode	equ	$2800	;DSP deposits polled q_subcodes here (32 bytes)
   91                                   ;DSPqcode	equ	$f1c000	;DSP deposits polled q_subcodes here (32 bytes)
   92           =00002C00               realTOC		equ	$2c00	;here's where we put the directory
   93                                   ;
   94                                   ;
   95                                   ;
   96                                   ;
   97  00000000  6000xxxx               	bra	RanGetEE		;+0 dispatch for table for 
   98  00000004  6000xxxx               	bra	RanPutEE		;+4  get/put random data from EEprom
   99  00000008  00000000               	dc.l	0			;+8  cdboot1's address for randf routine
  100                                   ;
  101                                   start:					;+C
  102  0000000C  4FF900200000           	lea	$200000,sp		;set stack at top of memory
  103  00000012  33FCFFFFxxxxxxxx       	move.w	#-1,Pradip
  104  0000001A  33FC0003xxxxxxxx       	move.w	#3,TvChnlAv
  105                                   ;
  106  00000022  6100xxxx               	bsr	getEE			;get EEprom data
  107                                   ;
  108  00000026  41F9xxxxxxxx           	lea	defseqm,a0		;this code added to init 
  109  0000002C  43F9xxxxxxxx           	lea	seqmode,a1		;modes that used to be in the
  110  00000032  7002                   	moveq	#2,d0			;EEprom block (moved 13-Apr-95)
  111                                   setdefs:
  112  00000034  32D8                   	move.w	(a0)+,(a1)+
  113  00000036  51C8FFFC               	dbra	d0,setdefs
  114                                   
  115                                   ;	jsr	CD_stop			;stop the CD
  116                                   ;
  117  0000003A  23F900F1003Axxxxxxxx   	move.l	$f1003a,seed		;get JPIT1 for random seed
  118                                   ;
  119  00000044  41F9xxxxxxxx           	lea	hexbcd,a0		;build quick hex2bcd conversion table
  120  0000004A  7201                   	moveq	#1,d1
  121  0000004C  7463                   	moveq	#99,d2
  122  0000004E  7000                   	moveq	#0,d0
  123  00000050  E248                   	lsr.w	#1,d0			;clear x
  124                                   hexbuild:
  125  00000052  10C0                   	move.b	d0,(a0)+
  126  00000054  C101                   	abcd	d1,d0
  127  00000056  51CAFFFA               	dbra	d2,hexbuild
  128                                   ;
  129  0000005A  6100xxxx               	bsr	arrbuild	;build trk grid excess arrow indicators
  130                                   ;
  131  0000005E  33FCFFFF00F00402       	move.w	#-1,CLUT+2
  132                                   ;
  133  00000066  49F900DFFF00           	lea	BUTCH,a4
  134  0000006C  47F9xxxxxxxx           	lea	return,a3
  135                                   ;
  136                                   ;	tst.l	realTOC
  137                                   ;	beq.s	.notext			;check for external--br if so
  138                                   ;
  139  00000072  297C0000000F0010       	move.l	#$f,I2CNTRL(a4)		;5 = code, f= audio
  140                                   ;


                                        src/cdfront.s        Page 4       5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  141  0000007A  297C000000F20014       	move.l	#$f2,SBCNTRL(a4)
  142  00000082  297C000002F20014       	move.l	#$2f2,SBCNTRL(a4)
  143                                   ;
  144                                   .notext:
  145                                   ;
  146                                   ;  align all graphics forms
  147                                   ;
  148                                   ;
  149                                   ;  .CRY form header is:
  150                                   ;
  151                                   ;	+0 width
  152                                   ;	+2 height
  153                                   ;	+4 D/IWIDTH
  154                                   ;	+6 unused
  155                                   ;	+8 # colors used
  156                                   ;	+A pixel depth
  157                                   ;	+C file size (long)
  158                                   ;
  159                                   ;   Convert to:
  160                                   ;
  161                                   ;	+0 offset to base of graphics form
  162                                   ;	+2 width
  163                                   ;	+4 height
  164                                   ;	+6 D/IWIDTH
  165                                   ;	+8 pixel depth
  166                                   ;
  167                                   ;	+A Palette (4,4,16,256 words for pixdepth 0,1,2,3 respectively)
  168                                   ;
  169                                   ;	+
  170                                   ;
  171                                   ;	
  172                                   ;
  173                                   formdo:
  174  0000008A  47FAxxxx               	lea	allforms(pc),a3
  175                                   formloop:
  176  0000008E  201B                   	move.l	(a3)+,d0
  177  00000090  6700xxxx               	beq	formxit
  178                                   ;
  179  00000094  2040                   	move.l	d0,a0
  180  00000096  2448                   	move.l	a0,a2		;save base ptr
  181                                   ;
  182  00000098  3218                   	move.w	(a0)+,d1	;retrieve width
  183  0000009A  3410                   	move.w	(a0),d2		;retrieve height
  184  0000009C  30C1                   	move.w	d1,(a0)+	;save width
  185  0000009E  3610                   	move.w	(a0),d3		;retrieve D/IWIDTH
  186  000000A0  30C2                   	move.w	d2,(a0)+	;save height
  187  000000A2  30C3                   	move.w	d3,(a0)+	;save D/IWIDTH
  188  000000A4  38280002               	move.w	2(a0),d4
  189  000000A8  30C4                   	move.w	d4,(a0)+	;save pixel depth
  190  000000AA  D844                   	add.w	d4,d4
  191  000000AC  323B40xx               	move.w	palsize(pc,d4.w),d1
  192  000000B0  43E80006               	lea	6(a0),a1
  193  000000B4  60xx                   	bra.s	palmovi
  194                                   palsize:
  195  000000B6  0004000400100100       	dc.w	4,4,16,256
  196                                   ;


                                        src/cdfront.s        Page 5       5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  197                                   ;  here are all the forms we transform (followed by long 0)
  198                                   ;
  199                                   allforms:
  200                                   ;	dc.l	cdstatus
  201  000000BE  xxxxxxxx               	dc.l	onepage3
  202  000000C2  00000000               	dc.l	0
  203                                   ;
  204                                   ;
  205                                   palmove:
  206  000000C6  30D9                   	move.w	(a1)+,(a0)+
  207                                   palmovi:
  208  000000C8  51C9FFFC               	dbra	d1,palmove
  209                                   ;
  210  000000CC  2008                   	move.l	a0,d0
  211  000000CE  5E80                   	addq.l	#7,d0
  212  000000D0  0240FFF8               	andi.w	#~7,d0
  213  000000D4  2200                   	move.l	d0,d1
  214  000000D6  9088                   	sub.l	a0,d0		;d0 = adjust value
  215  000000D8  2041                   	move.l	d1,a0
  216  000000DA  928A                   	sub.l	a2,d1
  217  000000DC  3481                   	move.w	d1,(a2)
  218  000000DE  0C400006               	cmpi.w	#6,d0
  219  000000E2  67xx                   	beq.s	formover
  220  000000E4  C6C2                   	mulu	d2,d3
  221  000000E6  E58B                   	lsl.l	#2,d3		;# of words in graphics form
  222                                   ;
  223  000000E8  60xx                   	bra.s	grafupi
  224                                   grafup0:
  225  000000EA  4843                   	swap	d3
  226                                   grafup:
  227  000000EC  30D9                   	move.w	(a1)+,(a0)+
  228                                   grafupi:
  229  000000EE  51CBFFFC               	dbra	d3,grafup
  230  000000F2  4843                   	swap	d3
  231  000000F4  51CBFFF4               	dbra	d3,grafup0
  232                                   formover:
  233  000000F8  6094                   	bra	formloop
  234                                   formxit:
  235                                   ;
  236                                   ;  Load up the big palette
  237                                   ;
  238                                   repaller:
  239                                   ;	lea	cdstatus+10,a0
  240  000000FA  41F9xxxxxxxx           	lea	onepage3+10,a0
  241  00000100  43F900F00400           	lea	CLUT,a1
  242  00000106  303C00FF               	move.w	#255,d0	
  243                                   fullpal:
  244  0000010A  32D8                   	move.w	(a0)+,(a1)+
  245  0000010C  51C8FFFC               	dbra	d0,fullpal
  246                                   ;
  247  00000110  303C00FF               	move.w	#255,d0
  248                                   chkp:
  249  00000114  3221                   	move.w	-(a1),d1
  250  00000116  B260                   	cmp.w	-(a0),d1
  251  00000118  66E0                   	bne	repaller
  252  0000011A  51C8FFF8               	dbra	d0,chkp


                                        src/cdfront.s        Page 6       5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  253                                   ;
  254                                   ;
  255                                   ;
  256                                   ;
  257                                   ;
  258                                   ;
  259                                   ;   let's expand (bit->pixel) cdnumb2.cry
  260                                   ;
  261                                   bit2pix:
  262  0000011E  41F9xxxxxxxx           	lea	cnumber+$18,a0
  263  00000124  43F900060000           	lea	$60000,a1	;primary digits
  264  0000012A  45F900061000           	lea	$61000,a2	;alternate digits
  265                                   ;
  266  00000130  7A10                   	moveq	#16,d5		;17 lines hi
  267                                   .loop0:
  268  00000132  7407                   	moveq	#7,d2
  269                                   .loop1:
  270  00000134  760F                   	moveq	#15,d3
  271  00000136  3818                   	move.w	(a0)+,d4
  272                                   .loop2:
  273  00000138  7004                   	moveq	#4,d0		;background color (black)
  274  0000013A  7204                   	moveq	#4,d1		;background color (black)
  275                                   ;
  276  0000013C  E35C                   	rol.w	#1,d4
  277  0000013E  64xx                   	bcc.s	.notfore
  278  00000140  7001                   	moveq	#1,d0		;foreground color (bright green)
  279  00000142  323C00FE               	move.w	#$fe,d1		;foreground color (??)
  280                                   .notfore:
  281  00000146  12C0                   	move.b	d0,(a1)+
  282  00000148  14C1                   	move.b	d1,(a2)+
  283                                   ;
  284  0000014A  51CBFFEC               	dbra	d3,.loop2
  285  0000014E  51CAFFE4               	dbra	d2,.loop1
  286  00000152  51CDFFDE               	dbra	d5,.loop0
  287                                   ;
  288                                   ;
  289           =00012000               VOLbar	equ	$12000
  290                                   ;
  291  00000156  41F900012000           	lea	VOLbar,a0
  292  0000015C  7011                   	move.l	#$00000011,d0
  293  0000015E  223C10000000           	move.l	#$10000000,d1
  294  00000164  7600                   	moveq	#0,d3
  295  00000166  343C003F               	move.w	#64-1,d2
  296                                   VOLlp:
  297  0000016A  20C0                   	move.l	d0,(a0)+
  298  0000016C  20C1                   	move.l	d1,(a0)+
  299  0000016E  20C0                   	move.l	d0,(a0)+
  300  00000170  20C1                   	move.l	d1,(a0)+
  301                                   ;
  302  00000172  20C3                   	move.l	d3,(a0)+
  303  00000174  20C3                   	move.l	d3,(a0)+
  304  00000176  51CAFFF2               	dbra	d2,VOLlp
  305                                   ;
  306  0000017A  203C22222222           	move.l	#$22222222,d0
  307  00000180  223C22222220           	move.l	#$22222220,d1
  308  00000186  20C0                   	move.l	d0,(a0)+


                                        src/cdfront.s        Page 7       5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  309  00000188  20C1                   	move.l	d1,(a0)+
  310  0000018A  20C0                   	move.l	d0,(a0)+
  311  0000018C  20C1                   	move.l	d1,(a0)+
  312                                   ;
  313  0000018E  20C3                   	move.l	d3,(a0)+
  314  00000190  20C3                   	move.l	d3,(a0)+
  315                                   
  316  00000192  203C03333333           	move.l	#$03333333,d0
  317  00000198  223C33333300           	move.l	#$33333300,d1
  318  0000019E  343C003F               	move.w	#64-1,d2
  319                                   VOLlp1:
  320  000001A2  20C0                   	move.l	d0,(a0)+
  321  000001A4  20C1                   	move.l	d1,(a0)+
  322  000001A6  20C0                   	move.l	d0,(a0)+
  323  000001A8  20C1                   	move.l	d1,(a0)+
  324                                   ;
  325  000001AA  20C3                   	move.l	d3,(a0)+
  326  000001AC  20C3                   	move.l	d3,(a0)+
  327  000001AE  51CAFFF2               	dbra	d2,VOLlp1
  328                                   ;
  329                                   ;
  330                                   ;	
  331                                   here:
  332  000001B2  4279xxxxxxxx           	clr.w	modecnt			;start at 0th index for our_mode
  333  000001B8  4279xxxxxxxx           	clr.w	boxleft
  334  000001BE  4279xxxxxxxx           	clr.w	cancelC			;cancel C button once if non-zero
  335  000001C4  4279xxxxxxxx           	clr.w	scan			;no scan mode
  336  000001CA  4279xxxxxxxx           	clr.w	play			;indicate stopped
  337  000001D0  4279xxxxxxxx           	clr.w	pause			;not paused
  338  000001D6  4279xxxxxxxx           	clr.w	track
  339  000001DC  4279xxxxxxxx           	clr.w	audvlm			;set for audio mode
  340  000001E2  4279xxxxxxxx           	clr.w	keytime
  341  000001E8  4279xxxxxxxx           	clr.w	distrack
  342  000001EE  4279xxxxxxxx           	clr.w	progenty
  343  000001F4  4279xxxxxxxx           	clr.w	m3opt			;set for normal option on mode3
  344  000001FA  4279xxxxxxxx           	clr.w	gridoff
  345  00000200  4279xxxxxxxx           	clr.w	vlmrand
  346  00000206  13FC00FFxxxxxxxx       	move.b	#-1,retcode+1		;wait til found comes in on that stop
  347  0000020E  08B90000xxxxxxxx       	bclr.b	#0,cdgflags
  348                                   ;
  349                                   ;
  350  00000216  41F82C02               	lea	realTOC+2,a0		;start at min track #
  351  0000021A  1018                   	move.b	(a0)+,d0
  352  0000021C  3400                   	move.w	d0,d2
  353  0000021E  1018                   	move.b	(a0)+,d0
  354  00000220  E14A                   	lsl.w	#8,d2
  355  00000222  1400                   	move.b	d0,d2
  356  00000224  33C2xxxxxxxx           	move.w	d2,maxmin
  357                                   ;
  358  0000022A  2610                   	move.l	(a0),d3
  359  0000022C  028300FFFFFF           	andi.l	#$00ffffff,d3
  360  00000232  7403                   	moveq	#3,d2
  361                                   nextBCD:
  362  00000234  7000                   	moveq	#0,d0
  363  00000236  1003                   	move.b	d3,d0
  364  00000238  0C400064               	cmpi.w	#100,d0


                                        src/cdfront.s        Page 8       5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  365  0000023C  6400xxxx               	bcc	do99
  366  00000240  80FC000A               	divu	#10,d0
  367  00000244  2200                   	move.l	d0,d1
  368  00000246  4841                   	swap	d1
  369  00000248  E948                   	lsl.w	#4,d0
  370  0000024A  8041                   	or.w	d1,d0
  371  0000024C  60xx                   	bra.s	itsBCD
  372                                   do99:
  373  0000024E  7099                   	moveq	#$99,d0
  374                                   itsBCD:
  375  00000250  1600                   	move.b	d0,d3
  376  00000252  E09B                   	ror.l	#8,d3
  377  00000254  51CAFFDE               	dbra	d2,nextBCD
  378                                   BCDdone:
  379  00000258  23C3xxxxxxxx           	move.l	d3,fineEND
  380                                   ;
  381  0000025E  5288                   	addq.l	#1,a0
  382  00000260  7400                   	moveq	#0,d2
  383  00000262  7602                   	moveq	#2,d3
  384                                   buildf:
  385  00000264  1018                   	move.b	(a0)+,d0
  386                                   ;	bsr	bcd2hex
  387  00000266  E18A                   	lsl.l	#8,d2
  388  00000268  1400                   	move.b	d0,d2
  389  0000026A  51CBFFF8               	dbra	d3,buildf
  390  0000026E  E18A                   	lsl.l	#8,d2
  391  00000270  23C2xxxxxxxx           	move.l	d2,origEND
  392                                   ;
  393  00000276  43F9xxxxxxxx           	lea	SubCode,a1
  394                                   ;
  395  0000027C  48F91200xxxxxxxx       	movem.l	a1/a4,ourreg
  396  00000284  33FCFFFFxxxxxxxx       	move.w	#-1,oneshot		;here's an init after Jeff
  397  0000028C  42B9xxxxxxxx           	clr.l	joyprev			;clear previous joystick
  398  00000292  42B9xxxxxxxx           	clr.l	m3prev			;clear mode3 previous joystick
  399                                   ;
  400  00000298  4279xxxxxxxx           	clr.w	m3col
  401  0000029E  33FC0001xxxxxxxx       	move.w	#1,m3row
  402                                   ;
  403                                   ;
  404  000002A6  23FCxxxxxxxx00199994   	move.l	#service,davesvec
  405                                   ;
  406  000002B0  6100xxxx               	bsr	buildseq	;build normal sequence of tracks
  407  000002B4  6100xxxx               	bsr	bildprog	;set user-programmable seq to standard
  408                                   ;
  409  000002B8  3039xxxxxxxx           	move.w	maxmin,d0
  410  000002BE  024000FF               	andi.w	#$ff,d0
  411  000002C2  33C0xxxxxxxx           	move.w	d0,gridsize	;set total # of tracks for grid
  412                                   ;
  413                                   ;
  414  000002C8  3039xxxxxxxx           	move.w	Sbankeff,d0
  415  000002CE  3200                   	move.w	d0,d1
  416  000002D0  E849                   	lsr.w	#4,d1
  417  000002D2  0241000F               	andi.w	#$f,d1
  418  000002D6  0240000F               	andi.w	#$f,d0
  419  000002DA  33C0001AF05E           	move.w	d0,skid		;set effect
  420  000002E0  33C1001AF068           	move.w	d1,imatrix	;& bank too


                                        src/cdfront.s        Page 9       5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  421                                   ;
  422  000002E6  33FC000200198CAC       	move.w	#2,freerun		;shut down GPU
  423  000002EE  3239001AE4D2           	move.w	frames,d1
  424                                   fwait:
  425  000002F4  B279001AE4D2           	cmp.w	frames,d1	;we need to wait
  426  000002FA  67F8                   	beq	fwait
  427                                   ;
  428  000002FC  4EF90019207A           	jmp	goag		;this entry point is better
  429                                   ;
  430                                   ;
  431                                   ;
  432                                   ;   The following will be called as a subroutine from Jeff's main loop...
  433                                   ;
  434                                   service:
  435  00000302  4CF91200xxxxxxxx       	movem.l	ourreg,a1/a4	;get a1=subcode, a4=BUTCH
  436  0000030A  4A79xxxxxxxx           	tst.w	oneshot
  437  00000310  6700xxxx               	beq	onetime
  438                                   ;
  439  00000314  33FC8003xxxxxxxx       	move.w	#$8003,our_mode		;set mode 3, init bit set
  440  0000031C  33FC0000001AE02A       	move.w	#0,vlm_mode	;start in "audio" mode
  441                                   ;
  442  00000324  4279xxxxxxxx           	clr.w	oneshot
  443  0000032A  4279xxxxxxxx           	clr.w	voltimr		;ignore turn-off of volume
  444  00000330  4279xxxxxxxx           	clr.w	volfcnt		;ignore volume raise/lower repeat time
  445                                   ;
  446  00000336  08F9000700194F6E       	bset.b	#7,no_ksel+8	;disable jeff's vlm edit mode
  447                                   ;
  448  0000033E  4AB82C00               	tst.l	realTOC		;are we external?
  449  00000342  66xx                   	bne.s	notextrn	;br if not
  450                                   ;
  451                                   ;  else, set-up for external I2S
  452                                   ;
  453  00000344  23FC37DED4A000F1BC58   	move.l	#$37ded4a0,$f1bc58	;this ugly patch in DSP is needed
  454                                   ;
  455  0000034E  23FC0000000000DFFF10   	move.l	#0,BUTCH+I2CNTRL	;*************test
  456  00000358  23FC0000000900F1A150   	move.l	#9,SCLK
  457  00000362  23FC0000001500F1A154   	move.l	#$15,SMODE		;*************end test
  458                                   notextrn:
  459                                   ;
  460                                   ;  set-up volume object
  461                                   ;
  462  0000036C  41F9001AE1C8           	lea	davesobj+$80,a0
  463  00000372  72FF                   	moveq	#-1,d1
  464  00000374  3141000C               	move.w	d1,$c(a0)	;turn object off while we're working on 'em
  465  00000378  30BC001E               	move.w	#30,(a0)	;horz position
  466  0000037C  303C004C               	move.w	#38*2,d0	;assume NTSC
  467  00000380  4A79001FD426           	tst.w	pal
  468  00000386  67xx                   	beq.s	.nopala
  469  00000388  06790180xxxxxxxx       	add.w	#48*8,davelist+6	;adjust cd+g screen YPOS
  470  00000390  303C0082               	move.w	#(38+27)*2,d0
  471                                   .nopala:
  472  00000394  31400004               	move.w	d0,$4(a0)	;vert position
  473  00000398  317C00010014           	move.w	#1,$14(a0)	;rmw or transparent
  474  0000039E  317C003E0016           	move.w	#$3e,$16(a0)	;palette index
  475  000003A4  317C00010018           	move.w	#1,$18(a0)	;DWIDTH
  476  000003AA  317C00C0001A           	move.w	#192,$1A(a0)	;height


                                        src/cdfront.s        Page 10      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  477  000003B0  317C0002001C           	move.w	#2,$1C(a0)	;pixel depth
  478                                   ;
  479  000003B6  47F9xxxxxxxx           	lea	voltab,a3
  480  000003BC  7000                   	moveq	#0,d0
  481  000003BE  3039xxxxxxxx           	move.w	volptr,d0
  482  000003C4  D040                   	add.w	d0,d0
  483  000003C6  7200                   	moveq	#0,d1
  484  000003C8  32330000               	move.w	(a3,d0.w),d1
  485                                   
  486  000003CC  23C100F1BE04           	move.l	d1,VOLUME
  487                                   ;	move.l	#$7fff,VOLUME
  488                                   
  489  000003D2  C0FC000C               	mulu	#12,d0
  490  000003D6  D0BC00012000           	add.l	#VOLbar,d0
  491  000003DC  21400010               	move.l	d0,$10(a0)
  492                                   ;
  493                                   ;	move.w	#0,CLUT+(128*2)
  494                                   ;	move.w	#$5678,CLUT+(129*2)	;top color (thin)
  495                                   ;	move.w	#$7ff,CLUT+(130*2)	;mid-line color
  496                                   ;	move.w	#$7fc0,CLUT+(131*2)	;bottom color (fat)
  497                                   ;
  498  000003E0  33FCFFFFxxxxxxxx       	move.w	#-1,loceff
  499  000003E8  33FCFFFFxxxxxxxx       	move.w	#-1,locbank		;set our local copies to force prn
  500                                   ;
  501                                   ;  Form upside-down vlm logo
  502                                   ;
  503  000003F0  6100xxxx               	bsr	 fliplogo
  504                                   ;
  505                                   ;
  506                                   onetime:
  507  000003F4  3039xxxxxxxx           	move.w	voltimr,d0	;check volume display turn-off
  508  000003FA  67xx                   	beq.s	notvol
  509  000003FC  3239001AE4D2           	move.w	frames,d1
  510  00000402  9041                   	sub.w	d1,d0
  511  00000404  6Exx                   	bgt.s	notvol
  512  00000406  0C790003xxxxxxxx       	cmpi.w	#3,our_mode	;are we in mode 3 (upper panel)?
  513  0000040E  66xx                   	bne.s	offv		;br if not
  514  00000410  4A79xxxxxxxx           	tst.w	boxleft		;are we on the volume bar?
  515  00000416  67xx                   	beq.s	offv
  516                                   ;
  517  00000418  5041                   	addq.w	#8,d1		;we're on the volume bar in mode3
  518  0000041A  66xx                   	bne.s	.volset		;keep it displaying
  519  0000041C  5241                   	addq.w	#1,d1		
  520                                   .volset:
  521  0000041E  33C1xxxxxxxx           	move.w	d1,voltimr
  522  00000424  60xx                   	bra.s	notvol
  523                                   offv:
  524  00000426  4279xxxxxxxx           	clr.w	voltimr		;turn off display
  525  0000042C  33FCFFFF001AE1D4       	move.w	#-1,davesobj+$8c
  526                                   ;
  527  00000434  6100xxxx               	bsr	chngdisp	;any need for RunBeast?
  528                                   ;
  529  00000438  72xx                   	moveq	#(volptr-workEE),d1
  530  0000043A  6100xxxx               	bsr	setEE		;set new volume in EEprom
  531                                   notvol:
  532                                   ;


                                        src/cdfront.s        Page 11      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  533                                   ;  now check on VLM-random
  534                                   ;
  535  0000043E  4A79xxxxxxxx           	tst.w	cdgmode		;we must be in vlm mode
  536  00000444  6600xxxx               	bne	notvlmr		;br if not		
  537  00000448  4A79xxxxxxxx           	tst.w	vlmrand		;and random flag must be engaged
  538  0000044E  6700xxxx               	beq	notvlmr		;br if not
  539                                   ;
  540                                   ;  we're doing the random thang
  541  00000452  3039001AE4D2           	move.w	frames,d0
  542  00000458  9079xxxxxxxx           	sub.w	vlmrfrm,d0
  543  0000045E  323C04B0               	move.w	#20*60,d1	;every x seconds
  544  00000462  4A79001FD426           	tst.w	pal
  545  00000468  67xx                   	beq.s	intchk
  546  0000046A  323C03E8               	move.w	#20*50,d1
  547                                   intchk:
  548  0000046E  B041                   	cmp.w	d1,d0		;we'll do every x seconds
  549  00000470  65xx                   	bcs.s	notvlmr		;br if not time yet
  550                                   ;
  551  00000472  207900080008           	move.l	$80008,a0	;get cdboot1's randf
  552  00000478  2F3Cxxxxxxxx           	move.l	#backhome,-(sp)
  553  0000047E  4ED0                   	jmp	(a0)
  554                                   backhome:
  555  00000480  E088                   	lsr.l	#8,d0		;condition random value
  556  00000482  02800000FFFF           	andi.l	#$ffff,d0
  557  00000488  33F9001AE4D2xxxxxxxx   	move.w	frames,vlmrfrm	;reset random timer
  558                                   ;
  559  00000492  3239xxxxxxxx           	move.w	vlmrdcnt,d1	;get rand transition counter
  560  00000498  5241                   	addq.w	#1,d1		;advance
  561  0000049A  0C41000F               	cmpi.w	#15,d1		;time to do bank switch?
  562  0000049E  65xx                   	bcs.s	notrbank	;br if not bank switch time
  563  000004A0  7200                   	moveq	#0,d1
  564                                   notrbank:
  565  000004A2  33C1xxxxxxxx           	move.w	d1,vlmrdcnt
  566  000004A8  67xx                   	beq.s	jabanks
  567                                   ;
  568                                   jaeffs:
  569  000004AA  80FC0009               	divu	#9,d0
  570  000004AE  4840                   	swap	d0
  571  000004B0  5240                   	addq.w	#1,d0
  572  000004B2  33C0001AF05E           	move.w	d0,skid
  573  000004B8  23FC00195076001AE524   	move.l	#skidoo,action	;this should change effect
  574  000004C2  60xx                   	bra.s	notvlmr
  575                                   jabanks:
  576  000004C4  3239001AF068           	move.w	imatrix,d1	;are we in funny bank?
  577  000004CA  0C410008               	cmpi.w	#8,d1
  578  000004CE  67DA                   	beq	jaeffs		;if so, stay there
  579                                   ;
  580  000004D0  80FC0008               	divu	#8,d0		;banks 0-7 please
  581  000004D4  4840                   	swap	d0
  582  000004D6  33C0001AF068           	move.w	d0,imatrix
  583  000004DC  23FC00196814001AE524   	move.l	#gm,action	;this should change bank
  584                                   notvlmr:
  585                                   ;	.if	0
  586  000004E6  3039001AE02A           	move.w	vlm_mode,d0	;check for Jeff in his edit mode
  587  000004EC  0C400003               	cmpi.w	#3,d0		;if he's editting, give him everything
  588  000004F0  66xx                   	bne.s	notJedit


                                        src/cdfront.s        Page 12      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  589                                   ;
  590  000004F2  4A79xxxxxxxx           	tst.w	cancelC		;have we already set cancelC?
  591  000004F8  6Bxx                   	bmi.s	notJedit	;br if so
  592                                   ;
  593                                   ;  We've entered vlm-edit mode
  594                                   ;
  595  000004FA  70FF                   	moveq	#-1,d0
  596  000004FC  33C000F00402           	move.w	d0,CLUT+2
  597  00000502  33C0xxxxxxxx           	move.w	d0,cancelC	;set to cancel one C button
  598  00000508  33FC8000xxxxxxxx       	move.w	#$8000,our_mode	;revert to VLM mode
  599  00000510  33FC0002xxxxxxxx       	move.w	#2,modecnt	;tell indirect layer too
  600                                   ;	.endif
  601                                   ;
  602                                   ;  Check our mode for display option
  603                                   ;
  604                                   ;   0 - VLM only
  605                                   ;   1 - help controller diagram
  606                                   ;   2 - RMW digits only
  607                                   ;   3 - top full panel
  608                                   ;
  609                                   ;
  610                                   notJedit:
  611                                   ;
  612                                   ;
  613  00000518  3039xxxxxxxx           	move.w	our_mode,d0	
  614  0000051E  6A00xxxx               	bpl	samode		;br if no need to change mode
  615                                   ;
  616                                   ;
  617                                   ;  A mode change has occured--display should be changed
  618                                   ;
  619                                   ;   Modes for the time being:
  620                                   ;
  621                                   ;xxxx	0 - vlm mode
  622                                   ;xxxx	1 - controller diagram (help)
  623                                   ;xxxx	2 - digits only
  624                                   ;xxxx	3 - top full panel
  625                                   ;
  626  00000522  72FF                   	moveq	#-1,d1
  627  00000524  2049                   	move.l	a1,a0
  628  00000526  20C1                   	move.l	d1,(a0)+	;force update of track/time data
  629  00000528  20C1                   	move.l	d1,(a0)+
  630  0000052A  20C1                   	move.l	d1,(a0)+
  631                                   
  632  0000052C  41F9001AE148           	lea	davesobj,a0
  633                                   
  634                                   ;
  635  00000532  0800000E               	btst.l	#14,d0		;have we turned off previous mode's
  636  00000536  66xx                   	bne.s	offwait		; grafix yet?  (br if so)
  637                                   ;
  638  00000538  08C0000E               	bset.l	#14,d0		;indicate we're waiting for mode change
  639  0000053C  33C0xxxxxxxx           	move.w	d0,our_mode	;  to take effect
  640  00000542  72FF                   	moveq	#-1,d1
  641  00000544  3141000C               	move.w	d1,$c(a0)	;turn objects off while we're working on 'em
  642  00000548  3141004C               	move.w	d1,$4c(a0)
  643                                   ;
  644  0000054C  3039001AE4D2           	move.w	frames,d0


                                        src/cdfront.s        Page 13      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  645  00000552  5240                   	addq.w	#1,d0		;1 frame should be enuf to take effect
  646  00000554  33C0xxxxxxxx           	move.w	d0,offrame
  647                                   ;
  648  0000055A  33F9001AE4D2xxxxxxxx   	move.w	frames,voltimr	;turn off volume bar (if on)
  649                                   ;
  650  00000564  6100xxxx               	bsr	chngdisp
  651  00000568  6000xxxx               	bra	retvlm		;back to vlm
  652                                   ;	rts
  653                                   ;
  654                                   offwait:
  655  0000056C  3239001AE4D2           	move.w	frames,d1
  656  00000572  B279xxxxxxxx           	cmp.w	offrame,d1
  657  00000578  6Cxx                   	bge.s	offwait1
  658  0000057A  6000xxxx               	bra	retvlm
  659                                   ;
  660                                   ;	rts
  661                                   ;
  662                                   offwait1:
  663  0000057E  0240000F               	andi.w	#$f,d0
  664  00000582  33C0xxxxxxxx           	move.w	d0,our_mode	;here's our new mode	
  665                                   ;
  666                                   ;  ****added 17-Jan-95
  667  00000588  67xx                   	beq.s	jeffgo		;br if entered vlm mode
  668  0000058A  08F9000700194F6E       	bset.b	#7,no_ksel+8	;disable jeff's vlm edit mode
  669  00000592  60xx                   	bra.s	jeffoh
  670                                   jeffgo:
  671  00000594  08B9000700194F6E       	bclr.b	#7,no_ksel+8	;disable jeff's vlm edit mode
  672                                   jeffoh:	
  673                                   ;***end addition
  674                                   ;
  675  0000059C  7200                   	moveq	#0,d1		;assume audio mode
  676  0000059E  0C400003               	cmpi.w	#3,d0		;did we just enter upper panel mode?
  677  000005A2  67xx                   	beq.s	setvlmm
  678  000005A4  4A79xxxxxxxx           	tst.w	audvlm
  679  000005AA  67xx                   	beq.s	setvlmm
  680  000005AC  7201                   	moveq	#1,d1
  681                                   setvlmm:
  682  000005AE  3639001AE02A           	move.w	vlm_mode,d3	;before we change vlm_mode
  683  000005B4  0C430002               	cmpi.w	#2,d3		;check to see if one of Jeff's special
  684  000005B8  64xx                   	bcc.s	setvlmx		;br if Jeff's edit mode--skip vlm_mode change
  685  000005BA  33C1001AE02A           	move.w	d1,vlm_mode
  686                                   setvlmx:
  687                                   ;
  688  000005C0  33FCFFFF00F00402       	move.w	#-1,CLUT+2
  689                                   ;
  690                                   ;
  691  000005C8  D040                   	add.w	d0,d0
  692  000005CA  6700xxxx               	beq	samode		;br if so--we need no objects
  693                                   ;
  694  000005CE  4279001AF06E           	clr.w	vlmtim		;turn off vlm logo if present
  695                                   ;
  696  000005D4  5540                   	subq.w	#2,d0
  697                                   
  698  000005D6  66xx                   	bne.s	skiphelp
  699  000005D8  6100xxxx               	bsr	onhelp		;bring up the joypad help screen
  700  000005DC  6000xxxx               	bra	turnon


                                        src/cdfront.s        Page 14      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  701                                   skiphelp:
  702  000005E0  323B00xx               	move.w	horztab(pc,d0.w),d1
  703  000005E4  343B00xx               	move.w	vertab(pc,d0.w),d2
  704  000005E8  4A79001FD426           	tst.w	pal
  705  000005EE  67xx                   	beq.s	.nopadj
  706                                   ;
  707  000005F0  33FC01F0001AE20C       	move.w	#$1f0,davesobj+$c4	;adjust vlmlogo for PAL
  708                                   
  709  000005F8  343B00xx               	move.w	verptab(pc,d0.w),d2	;fetch from pal
  710                                   .nopadj:
  711  000005FC  363B00xx               	move.w	rmwtab(pc,d0.w),d3
  712  00000600  383B00xx               	move.w	palindx(pc,d0.w),d4
  713  00000604  6000xxxx               	bra	ovtabz
  714                                   ;
  715           =00000016               vertdig	equ	22
  716                                   ;
  717           =00004000               frntbase	equ	$4000	;graphics base addr for front panel	
  718           =0000003F               frnthite	equ	48+15
  719                                   ;
  720           =00007F00               gridbase	equ	$7f00	;graphics base addr for lower buttons & grid 	
  721                                   ;
  722                                   ;
  723                                   ;   graphics for front panel are 256w x 48h
  724                                   ;   @ $4000
  725                                   ;
  726                                   ;   graphics for trk-grid & select boxes is 256w x 96h
  727                                   ;   @ $7000
  728                                   ;
  729                                   ;
  730                                   ;
  731                                   ;
  732                                   ;  Set-up objects for our new mode (1..3)
  733                                   ;
  734                                   ;  Horz positions
  735                                   ;
  736                                   horztab:
  737  00000608  0032                   	dc.w	$32		;1
  738  0000060A  0032                   	dc.w	$32		;2
  739  0000060C  0032                   	dc.w	$32		;3
  740                                   ;
  741                                   ;  Vert positions
  742                                   ;
  743                                   vertab:
  744  0000060E  0180                   	dc.w	$180		;1
  745  00000610  0180                   	dc.w	$180		;2
  746  00000612  0040                   	dc.w	$40		;3
  747                                   verptab:
  748  00000614  01E0                   	dc.w	$180+$60	;1
  749  00000616  01E0                   	dc.w	$180+$60	;2
  750  00000618  0050                   	dc.w	$40+$10		;3
  751                                   ;
  752                                   ;  RMW or transparent
  753                                   ;
  754                                   rmwtab:
  755  0000061A  0001                   	dc.w	1		;1
  756  0000061C  0000                   	dc.w	0		;2


                                        src/cdfront.s        Page 15      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  757  0000061E  0001                   	dc.w	1		;3
  758                                   ;
  759                                   ;  Palette index
  760                                   ;
  761                                   palindx:
  762  00000620  0000                   	dc.w	0		;1
  763  00000622  0000                   	dc.w	0		;2
  764  00000624  0000                   	dc.w	0		;3
  765                                   ;
  766                                   ;  DWIDTH/IWIDTH
  767                                   ;
  768                                   dwidtab:
  769  00000626  0020                   	dc.w	$20		;1
  770  00000628  0020                   	dc.w	$20		;2
  771  0000062A  0020                   	dc.w	$20		;3
  772                                   ;
  773                                   ;  Height
  774                                   ;
  775                                   hitab:
  776  0000062C  0030                   	dc.w	$30		;1
  777  0000062E  0030                   	dc.w	$30		;2
  778                                   
  779                                   ;	dc.w	$50		;3
  780  00000630  003F                   	dc.w	frnthite	;3
  781                                   ;
  782                                   ;  Pixel depth
  783                                   ;
  784                                   pixdtab:
  785  00000632  0003                   	dc.w	3		;1
  786  00000634  0003                   	dc.w	3		;2
  787  00000636  0003                   	dc.w	3		;3
  788                                   ;
  789                                   ;  Back to code
  790                                   ;
  791                                   ovtabz:
  792  00000638  3A3B00EC               	move.w	dwidtab(pc,d0.w),d5
  793  0000063C  3C3B00EE               	move.w	hitab(pc,d0.w),d6
  794  00000640  3E3B00F0               	move.w	pixdtab(pc,d0.w),d7
  795                                   ;
  796  00000644  4A79xxxxxxxx           	tst.w	cdgmode			;are we in cd+g mode?
  797  0000064A  67xx                   	beq.s	ovtabzz			;br if not
  798                                   ;
  799                                   ;  cd+g mode.. let's do a few adjustments
  800                                   ;
  801  0000064C  0C400002               	cmpi.w	#2,d0			;in mode 2 ( (mode-1)*2 ) ?
  802  00000650  66xx                   	bne.s	ovtabzz
  803  00000652  5042                   	addq.w	#8,d2			;lower mode 2 digits
  804  00000654  7601                   	moveq	#1,d3			;no rmw
  805  00000656  4A79001FD426           	tst.w	pal
  806  0000065C  67xx                   	beq.s	ovtabzz
  807  0000065E  947C0028               	sub.w	#$28,d2
  808                                   ovtabzz:
  809                                   ;
  810  00000662  3081                   	move.w	d1,(a0)			;horz position, obj #0
  811  00000664  31410040               	move.w	d1,$40(a0)		;obj #1
  812                                   ;


                                        src/cdfront.s        Page 16      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  813  00000668  31420004               	move.w	d2,$4(a0)		;vert position, obj #0
  814  0000066C  31420044               	move.w	d2,$44(a0)		;obj #1
  815                                   ;
  816  00000670  31430014               	move.w	d3,$14(a0)		;rmw or transparent, obj #0
  817  00000674  31430054               	move.w	d3,$54(a0)		;obj #1
  818                                   ;
  819  00000678  31440016               	move.w	d4,$16(a0)		;palette index, obj #0
  820  0000067C  31440056               	move.w	d4,$56(a0)		;obj #1
  821                                   ;
  822  00000680  31450018               	move.w	d5,$18(a0)		;DWIDTH
  823  00000684  31450058               	move.w	d5,$58(a0)		;DWIDTH
  824                                   ;
  825  00000688  0C400004               	cmpi.w	#4,d0			;in mode 3?
  826  0000068C  66xx                   	bne.s	.nm3
  827  0000068E  4A79xxxxxxxx           	tst.w	m3opt
  828  00000694  67xx                   	beq.s	.nm3
  829  00000696  0446000F               	subi.w	#15,d6
  830                                   .nm3:
  831  0000069A  3146001A               	move.w	d6,$1A(a0)		;height
  832  0000069E  3146005A               	move.w	d6,$5A(a0)		;height
  833  000006A2  3147001C               	move.w	d7,$1C(a0)		;pixel depth
  834  000006A6  3147005C               	move.w	d7,$5C(a0)		;pixel depth
  835                                   ;
  836  000006AA  217C000040000050       	move.l	#frntbase,$50(a0)	;this one might get munged
  837                                   ;
  838                                   ;   Now blit init graphics into display buffer
  839                                   ;
  840  000006B2  6100xxxx               	bsr	screnclr		;clear the screen
  841                                   ;
  842                                   ;
  843  000006B6  303C00E0               	move.w	#$e0,d0			;get rmw colors
  844  000006BA  383CA47F               	move.w	#$a47f,d4		;foreground
  845                                   ;
  846  000006BE  4A79xxxxxxxx           	tst.w	cdgmode			;are we in cd+g mode?
  847  000006C4  67xx                   	beq.s	colzok			;br if not
  848  000006C6  303C0000               	move.w	#0,d0
  849  000006CA  383C0030               	move.w	#$30,d4
  850                                   colzok:
  851  000006CE  33C000F00408           	move.w	d0,CLUT+8		;these are for RMW digits only
  852  000006D4  33C400F00402           	move.w	d4,CLUT+2
  853                                   ;
  854  000006DA  3039xxxxxxxx           	move.w	our_mode,d0
  855  000006E0  0C400002               	cmpi.w	#2,d0
  856  000006E4  6700xxxx               	beq	setcolin		;br if RMW digits only
  857                                   ;
  858                                   ;
  859                                   ;
  860                                   bigfront:
  861                                   ;
  862                                   ;  Mode 1 here--put up the front panel
  863                                   ;
  864                                   ;	clr.w	vlmtim		;force off any lingering VLM logo
  865                                   ;
  866  000006E8  6100xxxx               	bsr	frontup		;blit up the front panel on a cleen screen
  867                                   ;
  868                                   ;	move.w	seqmode,d0	;are we in prog/rand seq modes?


                                        src/cdfront.s        Page 17      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  869                                   ;	cmpi.w	#1,d0		;br if in normal mode
  870                                   ;	beq.s	seqnoevl
  871                                   ;
  872  000006EC  6100xxxx               	bsr	progup		;put up seq grid
  873                                   ;
  874  000006F0  7003                   	moveq	#3,d0
  875  000006F2  B079xxxxxxxx           	cmp.w	our_mode,d0	;
  876  000006F8  66xx                   	bne.s	setcolin
  877                                   ;
  878                                   ;	move.w	#-1,blinkon
  879                                   ;	bsr	ringit		;put up select box if mode 3
  880                                   ;
  881  000006FA  7001                   	moveq	#1,d0
  882  000006FC  72FF                   	moveq	#-1,d1
  883  000006FE  6100xxxx               	bsr	radiob
  884                                   ;
  885  00000702  7005                   	moveq	#4+1,d0
  886  00000704  6100xxxx               	bsr	radiob
  887                                   ;
  888  00000708  3F39xxxxxxxx           	move.w	vlmrand,-(sp)
  889  0000070E  4279xxxxxxxx           	clr.w	vlmrand		;we need this clear for 1st draw
  890  00000714  7008                   	moveq	#8,d0
  891  00000716  6100xxxx               	bsr	radiob
  892  0000071A  33DFxxxxxxxx           	move.w	(sp)+,vlmrand	;restore vlm
  893                                   ;
  894  00000720  7200                   	moveq	#0,d1
  895  00000722  3039xxxxxxxx           	move.w	seqmode,d0
  896  00000728  6100xxxx               	bsr	radiob		;put up sequence mode
  897                                   ;
  898  0000072C  4A79xxxxxxxx           	tst.w	seqmode		;check for program entry
  899  00000732  66xx                   	bne.s	.nproge
  900                                   
  901  00000734  7003                   	moveq	#3,d0
  902  00000736  B079xxxxxxxx           	cmp.w	m3row,d0	;
  903  0000073C  62xx                   	bhi.s	.nproge
  904  0000073E  33FCFFFFxxxxxxxx       	move.w	#-1,progenty
  905                                   .nproge:
  906  00000746  4A79xxxxxxxx           	tst.w	m3opt
  907  0000074C  67xx                   	beq.s	.nm3
  908                                   ;	
  909  0000074E  33FCFFFFxxxxxxxx       	move.w	#-1,blinkon
  910  00000756  6100xxxx               	bsr	ringit		;put up select box if mode 3
  911                                   .nm3:
  912                                   ;
  913                                   seqnoevl:
  914  0000075A  7200                   	moveq	#0,d1
  915                                   ;
  916  0000075C  3039xxxxxxxx           	move.w	reptmode,d0
  917  00000762  5840                   	addq.w	#4,d0
  918  00000764  6100xxxx               	bsr	radiob		;put up repeat mode
  919                                   ;
  920  00000768  3039xxxxxxxx           	move.w	cdgmode,d0
  921  0000076E  5040                   	addq.w	#8,d0
  922  00000770  6100xxxx               	bsr	radiob		;put up vlm/cd+g mode
  923                                   ;
  924                                   ;  arrive here if modes 1 or 2 or 3


                                        src/cdfront.s        Page 18      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  925                                   ;
  926                                   setcolin:
  927  00000774  6100xxxx               	bsr	colons		;put up the min:sec colon
  928  00000778  6100xxxx               	bsr	bankneg		;put up dash between bank-effect
  929  0000077C  6100xxxx               	bsr	bankout		;display bank-effect numbers if mode=2
  930                                   ;
  931  00000780  4A79xxxxxxxx           	tst.w	play		
  932  00000786  66xx                   	bne.s	ovstop	
  933                                   ;
  934  00000788  6100xxxx               	bsr	stopout		;display stop digits
  935                                   ovstop:
  936                                   ;
  937                                   ;   And turn objects on
  938                                   ;
  939                                   turnon:
  940  0000078C  41F9001AE148           	lea	davesobj,a0
  941  00000792  7206                   	moveq	#6,d1
  942  00000794  3039xxxxxxxx           	move.w	our_mode,d0	;check help mode
  943  0000079A  0C400001               	cmpi.w	#1,d0
  944  0000079E  67xx                   	beq.s	justhel
  945                                   ;	
  946  000007A0  3141000C               	move.w	d1,$c(a0)	;modes 2 & 3 require object #0
  947                                   ;
  948  000007A4  0C400002               	cmpi.w	#2,d0		;2 objects?
  949  000007A8  66xx                   	bne.s	just1		;br if not
  950                                   justhel:
  951  000007AA  3141004C               	move.w	d1,$4c(a0)		;else, better turn on 2nd
  952                                   just1:	
  953  000007AE  70FF                   	moveq	#-1,d0
  954  000007B0  13400001               	move.b	d0,1(a1)	
  955  000007B4  13400003               	move.b	d0,3(a1)	
  956  000007B8  13400004               	move.b	d0,4(a1)	
  957  000007BC  13400007               	move.b	d0,7(a1)	
  958  000007C0  13400008               	move.b	d0,8(a1)	
  959                                   ;
  960  000007C4  6100xxxx               	bsr	chngdisp
  961  000007C8  6000xxxx               	bra	retvlm			;we've done enough, go back to Jeff	
  962                                   ;
  963                                   ;
  964                                   ;
  965                                   ;   We're continuing in same mode as before...
  966                                   ;
  967                                   samode:
  968  000007CC  4BF82810               	lea	$2810,a5		;copy q-subcodes
  969  000007D0  41F900F1C010           	lea	$f1c010,a0
  970  000007D6  2AD8                   	move.l	(a0)+,(a5)+
  971  000007D8  2AD8                   	move.l	(a0)+,(a5)+
  972  000007DA  2AD8                   	move.l	(a0)+,(a5)+
  973                                   ;
  974                                   ;  indicate bank/effect if necessary
  975                                   ;
  976  000007DC  3039001AF068           	move.w	imatrix,d0
  977  000007E2  B079xxxxxxxx           	cmp.w	locbank,d0
  978  000007E8  66xx                   	bne.s	baefx
  979  000007EA  3039001AF05E           	move.w	skid,d0
  980  000007F0  B079xxxxxxxx           	cmp.w	loceff,d0


                                        src/cdfront.s        Page 19      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  981  000007F6  67xx                   	beq.s	nobaefx
  982                                   ;
  983                                   ;  bank or effect has changed--put it up..
  984                                   ;
  985                                   baefx:
  986  000007F8  3039001AF068           	move.w	imatrix,d0
  987  000007FE  33C0xxxxxxxx           	move.w	d0,locbank
  988  00000804  33C0xxxxxxxx           	move.w	d0,disbank
  989  0000080A  3039001AF05E           	move.w	skid,d0
  990  00000810  33C0xxxxxxxx           	move.w	d0,loceff
  991  00000816  33C0xxxxxxxx           	move.w	d0,diseff
  992  0000081C  6100xxxx               	bsr	bankout
  993                                   ;
  994                                   ;  tell EEprom too
  995                                   ;
  996  00000820  4A79xxxxxxxx           	tst.w	vlmrand		;better not EE save if in random mode
  997  00000826  66xx                   	bne.s	nobaefx		;since we change so much
  998                                   ;
  999  00000828  3039001AF068           	move.w	imatrix,d0
 1000  0000082E  E948                   	lsl.w	#4,d0
 1001  00000830  8079001AF05E           	or.w	skid,d0
 1002  00000836  33C0xxxxxxxx           	move.w	d0,Sbankeff
 1003  0000083C  323Cxxxx               	move.w	#(Sbankeff-workEE),d1
 1004  00000840  6100xxxx               	bsr	setEE
 1005                                   ;
 1006                                   nobaefx:
 1007                                   ;
 1008                                   ;
 1009  00000844  4A79xxxxxxxx           	tst.w	play			;when in play mode
 1010  0000084A  67xx                   	beq.s	nochkend		;we need to check for off the end stuff
 1011                                   ;
 1012  0000084C  4BF9xxxxxxxx           	lea	fineEND+1,a5
 1013  00000852  4DE90007               	lea	7(a1),a6
 1014  00000856  101E                   	move.b	(a6)+,d0		;are we at max minutes?
 1015  00000858  B01D                   	cmp.b	(a5)+,d0
 1016  0000085A  66xx                   	bne.s	nochkend
 1017  0000085C  101E                   	move.b	(a6)+,d0		;are we at max secs?
 1018  0000085E  B01D                   	cmp.b	(a5)+,d0
 1019  00000860  66xx                   	bne.s	nochkend
 1020                                   ;
 1021                                   ;  we've reached end of disc--check for repeat option
 1022                                   ;
 1023  00000862  3039xxxxxxxx           	move.w	reptmode,d0	;check repet mode (0-rept trk, 1-no, 2-rept dsc)
 1024  00000868  6700xxxx               	beq	starplay	;br if repeat last track
 1025                                   ;
 1026                                   ;  we're at end of last physical track, check next sequence
 1027                                   ;
 1028  0000086C  3A39xxxxxxxx           	move.w	trksptr,d5
 1029  00000872  5245                   	addq.w	#1,d5
 1030  00000874  41F9xxxxxxxx           	lea	trkseq,a0
 1031  0000087A  7C00                   	moveq	#0,d6
 1032  0000087C  1C305000               	move.b	(a0,d5.w),d6	;get next track in sequence
 1033  00000880  66xx                   	bne.s	moseq		;br if more tracks in sequence
 1034                                   ;
 1035                                   ;  reached end of sequence and end of disc
 1036                                   ;


                                        src/cdfront.s        Page 20      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1037  00000882  7A00                   	moveq	#0,d5
 1038  00000884  33C5xxxxxxxx           	move.w	d5,trksptr
 1039  0000088A  1C10                   	move.b	(a0),d6		;get repeat track # if needed
 1040  0000088C  0C400002               	cmpi.w	#2,d0		;repeat disc mode?
 1041  00000890  6600xxxx               	bne	dostop		;if not, just stop
 1042                                   ;
 1043                                   ;
 1044                                   ;  More tracks in sequence, but we must seek to them
 1045                                   ;
 1046                                   moseq:
 1047  00000894  33C5xxxxxxxx           	move.w	d5,trksptr	;save new sequence ptr
 1048  0000089A  33C6xxxxxxxx           	move.w	d6,track
 1049  000008A0  6000xxxx               	bra	starplay	
 1050                                   ;
 1051                                   ;
 1052                                   nochkend:
 1053                                   ;
 1054                                   ;
 1055  000008A4  4A39xxxxxxxx           	tst.b	retcode+1		;we can't display if waiting for found
 1056  000008AA  6B00xxxx               	bmi	checkjoy
 1057                                   ;
 1058                                   ;   check display update
 1059                                   ;
 1060                                   ;
 1061  000008AE  4BF82810               	lea	DSPqcode+$10,a5		;here's the DSP polled Q-subcodes
 1062  000008B2  7404                   	moveq	#4,d2			;we just want to check 5
 1063  000008B4  7201                   	moveq	#1,d1
 1064  000008B6  B279xxxxxxxx           	cmp.w	scan,d1			;are we in active scan?
 1065  000008BC  6400xxxx               	bcc	subupd			;br if not
 1066                                   ;
 1067                                   ;  in scan mode, we use the seek pointer
 1068                                   ;
 1069  000008C0  4BF9xxxxxxxx           	lea	hexbcd,a5
 1070                                   ;
 1071  000008C6  7600                   	moveq	#0,d3
 1072  000008C8  2439xxxxxxxx           	move.l	scantime,d2	;scan mode seek pointer
 1073                                   ;
 1074  000008CE  7800                   	moveq	#0,d4
 1075  000008D0  E08A                   	lsr.l	#8,d2		;d2.b = Asecs
 1076  000008D2  1802                   	move.b	d2,d4
 1077  000008D4  18354000               	move.b	(a5,d4.w),d4
 1078  000008D8  B8290008               	cmp.b	8(a1),d4	;have Aseconds changed?
 1079  000008DC  67xx                   	beq.s	noAsec		;br if no change
 1080                                   ;
 1081  000008DE  13440008               	move.b	d4,8(a1)	;update Aseconds
 1082  000008E2  5283                   	addq.l	#1,d3		;Asec update indicator
 1083                                   noAsec:
 1084  000008E4  E04A                   	lsr.w	#8,d2		;d2.b = Amins
 1085  000008E6  1802                   	move.b	d2,d4
 1086  000008E8  18354000               	move.b	(a5,d4.w),d4
 1087  000008EC  B8290007               	cmp.b	7(a1),d4	;have Amins changed?
 1088  000008F0  67xx                   	beq.s	noAmin		;br if no change
 1089                                   ;
 1090  000008F2  13440007               	move.b	d4,7(a1)	
 1091  000008F6  5483                   	addq.l	#2,d3
 1092                                   noAmin:


                                        src/cdfront.s        Page 21      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1093  000008F8  4A43                   	tst.w	d3
 1094  000008FA  6600xxxx               	bne	doAchg		;do change if one found
 1095  000008FE  4A79xxxxxxxx           	tst.w	scanrel		;do we need to process scan relative display
 1096  00000904  6700xxxx               	beq	checkjoy	;br if not
 1097                                   ;
 1098  00000908  4279xxxxxxxx           	clr.w	scanrel		;tell 'em we're updating
 1099                                   ;
 1100                                   ;  compute relative scan
 1101                                   ;
 1102  0000090E  4BF82C00               	lea	realTOC,a5
 1103  00000912  2439xxxxxxxx           	move.l	scantime,d2
 1104  00000918  7AFF                   	moveq	#-1,d5		;indicate if track has changed
 1105  0000091A  2C3C00FFFFFF           	move.l	#$ffffff,d6
 1106                                   ;
 1107  00000920  7000                   	moveq	#0,d0
 1108  00000922  3039xxxxxxxx           	move.w	track,d0	;get track #
 1109                                   ;	
 1110  00000928  E748                   	lsl.w	#3,d0
 1111  0000092A  DAC0                   	adda.w	d0,a5
 1112                                   
 1113                                   retrack:
 1114  0000092C  2615                   	move.l	(a5),d3		;base addr of current track
 1115  0000092E  5285                   	addq.l	#1,d5		;d5=0 (track not changed)
 1116  00000930  C686                   	and.l	d6,d3
 1117  00000932  B483                   	cmp.l	d3,d2		;reality check on track # 
 1118  00000934  65xx                   	bcs.s	trkhi		;br if track # too hi
 1119                                   ;
 1120                                   ;  see if we have passed into next track
 1121                                   ;
 1122  00000936  282D0008               	move.l	8(a5),d4	;check for next track
 1123  0000093A  C886                   	and.l	d6,d4
 1124  0000093C  67xx                   	beq.s	trkgood		;br if we're in last track
 1125                                   ;
 1126  0000093E  B484                   	cmp.l	d4,d2
 1127  00000940  65xx                   	bcs.s	trkgood		;br if our track is ok
 1128                                   ;
 1129                                   ;  track # is too low
 1130                                   ;
 1131  00000942  508D                   	addq.l	#8,a5
 1132  00000944  5279xxxxxxxx           	addq.w	#1,track
 1133  0000094A  60E0                   	bra	retrack
 1134                                   trkhi:
 1135  0000094C  518D                   	subq.l	#8,a5
 1136  0000094E  5379xxxxxxxx           	subq.w	#1,track
 1137  00000954  6700xxxx               	beq	dostop	
 1138  00000958  60D2                   	bra	retrack
 1139                                   ;
 1140                                   trkgood:
 1141  0000095A  4A45                   	tst.w	d5		;did we get a track update?
 1142  0000095C  67xx                   	beq.s	trksame		;br if not
 1143  0000095E  3039xxxxxxxx           	move.w	track,d0
 1144  00000964  6100xxxx               	bsr	hex2bcd
 1145  00000968  13C0xxxxxxxx           	move.b	d0,SubCode+1	;save new track
 1146  0000096E  7201                   	moveq	#1,d1		;set offset for track
 1147  00000970  48E73800               	movem.l	d2-d4,-(sp)
 1148  00000974  6100xxxx               	bsr	printout


                                        src/cdfront.s        Page 22      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1149  00000978  4CDF001C               	movem.l	(sp)+,d2-d4
 1150                                   ;
 1151                                   ;   d2 = current spot
 1152                                   ;   d3 = base of current track
 1153                                   ;   d4 = base of current track +1
 1154                                   ;
 1155                                   trksame:
 1156  0000097C  E08A                   	lsr.l	#8,d2
 1157  0000097E  E08B                   	lsr.l	#8,d3
 1158                                   ;
 1159  00000980  9403                   	sub.b	d3,d2
 1160  00000982  64xx                   	bcc.s	trksec
 1161  00000984  D43C003C               	add.b	#60,d2
 1162  00000988  003C0010               	ori	#$10,ccr		;set x
 1163                                   trksec:
 1164  0000098C  E05A                   	ror.w	#8,d2
 1165  0000098E  E05B                   	ror.w	#8,d3			;d3 = Sec Min
 1166  00000990  9503                   	subx.b	d3,d2
 1167  00000992  4BF9xxxxxxxx           	lea	hexbcd,a5
 1168  00000998  7000                   	moveq	#0,d0
 1169  0000099A  1002                   	move.b	d2,d0
 1170  0000099C  137500000003           	move.b	(a5,d0.w),3(a1)		;BCD relative minutes
 1171  000009A2  E04A                   	lsr.w	#8,d2
 1172  000009A4  1002                   	move.b	d2,d0
 1173  000009A6  137500000004           	move.b	(a5,d0.w),4(a1)		;BCD relative seconds
 1174  000009AC  7401                   	moveq	#1,d2
 1175                                   subupdz:
 1176  000009AE  7200                   	moveq	#0,d1
 1177  000009B0  7000                   	moveq	#0,d0
 1178  000009B2  123B20xx               	move.b	suboffs+1(pc,d2.w),d1	;get next subcode offset
 1179  000009B6  10311000               	move.b	(a1,d1.w),d0		;get new data for display
 1180                                   
 1181  000009BA  48E72004               	movem.l	a5/d2,-(sp)
 1182  000009BE  6100xxxx               	bsr	printout
 1183                                   ;	bsr	prout
 1184  000009C2  4CDF2004               	movem.l	(sp)+,a5/d2
 1185                                   nosubdz:
 1186  000009C6  51CAFFE6               	dbra	d2,subupdz
 1187  000009CA  6000xxxx               	bra	checkjoy
 1188                                   ;
 1189                                   ;
 1190                                   ;   Do Abs min/sec change here
 1191                                   ;
 1192                                   doAchg:
 1193  000009CE  7401                   	moveq	#1,d2
 1194  000009D0  33C2xxxxxxxx           	move.w	d2,scanrel	;set for rel change next time thru
 1195                                   subupdx:
 1196  000009D6  7200                   	moveq	#0,d1
 1197  000009D8  7000                   	moveq	#0,d0
 1198  000009DA  E24B                   	lsr.w	#1,d3
 1199  000009DC  64xx                   	bcc.s	nosubdx
 1200  000009DE  123B20xx               	move.b	suboffs+3(pc,d2.w),d1	;get next subcode offset
 1201  000009E2  10311000               	move.b	(a1,d1.w),d0		;get new data for display
 1202                                   
 1203  000009E6  48E73004               	movem.l	a5/d2-d3,-(sp)
 1204  000009EA  6100xxxx               	bsr	printout


                                        src/cdfront.s        Page 23      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1205                                   ;	bsr	prout
 1206  000009EE  4CDF200C               	movem.l	(sp)+,a5/d2-d3
 1207                                   nosubdx:
 1208  000009F2  51CAFFE2               	dbra	d2,subupdx
 1209  000009F6  6000xxxx               	bra	checkjoy
 1210                                   ;
 1211                                   suboffs:
 1212  000009FA  010304070809           	dc.b	1,3,4,7,8,9
 1213                                   ;
 1214                                   ;  During normal play, we need to filter q_subcodes
 1215                                   ;
 1216                                   ;
 1217                                   subupd:
 1218  00000A00  4A79xxxxxxxx           	tst.w	pause		;check pause mode
 1219  00000A06  67xx                   	beq.s	subupd0		;br if not in pause mode
 1220  00000A08  4A290001               	tst.b	1(a1)		;do we need a single update?
 1221  00000A0C  6Bxx                   	bmi.s	subupd0		;br if so
 1222  00000A0E  6000xxxx               	bra	checkjoy
 1223                                   subupd0:
 1224                                   ;
 1225  00000A12  08F90000xxxxxxxx       	bset.b	#0,cdgflags	;normal run mode, make sure cdg is updated
 1226  00000A1A  7801                   	moveq	#1,d4		;we need for abcd
 1227  00000A1C  7400                   	moveq	#0,d2		;flags for redraw
 1228                                   ;
 1229                                   ;   Check out Asec
 1230                                   ;
 1231  00000A1E  7000                   	moveq	#0,d0
 1232  00000A20  102D0008               	move.b	8(a5),d0	;get proposed Asec from DSP
 1233  00000A24  16290008               	move.b	8(a1),d3	;get previously displayed Asec
 1234  00000A28  6Bxx                   	bmi.s	Asecdo
 1235  00000A2A  B003                   	cmp.b	d3,d0		;need to update display?
 1236  00000A2C  67xx                   	beq.s	noAsecd		;br if not
 1237                                   ;
 1238                                   Asecdo:
 1239  00000A2E  5282                   	addq.l	#1,d2		;set Asec needs display flag 
 1240  00000A30  13400008               	move.b	d0,8(a1)	;save new
 1241                                   noAsecd:
 1242                                   ;
 1243                                   ;    Now check out Amin
 1244                                   ;
 1245  00000A34  7000                   	moveq	#0,d0
 1246  00000A36  102D0007               	move.b	7(a5),d0	;get proposed Amin from DSP
 1247  00000A3A  16290007               	move.b	7(a1),d3	;get previously displayed Amin
 1248  00000A3E  6Bxx                   	bmi.s	Amindo
 1249  00000A40  B003                   	cmp.b	d3,d0		;need to update display?
 1250  00000A42  67xx                   	beq.s	noAmind		;br if not
 1251                                   ;
 1252                                   Amindo:
 1253  00000A44  5482                   	addq.l	#2,d2		;set Amin flag
 1254  00000A46  13400007               	move.b	d0,7(a1)	;save new
 1255                                   noAmind:
 1256                                   ;
 1257                                   ;   Next, do Rsec (relative seconds)
 1258                                   ;
 1259  00000A4A  7000                   	moveq	#0,d0
 1260  00000A4C  102D0004               	move.b	4(a5),d0	;get proposed Rsec from DSP


                                        src/cdfront.s        Page 24      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1261  00000A50  4A2D0002               	tst.b	2(a5)
 1262  00000A54  66xx                   	bne.s	negadj
 1263  00000A56  5200                   	addq.b	#1,d0
 1264                                   negadj:
 1265  00000A58  16290004               	move.b	4(a1),d3	;get previously displayed Rsec
 1266  00000A5C  6Bxx                   	bmi.s	Rsecdo
 1267  00000A5E  B003                   	cmp.b	d3,d0		;need to update display?
 1268  00000A60  67xx                   	beq.s	noRsecd		;br if not
 1269                                   ;
 1270                                   Rsecdo:
 1271  00000A62  5882                   	addq.l	#4,d2		;set Rsec needs display flag 
 1272  00000A64  13400004               	move.b	d0,4(a1)	;save new
 1273                                   noRsecd:
 1274                                   ;
 1275                                   ;    Now check out Rmin
 1276                                   ;
 1277  00000A68  7000                   	moveq	#0,d0
 1278  00000A6A  102D0003               	move.b	3(a5),d0	;get proposed Rmin from DSP
 1279  00000A6E  16290003               	move.b	3(a1),d3	;get previously displayed Rmin
 1280  00000A72  6Bxx                   	bmi.s	Rmindo
 1281  00000A74  B003                   	cmp.b	d3,d0		;need to update display?
 1282  00000A76  67xx                   	beq.s	noRmind		;br if not
 1283                                   ;
 1284                                   Rmindo:
 1285  00000A78  5082                   	addq.l	#8,d2		;set Rmin flag
 1286  00000A7A  13400003               	move.b	d0,3(a1)	;save new
 1287                                   noRmind:
 1288                                   ;
 1289                                   ;    Now check out Track
 1290                                   ;
 1291  00000A7E  7000                   	moveq	#0,d0
 1292  00000A80  102D0001               	move.b	1(a5),d0	;get proposed Track from DSP
 1293  00000A84  16290001               	move.b	1(a1),d3	;get previously displayed Track
 1294  00000A88  0C0300FF               	cmpi.b	#-1,d3		;check for minus 1
 1295  00000A8C  6700xxxx               	beq	Tdo		; always display if -1
 1296  00000A90  B003                   	cmp.b	d3,d0		;need to update display?
 1297  00000A92  6700xxxx               	beq	noTdo		;br if not
 1298                                   ;
 1299                                   ;  track change has occured during play
 1300                                   ;
 1301                                   ;***********test
 1302                                   ;	move.w	#$1501,$dfff0a
 1303                                   ;***********end test
 1304                                   ;
 1305                                   ;
 1306  00000A96  3839xxxxxxxx           	move.w	reptmode,d4	;check repet mode (0-rept trk, 1-no, 2-rept dsc)
 1307  00000A9C  66xx                   	bne.s	ntrkrep		;br if not repeat track
 1308                                   ;
 1309                                   ;  we want to repeat track just completed
 1310                                   ;
 1311  00000A9E  7000                   	moveq	#0,d0
 1312  00000AA0  1003                   	move.b	d3,d0
 1313  00000AA2  6100xxxx               	bsr	bcd2hex
 1314  00000AA6  33C0xxxxxxxx           	move.w	d0,track
 1315  00000AAC  6000xxxx               	bra	starplay	;go repeat the track
 1316                                   ;


                                        src/cdfront.s        Page 25      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1317                                   ;  check next track in sequence
 1318                                   ;
 1319                                   ntrkrep:
 1320  00000AB0  3A39xxxxxxxx           	move.w	trksptr,d5
 1321  00000AB6  5245                   	addq.w	#1,d5
 1322  00000AB8  41F9xxxxxxxx           	lea	trkseq,a0
 1323  00000ABE  1C305000               	move.b	(a0,d5.w),d6	;get next track in sequence
 1324  00000AC2  67xx                   	beq.s	endseq		;br if no more tracks in sequence
 1325                                   ;
 1326  00000AC4  33C5xxxxxxxx           	move.w	d5,trksptr	;save new sequence ptr
 1327  00000ACA  48E7C000               	movem.l	d0-d1,-(sp)
 1328  00000ACE  6100xxxx               	bsr	bcd2hex		;change new track bcd to hex
 1329  00000AD2  3E00                   	move.w	d0,d7		;copy to d7
 1330  00000AD4  4CDF0003               	movem.l	(sp)+,d0-d1
 1331  00000AD8  BE06                   	cmp.b	d6,d7		;is sequence same as new track
 1332  00000ADA  66xx                   	bne.s	dscrep		;br if not
 1333                                   ;
 1334  00000ADC  48E7E004               	movem.l	d0-d2/a5,-(sp)
 1335  00000AE0  6100xxxx               	bsr	uprantrk
 1336  00000AE4  4A79xxxxxxxx           	tst.w	m3opt
 1337  00000AEA  67xx                   	beq.s	.skipr
 1338  00000AEC  33FCFFFFxxxxxxxx       	move.w	#-1,blinkon
 1339  00000AF4  6100xxxx               	bsr	ringit
 1340                                   .skipr:
 1341  00000AF8  4CDF2007               	movem.l	(sp)+,d0-d2/a5
 1342                                   ;
 1343  00000AFC  60xx                   	bra.s	Tdo		;br if so--just roll over to next track
 1344                                   ;
 1345                                   ;  we have a custom sequence here, better seek to next sequence track
 1346                                   ;
 1347                                   dscrep:
 1348  00000AFE  4886                   	ext.w	d6
 1349  00000B00  33C6xxxxxxxx           	move.w	d6,track
 1350  00000B06  6000xxxx               	bra	starplay	
 1351                                   ;
 1352                                   ;  reached end of sequence
 1353                                   ;
 1354                                   endseq:		
 1355  00000B0A  4279xxxxxxxx           	clr.w	trksptr		;set for start of sequence next time
 1356  00000B10  0C440002               	cmpi.w	#2,d4		;repeat disc mode?
 1357  00000B14  6600xxxx               	bne	dostop		;br if not--just stop
 1358                                   ;
 1359  00000B18  1C10                   	move.b	(a0),d6		;get repeat track # if needed
 1360  00000B1A  B879xxxxxxxx           	cmp.w	seqmode,d4	;sequence mode = 2 (random)?
 1361  00000B20  66DC                   	bne	dscrep		;br if not random to repeat disc
 1362                                   ;
 1363  00000B22  2F08                   	move.l	a0,-(sp)
 1364  00000B24  6100xxxx               	bsr	randf		;re-randomize track sequence before repeating
 1365  00000B28  7003                   	moveq	#3,d0
 1366  00000B2A  B079xxxxxxxx           	cmp.w	our_mode,d0	;we'll need display update if in mode=3
 1367  00000B30  66xx                   	bne.s	.nrandup
 1368  00000B32  4279xxxxxxxx           	clr.w	gridoff		;29-Mar-95
 1369  00000B38  6100xxxx               	bsr	progup		;update display if necessary
 1370                                   .nrandup:
 1371  00000B3C  205F                   	move.l	(sp)+,a0
 1372  00000B3E  4279xxxxxxxx           	clr.w	trksptr		;set for start of sequence next time


                                        src/cdfront.s        Page 26      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1373  00000B44  1C10                   	move.b	(a0),d6		;get repeat track # if needed
 1374  00000B46  60B6                   	bra	dscrep
 1375                                   ;
 1376                                   Tdo:
 1377  00000B48  08C20004               	bset.l	#4,d2		;set Track flag
 1378  00000B4C  13400001               	move.b	d0,1(a1)	;save new Track
 1379  00000B50  6100xxxx               	bsr	bcd2hex
 1380  00000B54  33C0xxxxxxxx           	move.w	d0,track
 1381                                   ;
 1382  00000B5A  136D00040004           	move.b	4(a5),4(a1)
 1383  00000B60  136D00030003           	move.b	3(a5),3(a1)
 1384  00000B66  0042000C               	ori.w	#$c,d2
 1385                                   noTdo:
 1386                                   ;
 1387                                   ;    Now check out Sign bit
 1388                                   ;
 1389  00000B6A  7000                   	moveq	#0,d0
 1390  00000B6C  102D0002               	move.b	2(a5),d0	;get proposed Index from DSP
 1391  00000B70  16290002               	move.b	2(a1),d3	;get previously displayed Sign
 1392  00000B74  6Bxx                   	bmi.s	Sbitdo
 1393  00000B76  B003                   	cmp.b	d3,d0		;need to update display?
 1394  00000B78  67xx                   	beq.s	noSbit		;br if not
 1395                                   ;
 1396                                   Sbitdo:
 1397  00000B7A  08C20005               	bset.l	#5,d2		;set Sign-bit flag
 1398  00000B7E  13400002               	move.b	d0,2(a1)	;save new
 1399  00000B82  60xx                   	bra.s	noSbit
 1400                                   ;
 1401                                   ;
 1402                                   suboffz:
 1403  00000B84  010304070809           	dc.b	1,3,4,7,8,9
 1404                                   ;
 1405                                   ;
 1406                                   ;
 1407                                   noSbit:
 1408                                   ;
 1409  00000B8A  7604                   	moveq	#4,d3
 1410                                   subqlp:
 1411  00000B8C  E24A                   	lsr.w	#1,d2
 1412  00000B8E  64xx                   	bcc.s	nosubd
 1413  00000B90  7200                   	moveq	#0,d1
 1414  00000B92  7000                   	moveq	#0,d0
 1415  00000B94  123B30EE               	move.b	suboffz(pc,d3.w),d1	;get next subcode offset
 1416  00000B98  10311000               	move.b	(a1,d1.w),d0
 1417  00000B9C  48E73000               	movem.l	d2-d3,-(sp)
 1418  00000BA0  6100xxxx               	bsr	printout
 1419  00000BA4  4CDF000C               	movem.l	(sp)+,d2-d3
 1420                                   nosubd:
 1421  00000BA8  51CBFFE2               	dbra	d3,subqlp
 1422  00000BAC  4A42                   	tst.w	d2			;only sign bit is left
 1423  00000BAE  6700xxxx               	beq	checkjoy		;br if no change
 1424                                   ;
 1425                                   ;  set or clear sign-bit
 1426                                   ;
 1427  00000BB2  41F900F02200           	lea	A1_BASE,a0
 1428  00000BB8  323C00CE               	move.w	#206,d1			;dst


                                        src/cdfront.s        Page 27      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1429  00000BBC  4841                   	swap	d1
 1430  00000BBE  323C0070               	move.w	#112,d1			;src
 1431                                   ;
 1432  00000BC2  4A290002               	tst.b	2(a1)
 1433  00000BC6  6700xxxx               	beq	.blwait
 1434                                   ;
 1435  00000BCA  323C0064               	move.w	#$64,d1			;use blank for "positive"
 1436                                   ;
 1437                                   .blwait:
 1438  00000BCE  24280038               	move.l	B_CMD-A1_BASE(a0),d2	;wait til blitter free
 1439  00000BD2  E24A                   	lsr.w	#1,d2
 1440  00000BD4  64F8                   	bcc	.blwait
 1441                                   
 1442  00000BD6  217C000600000024       	move.l	#$60000,A2_BASE-A1_BASE(a0)	;set SRC base
 1443  00000BDE  20BC00004000           	move.l	#frntbase,(a0)			;set DST base
 1444                                   
 1445  00000BE4  217C000138180028       	move.l	#PITCH1|WID128|XADDPIX|PIXEL8,A2_FLAGS-A1_BASE(a0)	;src
 1446  00000BEC  217C000140180004       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A1_FLAGS-A1_BASE(a0)	;dst
 1447                                   ;
 1448  00000BF4  7400                   	moveq	#0,d2		;ypos
 1449  00000BF6  3401                   	move.w	d1,d2		;src y=0, x 
 1450  00000BF8  21420030               	move.l	d2,A2_PIXEL-A1_BASE(a0)
 1451                                   ;
 1452  00000BFC  7416                   	moveq	#vertdig,d2		;ypos
 1453  00000BFE  4842                   	swap	d2
 1454  00000C00  4841                   	swap	d1
 1455  00000C02  3401                   	move.w	d1,d2		;dst y=0, x 
 1456  00000C04  2142000C               	move.l	d2,A1_PIXEL-A1_BASE(a0)
 1457                                   ;
 1458  00000C08  217C00110006003C       	move.l	#(17*$10000)+6,B_COUNT-A1_BASE(a0)	;w:6, h:17
 1459  00000C10  243C0001FFFA           	move.l	#(2*$10000)-6,d2
 1460  00000C16  21420010               	move.l	d2,A1_STEP-A1_BASE(a0)
 1461  00000C1A  21420034               	move.l	d2,A2_STEP-A1_BASE(a0)
 1462  00000C1E  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 1463                                   ;
 1464                                   ;	bra	checkjoy
 1465                                   ;
 1466                                   ;
 1467                                   ;
 1468                                   ;
 1469                                   ;   New joystick bit assignments (we now follow Jeff's)
 1470                                   ;
 1471                                   ;	pad_now (longword):
 1472                                   ;
 1473                                   ;	 3         2         1         0
 1474                                   ;	10987654321098765432109876543210
 1475                                   ;	xxAPxxBxRLDU147*xxCxxxOx2580369#
 1476                                   ;
 1477                                   ;
 1478                                   ;
 1479           =0000001D               Abit	equ	29	;fireA bit
 1480           =0000001C               Pbit	equ	28	;pause bit
 1481           =00000014               Ubit	equ	20	;   Up bit
 1482           =00000015               Dbit	equ	21	; Down bit
 1483           =00000016               Lbit	equ	22	; Left bit
 1484           =00000017               Rbit	equ	23	; Rite bit


                                        src/cdfront.s        Page 28      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1485           =00000019               Bbit	equ	25	;fireB bit
 1486           =0000000D               Cbit	equ	13	;fireC bit
 1487           =00000009               Obit	equ	9	;Option bit
 1488                                   ;
 1489                                   checkjoy:
 1490  00000C26  6100xxxx               	bsr	m3trans			;do translation or mode3
 1491                                   ;
 1492  00000C2A  2639xxxxxxxx           	move.l	dave_pad,d3		;get current joystick
 1493                                   ;
 1494                                   ;	tst.w	our_mode		;are we in Jeff only mode?
 1495                                   ;	bne.s	noignor
 1496                                   ;		   3         2         1         0
 1497                                   ;		  10987654321098765432109876543210
 1498                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 1499                                   ;	andi.l	#%00110000000000000000001000000000,d3	;only want these
 1500                                   ;noignor:
 1501  00000C30  2239xxxxxxxx           	move.l	joyprev,d1		;and previous one too
 1502  00000C36  23C3xxxxxxxx           	move.l	d3,joyprev		;save new previous
 1503  00000C3C  2003                   	move.l	d3,d0
 1504  00000C3E  B380                   	eor.l	d1,d0			;check for edges
 1505                                   ;
 1506                                   ;
 1507                                   ;		   3         2         1         0
 1508                                   ;		  10987654321098765432109876543210
 1509                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 1510  00000C40  028032F02200           	andi.l	#%00110010111100000010001000000000,d0	;only want these
 1511  00000C46  6600xxxx               	bne	butedge
 1512                                   ;
 1513                                   ;  No transitions..
 1514                                   ;
 1515                                   checkvol:
 1516  00000C4A  3039xxxxxxxx           	move.w	volfcnt,d0	;are we in VOL raise/lower auto repeat?
 1517  00000C50  67xx                   	beq.s	novauto		;br if not
 1518  00000C52  9079001AE4D2           	sub.w	frames,d0	; else, time to move up/down?
 1519  00000C58  6Cxx                   	bge.s	novauto		; br if not yet
 1520                                   ;
 1521                                   ;  time to raise/lower volume
 1522                                   ;
 1523  00000C5A  3039001AE4D2           	move.w	frames,d0	;
 1524  00000C60  06400005               	addi.w	#5,d0		;next adjust in 5 frames please
 1525  00000C64  66xx                   	bne.s	yeavauto
 1526  00000C66  5240                   	addq.w	#1,d0		;make it 6 if volfcnt would be 0 otherwise
 1527                                   yeavauto:
 1528  00000C68  33C0xxxxxxxx           	move.w	d0,volfcnt
 1529  00000C6E  48E76000               	movem.l	d1-d2,-(sp)
 1530  00000C72  2403                   	move.l	d3,d2
 1531  00000C74  6100xxxx               	bsr	volupdwn	;this routine looks at d2.l for Ubit/Dbit
 1532  00000C78  4CDF0006               	movem.l	(sp)+,d1-d2	
 1533                                   ;
 1534                                   ;  done with raise/lower volume
 1535                                   ;
 1536                                   novauto:
 1537  00000C7C  3039xxxxxxxx           	move.w	scan,d0		;are we in wait for scan mode?
 1538  00000C82  6700xxxx               	beq	nojoy		;br if not
 1539                                   stilldwn:
 1540                                   ;


                                        src/cdfront.s        Page 29      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1541                                   ;  some type of scan stuff here..
 1542                                   ;
 1543  00000C86  0C400001               	cmpi.w	#1,d0		;waiting for min hold?
 1544  00000C8A  6600xxxx               	bne	scammin		;br if we're actively scanning
 1545                                   ;
 1546                                   ;  waiting for min hold time on scan
 1547                                   ;
 1548  00000C8E  3039001AE4D2           	move.w	frames,d0
 1549  00000C94  9079xxxxxxxx           	sub.w	scanfcnt,d0
 1550  00000C9A  0C400028               	cmpi.w	#40,d0		;wait 2/3 sec for scan
 1551  00000C9E  6500xxxx               	bcs	nojoy
 1552                                   ;
 1553                                   ;  Reached minimum time--start up a scan
 1554                                   ;
 1555  00000CA2  08B90000xxxxxxxx       	bclr.b	#0,cdgflags
 1556                                   ;
 1557  00000CAA  7002                   	moveq	#2,d0		;assume forward	
 1558  00000CAC  08030016               	btst.l	#Lbit,d3	;right (forward) scan?
 1559  00000CB0  66xx                   	bne.s	setscan
 1560  00000CB2  7003                   	moveq	#3,d0		;assume backward
 1561  00000CB4  08030017               	btst.l	#Rbit,d3	;left (backward) scan?
 1562  00000CB8  6600xxxx               	bne	setscan
 1563                                   ;
 1564                                   ;  hey--what happened to our scan!!!
 1565                                   ;
 1566  00000CBC  4279xxxxxxxx           	clr.w	scan
 1567  00000CC2  6000xxxx               	bra	nojoy
 1568                                   ;	illegal			;shouldn't get here
 1569                                   ;
 1570                                   ;  start up a scan
 1571                                   ;
 1572                                   setscan:
 1573  00000CC6  3600                   	move.w	d0,d3		;save fore/back scan indicator
 1574                                   ;
 1575  00000CC8  10382817               	move.b	DSPqcode+$17,d0
 1576                                   ;	move.b	7(a1),d0	;fetch abs Mins (BCD)
 1577  00000CCC  6100xxxx               	bsr	bcd2hex		;convert to hex
 1578  00000CD0  6600xxxx               	bne	nojoy
 1579  00000CD4  7400                   	moveq	#0,d2
 1580  00000CD6  1400                   	move.b	d0,d2		;save in d2
 1581  00000CD8  10382818               	move.b	DSPqcode+$18,d0
 1582                                   ;	move.b	8(a1),d0	;now do Asec
 1583  00000CDC  6100xxxx               	bsr	bcd2hex
 1584  00000CE0  6600xxxx               	bne	nojoy
 1585  00000CE4  E18A                   	lsl.l	#8,d2
 1586  00000CE6  1400                   	move.b	d0,d2		;save secs
 1587  00000CE8  10382819               	move.b	DSPqcode+$19,d0
 1588                                   ;	move.b	9(a1),d0
 1589  00000CEC  6100xxxx               	bsr	bcd2hex
 1590  00000CF0  6600xxxx               	bne	nojoy
 1591  00000CF4  E18A                   	lsl.l	#8,d2
 1592  00000CF6  1400                   	move.b	d0,d2
 1593  00000CF8  23C2xxxxxxxx           	move.l	d2,scantime
 1594  00000CFE  33C3xxxxxxxx           	move.w	d3,scan
 1595  00000D04  33F9001AE4D2xxxxxxxx   	move.w	frames,scanfcnt
 1596  00000D0E  4279xxxxxxxx           	clr.w	scancnt		;count of goto time commands issued


                                        src/cdfront.s        Page 30      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1597                                   ;
 1598                                   ;  do our scan thing
 1599                                   ;
 1600                                   scammin:
 1601  00000D14  3039001AE4D2           	move.w	frames,d0
 1602  00000D1A  B079xxxxxxxx           	cmp.w	scanfcnt,d0	;is it time for next goto time command?
 1603  00000D20  6500xxxx               	bcs	nojoy		;br if not
 1604                                   ;
 1605  00000D24  4A39xxxxxxxx           	tst.b	retcode+1	;are we still waiting for "found"?
 1606  00000D2A  6600xxxx               	bne	nojoy		;br if so
 1607                                   ;
 1608                                   ; compute next goto time
 1609                                   ;
 1610  00000D2E  7600                   	moveq	#0,d3
 1611  00000D30  3639xxxxxxxx           	move.w	rate,d3		;vid_frames/tick
 1612  00000D36  D083                   	add.l	d3,d0
 1613  00000D38  33C0xxxxxxxx           	move.w	d0,scanfcnt
 1614  00000D3E  5583                   	subq.l	#2,d3
 1615  00000D40  E54B                   	lsl.w	#2,d3
 1616  00000D42  223B30xx               	move.l	slowrate(pc,d3.w),d1
 1617  00000D46  3039xxxxxxxx           	move.w	scancnt,d0
 1618  00000D4C  0C40001E               	cmpi.w	#30,d0
 1619  00000D50  65xx                   	bcs.s	audfok
 1620  00000D52  223B30xx               	move.l	fastrate(pc,d3.w),d1
 1621  00000D56  60xx                   	bra.s	audfok
 1622                                   slowrate:
 1623  00000D58  00000019               	dc.l	$019	;2
 1624  00000D5C  00000026               	dc.l	$026	;3
 1625  00000D60  00000032               	dc.l	$032	;4
 1626  00000D64  0000003F               	dc.l	$03F	;5
 1627  00000D68  00000100               	dc.l	$100	;6
 1628  00000D6C  0000010D               	dc.l	$10D	;7
 1629  00000D70  00000119               	dc.l	$119	;8
 1630                                   fastrate:
 1631  00000D74  00000200               	dc.l	$200	;2
 1632  00000D78  00000300               	dc.l	$300	;3
 1633  00000D7C  00000400               	dc.l	$400	;4
 1634  00000D80  00000500               	dc.l	$500	;5
 1635  00000D84  00000600               	dc.l	$600	;6
 1636  00000D88  00000700               	dc.l	$700	;7
 1637  00000D8C  00000800               	dc.l	$800	;8
 1638                                   rate:
 1639  00000D90  0006                   	dc.w	6		;2..8
 1640                                   audfok:
 1641                                   
 1642  00000D92  2639xxxxxxxx           	move.l	scantime,d3
 1643                                   ;
 1644                                   ;  d1 = increment
 1645                                   ;  d3 = last goto time point
 1646                                   ;
 1647  00000D98  3039xxxxxxxx           	move.w	scan,d0		;advance forward or reverse?
 1648  00000D9E  E248                   	lsr.w	#1,d0
 1649  00000DA0  64xx                   	bcc.s	scanundr	;br if reverse
 1650                                   ;
 1651                                   ;  else, compute forward scan
 1652                                   ;


                                        src/cdfront.s        Page 31      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1653  00000DA2  D601                   	add.b	d1,d3			;advance our time by frame increment
 1654  00000DA4  B63C004B               	cmp.b	#75,d3			;d3= 00 Am As Af
 1655  00000DA8  65xx                   	bcs.s	frok
 1656  00000DAA  963C004B               	sub.b	#75,d3	
 1657  00000DAE  003C0010               	ori	#$10,ccr		;set x
 1658                                   frok:
 1659  00000DB2  E099                   	ror.l	#8,d1
 1660  00000DB4  E09B                   	ror.l	#8,d3			;d3 = Af 00 Am As
 1661  00000DB6  D701                   	addx.b	d1,d3
 1662  00000DB8  B63C003C               	cmp.b	#60,d3
 1663  00000DBC  65xx                   	bcs.s	secok
 1664  00000DBE  963C003C               	sub.b	#60,d3
 1665  00000DC2  003C0010               	ori	#$10,ccr		;set x
 1666                                   secok:
 1667  00000DC6  E099                   	ror.l	#8,d1
 1668  00000DC8  E09B                   	ror.l	#8,d3			;d3 = As Af 00 Am
 1669  00000DCA  D701                   	addx.b	d1,d3
 1670  00000DCC  E09B                   	ror.l	#8,d3			;d3 = Am As Af 00
 1671  00000DCE  B6B9xxxxxxxx           	cmp.l	origEND,d3		;check for exceeding end `o time
 1672  00000DD4  65xx                   	bcs.s	dopoint			;now advance to our setpoint
 1673  00000DD6  6000xxxx               	bra	outbndz			;br to out of bounds
 1674                                   ;
 1675                                   ;  compute reverse scanpoint
 1676                                   ;
 1677                                   scanundr:
 1678  00000DDA  9601                   	sub.b	d1,d3			;backup our time by frame decrement
 1679  00000DDC  64xx                   	bcc.s	frokx			;frames ok
 1680  00000DDE  D63C004B               	add.b	#75,d3
 1681  00000DE2  003C0010               	ori	#$10,ccr		;set x
 1682                                   frokx:
 1683  00000DE6  E099                   	ror.l	#8,d1
 1684  00000DE8  E09B                   	ror.l	#8,d3			;d3 = Af 00 Am As
 1685  00000DEA  9701                   	subx.b	d1,d3
 1686  00000DEC  64xx                   	bcc.s	secokx
 1687  00000DEE  D63C003C               	add.b	#60,d3
 1688  00000DF2  003C0010               	ori	#$10,ccr		;set x
 1689                                   secokx:
 1690  00000DF6  E099                   	ror.l	#8,d1
 1691  00000DF8  E09B                   	ror.l	#8,d3			;d3 = As Af 00 Am
 1692  00000DFA  9701                   	subx.b	d1,d3
 1693  00000DFC  E09B                   	ror.l	#8,d3			;d3 = Am As Af 00
 1694  00000DFE  7800                   	moveq	#0,d4
 1695  00000E00  4044                   	negx.w	d4
 1696  00000E02  67xx                   	beq.s	dopoint
 1697                                   ;
 1698                                   ;  a fast forward/backward request puts us out-of-bounds...
 1699                                   ;
 1700                                   outbndz:
 1701  00000E04  4A79xxxxxxxx           	tst.w	play			;are we in play mode?
 1702  00000E0A  6600xxxx               	bne	dostop			;stop if so
 1703  00000E0E  6000xxxx               	bra	nojoy			;else, ignore further advancement
 1704                                   ;
 1705                                   ;   d3.l = Am As Af 00
 1706                                   ;
 1707                                   dopoint:
 1708  00000E12  283C00001000           	move.l	#$1000,d4


                                        src/cdfront.s        Page 32      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1709  00000E18  7C02                   	moveq	#2,d6
 1710  00000E1A  60xx                   	bra.s	ovwaits
 1711                                   gotolp:
 1712                                   .waitset:
 1713  00000E1C  2A14                   	move.l	(a4),d5
 1714  00000E1E  0805000C               	btst.l	#12,d5			;wait for DSA tx to be set
 1715  00000E22  67F8                   	beq	.waitset
 1716  00000E24  3A2C000A               	move.w	DS_DATA(a4),d5
 1717  00000E28  4AAC0004               	tst.l	DSCNTRL(a4)
 1718                                   ovwaits:
 1719  00000E2C  E19B                   	rol.l	#8,d3
 1720  00000E2E  1803                   	move.b	d3,d4
 1721                                   ;
 1722  00000E30  3944000A               	move.w	d4,DS_DATA(a4)		;send min goto time command word
 1723                                   ;
 1724  00000E34  06440100               	addi.w	#$100,d4
 1725  00000E38  51CEFFE2               	dbra	d6,gotolp
 1726                                   ;
 1727                                   ;
 1728  00000E3C  7201                   	moveq	#1,d1
 1729  00000E3E  13C1xxxxxxxx           	move.b	d1,retcode+1		;we are waiting for found
 1730                                   ;
 1731  00000E44  23C3xxxxxxxx           	move.l	d3,scantime
 1732  00000E4A  5279xxxxxxxx           	addq.w	#1,scancnt		;advance count of scans
 1733  00000E50  6000xxxx               	bra	nojoy
 1734                                   ;
 1735                                   ;
 1736                                   ;  Button edge transition here...
 1737                                   ;
 1738                                   ;  d3.l = pad_now (joycur)
 1739                                   ;  d1.l = joyprev
 1740                                   ;  d0.l = edges
 1741                                   ;
 1742                                   butedge:
 1743  00000E54  2400                   	move.l	d0,d2
 1744  00000E56  C483                   	and.l	d3,d2		;we're only interested in positive edges here
 1745                                   ;		   3         2         1         0
 1746                                   ;		  10987654321098765432109876543210
 1747                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 1748  00000E58  028232002200           	andi.l	#%00110010000000000010001000000000,d2	;only want these
 1749                                   ;
 1750  00000E5E  4A79xxxxxxxx           	tst.w	cdgmode
 1751  00000E64  66xx                   	bne.s	nOption
 1752                                   ;
 1753  00000E66  08020009               	btst.l	#Obit,d2	;positive edge on Option?
 1754  00000E6A  67xx                   	beq.s	nOption		;br if not
 1755                                   ;
 1756  00000E6C  7C01                   	moveq	#1,d6
 1757  00000E6E  4679xxxxxxxx           	not.w	audvlm
 1758  00000E74  66xx                   	bne.s	stuffvlm
 1759  00000E76  7C00                   	moveq	#0,d6
 1760                                   stuffvlm:
 1761  00000E78  33C6001AE02A           	move.w	d6,vlm_mode
 1762                                   ;
 1763  00000E7E  6100xxxx               	bsr	fliplogo
 1764                                   ;


                                        src/cdfront.s        Page 33      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1765  00000E82  33FC0007001AE214       	move.w	#7,beasties+(7*$40)+$C	;put up new for a few secs
 1766  00000E8A  33FC0040001AF06E       	move.w	#$40,vlmtim
 1767                                   ;
 1768                                   ;
 1769                                   nOption:
 1770  00000E92  0802001D               	btst.l	#Abit,d2	;positive edge on FireA?
 1771  00000E96  67xx                   	beq.s	nfireAtr	;go start something
 1772                                   ;
 1773  00000E98  3C39xxxxxxxx           	move.w	modecnt,d6
 1774  00000E9E  5246                   	addq.w	#1,d6
 1775                                   ;
 1776                                   ;	.if	0
 1777  00000EA0  0C460003               	cmpi.w	#3,d6		;this logic skips the ugly help screen
 1778  00000EA4  65xx                   	bcs.s	.shortwr
 1779  00000EA6  7C00                   	moveq	#0,d6
 1780                                   .shortwr:
 1781                                   ;	.endif
 1782                                   ;	andi.w	#3,d6
 1783                                   
 1784  00000EA8  33C6xxxxxxxx           	move.w	d6,modecnt
 1785  00000EAE  1C3B60xx               	move.b	rmseq(pc,d6.w),d6
 1786  00000EB2  66xx                   	bne.s	nfAtrx		;br if not the VLM-only mode
 1787  00000EB4  60xx                   	bra.s	ovrmseq
 1788                                   rmseq:
 1789  00000EB6  03020001               	dc.b	3,2,0,1		;richard miller's sequence order
 1790                                   ovrmseq:
 1791                                   ;
 1792                                   ;  "VLM-only" mode--actually we could be in CD+G mode
 1793                                   ;
 1794  00000EBA  4A79xxxxxxxx           	tst.w	cdgmode		;are we in cd+g?
 1795  00000EC0  66xx                   	bne.s	nfAtrx		;br if so--skip vlm prep stuff
 1796                                   ;
 1797                                   ;  Just entered VLM only mode..indicate whether "audio" or "vlm"
 1798                                   ;
 1799                                   ;	tst.w	vlm_mode	;else, we might need
 1800                                   ;	bne.s	nfAtrx		;to let
 1801                                   ;	move.w	#1,vlm_mode	; Jeff field some joypad here 
 1802                                   ;
 1803                                   ;  Put up logo for ~1 sec
 1804                                   ;
 1805  00000EC2  33FC0007001AE214       	move.w	#7,beasties+(7*$40)+$C
 1806  00000ECA  33FC0040001AF06E       	move.w	#$40,vlmtim
 1807                                   nfAtrx:
 1808  00000ED2  00468000               	ori.w	#$8000,d6
 1809  00000ED6  33C6xxxxxxxx           	move.w	d6,our_mode
 1810                                   nfireAtr:
 1811  00000EDC  08020019               	btst.l	#Bbit,d2	;positive edge on FireB?
 1812  00000EE0  6600xxxx               	bne	fireBtr		;go start something
 1813                                   ;
 1814  00000EE4  0802000D               	btst.l	#Cbit,d2	;how about fireC?
 1815  00000EE8  6600xxxx               	bne	fireCtr
 1816                                   ;
 1817  00000EEC  0802001C               	btst.l	#Pbit,d2	;any pause leading edge?
 1818  00000EF0  6700xxxx               	beq	nofireA		;br if not to check other transitions
 1819                                   ;
 1820                                   ;  leading edge of Pause


                                        src/cdfront.s        Page 34      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1821                                   ;
 1822  00000EF4  4A79xxxxxxxx           	tst.w	play		;are we in play mode?
 1823  00000EFA  6700xxxx               	beq	nofireA		;br if not
 1824  00000EFE  4A79xxxxxxxx           	tst.w	pause		;in pause mode?
 1825  00000F04  6700xxxx               	beq	setpause
 1826                                   ;
 1827                                   ;  release pause
 1828                                   ;
 1829                                   relpause:
 1830  00000F08  08F90000xxxxxxxx       	bset.b	#0,cdgflags
 1831  00000F10  7004                   	moveq	#4,d0
 1832  00000F12  7200                   	moveq	#0,d1
 1833  00000F14  6100xxxx               	bsr	depressd
 1834                                   ;
 1835  00000F18  4279xxxxxxxx           	clr.w	pause
 1836  00000F1E  303C0500               	move.w	#$500,d0	;pause release
 1837  00000F22  60xx                   	bra.s	paws
 1838                                   setpause:
 1839  00000F24  08B90000xxxxxxxx       	bclr.b	#0,cdgflags
 1840  00000F2C  7004                   	moveq	#4,d0
 1841  00000F2E  7201                   	moveq	#1,d1
 1842  00000F30  6100xxxx               	bsr	depressd
 1843                                   ;
 1844  00000F34  33FCFFFFxxxxxxxx       	move.w	#-1,pause
 1845  00000F3C  303C0400               	move.w	#$400,d0
 1846                                   paws:
 1847  00000F40  7200                   	moveq	#0,d1			;# of return words
 1848  00000F42  6100xxxx               	bsr	DSA_tx
 1849                                   ;
 1850  00000F46  6000xxxx               	bra	nojoy
 1851                                   ;	
 1852                                   ;
 1853                                   ;  positive push on fireB
 1854                                   ;
 1855                                   fireBtr:
 1856  00000F4A  4279xxxxxxxx           	clr.w	scan		;exit scan if needed
 1857  00000F50  4A79xxxxxxxx           	tst.w	play		;are we already playing?
 1858  00000F56  67xx                   	beq.s	fireBx		;br if not--we can enter now
 1859                                   ;
 1860  00000F58  4A79xxxxxxxx           	tst.w	pause		;check for pause mode
 1861  00000F5E  6700xxxx               	beq	nojoy		;if not in pause, we can ignore
 1862  00000F62  60A4                   	bra	relpause	; else, just release pause
 1863                                   ;
 1864                                   fireBx:
 1865  00000F64  33FCFFFFxxxxxxxx       	move.w	#-1,play	;set
 1866  00000F6C  6000xxxx               	bra	starplay
 1867                                   ;
 1868                                   ;
 1869                                   fireCtr:
 1870  00000F70  7000                   	moveq	#0,d0
 1871  00000F72  7201                   	moveq	#1,d1
 1872  00000F74  6100xxxx               	bsr	depressd		;stop button pushed
 1873                                   ;
 1874  00000F78  4279xxxxxxxx           	clr.w	scan
 1875  00000F7E  4A79xxxxxxxx           	tst.w	play		;are we already stopped?
 1876  00000F84  6700xxxx               	beq	nojoy		;if so--we're done


                                        src/cdfront.s        Page 35      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1877                                   ;
 1878                                   ;  stop a play
 1879                                   ;
 1880                                   dostopx:
 1881  00000F88  4A79xxxxxxxx           	tst.w	cancelC		;is there a cancelC in effect
 1882  00000F8E  67xx                   	beq.s	dostop		;br if not
 1883  00000F90  4279xxxxxxxx           	clr.w	cancelC		;only do it once
 1884  00000F96  6000xxxx               	bra	nojoy
 1885                                   dostop:
 1886  00000F9A  4279xxxxxxxx           	clr.w	cancelC		;only do it once
 1887  00000FA0  4279xxxxxxxx           	clr.w	play
 1888  00000FA6  4279xxxxxxxx           	clr.w	track
 1889  00000FAC  4279xxxxxxxx           	clr.w	trksptr
 1890                                   ;
 1891  00000FB2  6100xxxx               	bsr	uprantrk
 1892  00000FB6  4A79xxxxxxxx           	tst.w	m3opt
 1893  00000FBC  67xx                   	beq.s	.rering
 1894  00000FBE  33FCFFFFxxxxxxxx       	move.w	#-1,blinkon
 1895  00000FC6  6100xxxx               	bsr	ringit
 1896                                   .rering:
 1897                                   ;
 1898  00000FCA  4A79xxxxxxxx           	tst.w	pause
 1899  00000FD0  67xx                   	beq.s	unpawzd
 1900                                   ;
 1901  00000FD2  7004                   	moveq	#4,d0
 1902  00000FD4  7200                   	moveq	#0,d1
 1903  00000FD6  6100xxxx               	bsr	depressd
 1904                                   ;
 1905  00000FDA  4279xxxxxxxx           	clr.w	pause
 1906                                   unpawzd:
 1907                                   ;
 1908  00000FE0  7002                   	moveq	#2,d0
 1909  00000FE2  7200                   	moveq	#0,d1
 1910  00000FE4  6100xxxx               	bsr	depressd		;play button raised
 1911                                   ;
 1912  00000FE8  6100xxxx               	bsr	stopout
 1913                                   ;
 1914  00000FEC  303C0200               	move.w	#$200,d0		;
 1915  00000FF0  7200                   	moveq	#0,d1			;# of return words
 1916  00000FF2  6000xxxx               	bra	exitplay
 1917                                   ;
 1918                                   ;  start a play
 1919                                   ;
 1920                                   starplay:
 1921  00000FF6  6100xxxx               	bsr	uprantrk
 1922                                   
 1923  00000FFA  4A79xxxxxxxx           	tst.w	m3opt
 1924  00001000  67xx                   	beq.s	.skipr
 1925  00001002  33FCFFFFxxxxxxxx       	move.w	#-1,blinkon
 1926  0000100A  6100xxxx               	bsr	ringit
 1927                                   .skipr:
 1928                                   
 1929                                   ;
 1930  0000100E  7000                   	moveq	#0,d0
 1931  00001010  7200                   	moveq	#0,d1
 1932  00001012  6100xxxx               	bsr	depressd		;reset button raised


                                        src/cdfront.s        Page 36      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1933                                   ;
 1934  00001016  7002                   	moveq	#2,d0
 1935  00001018  7201                   	moveq	#1,d1
 1936  0000101A  6100xxxx               	bsr	depressd		;play button depressed
 1937                                   ;
 1938  0000101E  3039xxxxxxxx           	move.w	trksptr,d0
 1939  00001024  6Axx                   	bpl.s	.starts
 1940  00001026  7000                   	moveq	#0,d0
 1941  00001028  33C0xxxxxxxx           	move.w	d0,trksptr
 1942                                   .starts:
 1943  0000102E  41F9xxxxxxxx           	lea	trkseq,a0
 1944  00001034  10300000               	move.b	(a0,d0.w),d0
 1945                                   ;
 1946                                   ;	move.w	track,d0
 1947                                   ;	bmi.s	set1
 1948                                   ;	bne.s	set0	
 1949                                   ;set1:
 1950                                   ;	move.w	#1,d0
 1951                                   ;
 1952  00001038  33C0xxxxxxxx           	move.w	d0,track
 1953                                   set0:
 1954  0000103E  6100xxxx               	bsr	string		;start of play digit display
 1955                                   ;
 1956  00001042  3039xxxxxxxx           	move.w	track,d0
 1957  00001048  00400100               	ori.w	#$100,d0
 1958  0000104C  7200                   	moveq	#0,d1
 1959                                   exitplay:
 1960  0000104E  6100xxxx               	bsr	DSA_tx
 1961  00001052  70FF                   	moveq	#-1,d0
 1962  00001054  13C0xxxxxxxx           	move.b	d0,retcode+1		;we are waiting for found
 1963  0000105A  13400001               	move.b	d0,1(a1)	
 1964  0000105E  13400003               	move.b	d0,3(a1)	
 1965  00001062  13400004               	move.b	d0,4(a1)	
 1966  00001066  13400007               	move.b	d0,7(a1)	
 1967  0000106A  13400008               	move.b	d0,8(a1)
 1968  0000106E  08B90000xxxxxxxx       	bclr.b	#0,cdgflags	
 1969  00001076  6000xxxx               	bra	nojoy
 1970                                   ;
 1971                                   ;
 1972                                   ;   Button transition, but not fireB or Pause
 1973                                   ;
 1974                                   ;  d3.l = pad_now (joycur)
 1975                                   ;  d1.l = joyprev
 1976                                   ;  d0.l = edges
 1977                                   ;
 1978                                   ;
 1979                                   ;   Not fireA, fireB, or fireC or pause, check track inc/dec
 1980                                   ;
 1981                                   nofireA:
 1982  0000107A  2400                   	move.l	d0,d2
 1983                                   ;		   3         2         1         0
 1984                                   ;		  10987654321098765432109876543210
 1985                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 1986  0000107C  028200002200           	andi.l	#%00000000000000000010001000000000,d2	;check release of C
 1987  00001082  C481                   	and.l	d1,d2
 1988  00001084  67xx                   	beq.s	hangfire


                                        src/cdfront.s        Page 37      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1989                                   ;
 1990  00001086  0802000D               	btst.l	#Cbit,d2
 1991  0000108A  66xx                   	bne.s	Crels			;br if release of C
 1992                                   ;
 1993                                   ;  must be release of Option key
 1994                                   ;
 1995                                   ;	bsr	offhelp
 1996                                   ;	bsr	chngdisp
 1997                                   ;
 1998  0000108C  60xx                   	bra.s	hangfire
 1999                                   ;
 2000                                   ;  Release of C 
 2001                                   ;
 2002                                   Crels:
 2003  0000108E  7000                   	moveq	#0,d0			;release "C" (stop) button
 2004  00001090  7200                   	moveq	#0,d1
 2005  00001092  6100xxxx               	bsr	depressd
 2006  00001096  6000xxxx               	bra	nojoy	
 2007                                   hangfire:
 2008  0000109A  2400                   	move.l	d0,d2
 2009                                   	
 2010                                   ;
 2011                                   ;		   3         2         1         0
 2012                                   ;		  10987654321098765432109876543210
 2013                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 2014  0000109C  028200F00000           	andi.l	#%00000000111100000000000000000000,d2	;only want LRUD
 2015  000010A2  C483                   	and.l	d3,d2
 2016  000010A4  6600xxxx               	bne	scanbeg				;check br if leading edges
 2017                                   ;
 2018  000010A8  2400                   	move.l	d0,d2
 2019                                   ;
 2020                                   ;		   3         2         1         0
 2021                                   ;		  10987654321098765432109876543210
 2022                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 2023  000010AA  028200F00000           	andi.l	#%00000000111100000000000000000000,d2	;only want LRUD
 2024  000010B0  C481                   	and.l	d1,d2			;check trailing edge
 2025  000010B2  6700xxxx               	beq	nojoy			;exit if not LRUD
 2026                                   ;
 2027  000010B6  08020015               	btst.l	#Dbit,d2		;check for release of Up/Down
 2028  000010BA  66xx                   	bne.s	offvol			;we got a release
 2029  000010BC  08020014               	btst.l	#Ubit,d2
 2030  000010C0  67xx                   	beq.s	skipvol			;no release detected
 2031                                   ;
 2032                                   ;  Up/Down was released...set timer for 3 seconds til display shut-down
 2033                                   ;
 2034                                   offvol:
 2035  000010C2  3039001AE4D2           	move.w	frames,d0
 2036  000010C8  064000B4               	addi.w	#180,d0
 2037  000010CC  66xx                   	bne.s	timeok
 2038  000010CE  5240                   	addq.w	#1,d0
 2039                                   timeok:
 2040  000010D0  33C0xxxxxxxx           	move.w	d0,voltimr
 2041  000010D6  4279xxxxxxxx           	clr.w	volfcnt		;turn off possible repeat raise/lower
 2042                                   skipvol:
 2043                                   ;
 2044                                   ;  R,L trailing edge


                                        src/cdfront.s        Page 38      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2045                                   ;
 2046                                   ;   d2 has trailing edge of L or R
 2047                                   ;
 2048  000010DC  7001                   	moveq	#1,d0
 2049  000010DE  08020016               	btst.l	#Lbit,d2	;check for left release
 2050  000010E2  66xx                   	bne.s	lrelez	
 2051  000010E4  08020017               	btst.l	#Rbit,d2	;right release
 2052  000010E8  6700xxxx               	beq	nojoy
 2053  000010EC  7003                   	moveq	#3,d0
 2054                                   lrelez:
 2055  000010EE  7200                   	moveq	#0,d1
 2056  000010F0  2F02                   	move.l	d2,-(sp)
 2057  000010F2  6100xxxx               	bsr	depressd
 2058  000010F6  241F                   	move.l	(sp)+,d2
 2059                                   ;
 2060  000010F8  3039xxxxxxxx           	move.w	scan,d0
 2061  000010FE  4279xxxxxxxx           	clr.w	scan		;clear any scan
 2062  00001104  7202                   	moveq	#2,d1
 2063  00001106  B041                   	cmp.w	d1,d0
 2064  00001108  6500xxxx               	bcs	unscand		;br if no scan going on--we track up/down
 2065                                   ;
 2066                                   ;  else--a scan is being terminated, no track up/down
 2067                                   ;
 2068  0000110C  08F90000xxxxxxxx       	bset.b	#0,cdgflags
 2069                                   ;
 2070  00001114  6100xxxx               	bsr	trkptrsm	;smart track ptr restore: d2 has R L 
 2071  00001118  6100xxxx               	bsr	uprantrk
 2072  0000111C  6000xxxx               	bra	nojoy
 2073                                   ;
 2074                                   ; R, L trailing edge in d2.l without scan--this indicates a seek track up/down
 2075                                   ;
 2076                                   unscand:
 2077                                   	.if	0
 2078                                 - 	moveq	#0,d0
 2079                                 - 	move.b	1(a1),d0	;get TRK from subcode
 2080                                 - 
 2081                                 - 	bsr	bcd2hex
 2082                                 - 	beq.s	trkng
 2083                                 - 	move.w	track,d0
 2084                                 - trkng:
 2085                                 - 	move.w	maxmin,d1
 2086                                 - 	cmp.b	d0,d1
 2087                                 - 	bcc	trkgoo
 2088                                 - 	move.w	track,d0
 2089                                 - trkgoo:	
 2090                                 - 	tst.w	d0
 2091                                 - 	bne.s	trkgoo1
 2092                                 - 	tst.w	play
 2093                                 - 	bne.s	play0
 2094                                 - 	btst.l	#Rbit,d2
 2095                                 - 	bne.s	trkgoo1
 2096                                 - play0:
 2097                                 - 	moveq	#1,d0
 2098                                 - trkgoo1:
 2099                                 - 	move.w	d0,track
 2100                                 - 	.endif


                                        src/cdfront.s        Page 39      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2101                                   ;
 2102  00001120  41F9xxxxxxxx           	lea	trkseq,a0		;ptr to track sequence
 2103  00001126  3039xxxxxxxx           	move.w	trksptr,d0		;get current track offset in seq
 2104                                   ;	bpl.s	.trkpos
 2105                                   ;	moveq	#0,d0
 2106                                   ;	move.w	d0,trksptr
 2107                                   ;.trkpos:
 2108                                   ;
 2109  0000112C  08020017               	btst.l	#Rbit,d2		;is it Right (track increment)?
 2110  00001130  66xx                   	bne.s	truckup			;br if so
 2111                                   ;
 2112                                   ;  else, left (track decrement)
 2113                                   ;
 2114  00001132  4A79xxxxxxxx           	tst.w	play		;are we in play mode?
 2115  00001138  67xx                   	beq.s	playno		;br if not
 2116  0000113A  4A39xxxxxxxx           	tst.b	retcode+1
 2117  00001140  66xx                   	bne.s	playno
 2118                                   ;
 2119                                   ;  in play mode...
 2120                                   ;
 2121  00001142  0C2900010003           	cmp.b	#1,3(a1)	;check if close to start of track
 2122                                   ;	
 2123  00001148  64xx                   	bcc.s	newtrkgd
 2124  0000114A  0C2900020004           	cmp.b	#2,4(a1)	;if within 2 seconds, we back to previous
 2125  00001150  64xx                   	bcc.s	newtrkgd
 2126                                   playno:
 2127  00001152  5340                   	subq.w	#1,d0
 2128  00001154  6B00xxxx               	bmi	nojoy		;ignore if track is too low
 2129  00001158  6000xxxx               	bra	newtrkgd
 2130                                   ;
 2131                                   ;   track increment
 2132                                   ;
 2133                                   truckup:
 2134  0000115C  4A79xxxxxxxx           	tst.w	play
 2135  00001162  66xx                   	bne.s	trucky		;skip the following if in play
 2136                                   ;
 2137                                   ;  not in play mode..
 2138                                   ;
 2139  00001164  4A79xxxxxxxx           	tst.w	track		;is this the first time we've hit right?
 2140  0000116A  67xx                   	beq.s	trucku		;br if so
 2141                                   trucky:
 2142  0000116C  5240                   	addq.w	#1,d0
 2143                                   trucku:
 2144  0000116E  4A300000               	tst.b	(a0,d0.w)	;are we at the end
 2145  00001172  6700xxxx               	beq	nojoy		;br if so--can't go this hi
 2146                                   newtrkgd:
 2147  00001176  33C0xxxxxxxx           	move.w	d0,trksptr
 2148  0000117C  10300000               	move.b	(a0,d0.w),d0	;fetch physical track #
 2149  00001180  33C0xxxxxxxx           	move.w	d0,track
 2150                                   ;
 2151  00001186  6100xxxx               	bsr	string		;blank out time-code
 2152                                   ;
 2153  0000118A  08B90000xxxxxxxx       	bclr.b	#0,cdgflags
 2154                                   ;
 2155  00001192  4A79xxxxxxxx           	tst.w	play
 2156  00001198  6700xxxx               	beq	nojoy		;if not playing, just display new & exit


                                        src/cdfront.s        Page 40      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2157  0000119C  4A79xxxxxxxx           	tst.w	pause		;were we paused?
 2158  000011A2  67xx                   	beq.s	noprel		;if not, skip pause release
 2159                                   ;
 2160  000011A4  4279xxxxxxxx           	clr.w	pause
 2161  000011AA  303C0500               	move.w	#$500,d0		;pause release
 2162  000011AE  7201                   	moveq	#1,d1			;# of return words
 2163  000011B0  6100xxxx               	bsr	DSA_tx
 2164                                   ;
 2165                                   noprel:
 2166  000011B4  3039xxxxxxxx           	move.w	track,d0
 2167  000011BA  6000FE3A               	bra	starplay	;if playing, seek new track
 2168                                   ;
 2169                                   ;  Leading edge on R or L -- enter waiting for scan mode  
 2170                                   ;
 2171                                   scanbeg:
 2172  000011BE  08020014               	btst.l	#Ubit,d2	;check for up/down
 2173  000011C2  66xx                   	bne.s	updownon	
 2174  000011C4  08020015               	btst.l	#Dbit,d2
 2175  000011C8  67xx                   	beq.s	scanbeg1
 2176                                   ;
 2177                                   ;   Turn on volume indicator
 2178                                   ;
 2179                                   updownon:
 2180  000011CA  3039001AE4D2           	move.w	frames,d0
 2181  000011D0  06400019               	addi.w	#25,d0		;1/2 sec before we start auto raise/lower
 2182  000011D4  66xx                   	bne.s	rltimok
 2183  000011D6  5240                   	addq.w	#1,d0
 2184                                   rltimok:	
 2185  000011D8  33C0xxxxxxxx           	move.w	d0,volfcnt	;save frame count when auto repeat begins
 2186                                   ;
 2187  000011DE  4A79xxxxxxxx           	tst.w	voltimr		;are we already on?
 2188  000011E4  67xx                   	beq.s	udset
 2189                                   ;
 2190  000011E6  6100xxxx               	bsr	volupdwn
 2191                                   udset:
 2192  000011EA  33FC0006001AE1D4       	move.w	#6,davesobj+$8c	;turn on volume object
 2193                                   ;
 2194  000011F2  6100xxxx               	bsr	chngdisp
 2195                                   ;
 2196                                   ;
 2197                                   ;
 2198                                   scanbeg1:
 2199  000011F6  7001                   	moveq	#1,d0
 2200  000011F8  08020016               	btst.l	#Lbit,d2
 2201  000011FC  66xx                   	bne.s	lsetez
 2202  000011FE  08020017               	btst.l	#Rbit,d2
 2203  00001202  6700xxxx               	beq	nojoy
 2204  00001206  7003                   	moveq	#3,d0
 2205                                   lsetez:
 2206  00001208  7201                   	moveq	#1,d1
 2207  0000120A  6100xxxx               	bsr	depressd
 2208                                   ;
 2209  0000120E  33FC0001xxxxxxxx       	move.w	#1,scan
 2210  00001216  33F9001AE4D2xxxxxxxx   	move.w	frames,scanfcnt	;save time when wait for hold 1st entered
 2211                                   ;
 2212                                   ;  fall thru to nojoy


                                        src/cdfront.s        Page 41      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2213                                   ;
 2214                                   nojoy:
 2215  00001220  2414                   	move.l	(a4),d2			;check receive buffer full
 2216  00001222  0802000D               	btst.l	#13,d2
 2217  00001226  6700xxxx               	beq	retvlm
 2218                                   ;
 2219                                   ;
 2220                                   gotone:
 2221  0000122A  342C000A               	move.w	DS_DATA(a4),d2		;else, get bogus receive stuff
 2222  0000122E  4AAC0004               	tst.l	DSCNTRL(a4)		;read to clear interrupt flag
 2223  00001232  4BF9xxxxxxxx           	lea	retcode,a5
 2224  00001238  3002                   	move.w	d2,d0
 2225  0000123A  E048                   	lsr.w	#8,d0
 2226  0000123C  1B820000               	move.b	d2,(a5,d0.w)		;save return code
 2227                                   ;
 2228                                   ;  *****The following 5 lines added 28-Mar-95
 2229  00001240  0C000004               	cmpi.b	#4,d0			;are we error code
 2230  00001244  66xx                   	bne.s	retvlm			;br if not
 2231                                   ;
 2232  00001246  4A2D0001               	tst.b	1(a5)			;check for scan error
 2233  0000124A  6Axx                   	bpl.s	retvlm			;must be scan
 2234  0000124C  6000FDF0               	bra	set0			;retry this track seek
 2235                                   ;  ********end addition
 2236                                   ;
 2237                                   ;   go back to vlm
 2238                                   ;
 2239                                   retvlm:
 2240  00001250  4A79xxxxxxxx           	tst.w	cdgmode			;return to vlm if not in cd+g
 2241  00001256  66xx                   	bne.s	mustbcdg	
 2242  00001258  4E75                   	rts
 2243                                   ;
 2244                                   mustbcdg:
 2245  0000125A  6100xxxx               	bsr	subcode			;call Pradip for service
 2246  0000125E  4A79xxxxxxxx           	tst.w	Pradip
 2247  00001264  66xx                   	bne.s	mbcdg
 2248  00001266  6100xxxx               	bsr	dispsub
 2249  0000126A  33FCFFFFxxxxxxxx       	move.w	#-1,Pradip
 2250  00001272  4EB900196446           	jsr	readpad
 2251                                   mbcdg:
 2252                                   ;	bra	mustbcdg
 2253  00001278  6000F088               	bra	service
 2254                                   ;
 2255                                   ;
 2256                                   ;
 2257                                   ;   d0.b is BCD to convert to hex
 2258                                   ;   d1 is trashed (returns 0 if good BCD else nz)
 2259                                   ;
 2260                                   ;
 2261                                   bcd2hex:
 2262  0000127C  024000FF               	andi.w	#$ff,d0
 2263  00001280  3200                   	move.w	d0,d1
 2264  00001282  0241000F               	andi.w	#$f,d1
 2265  00001286  0C41000A               	cmpi.w	#10,d1
 2266  0000128A  64xx                   	bcc.s	bcdbad
 2267  0000128C  E848                   	lsr.w	#4,d0
 2268  0000128E  0C40000A               	cmpi.w	#10,d0


                                        src/cdfront.s        Page 42      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2269  00001292  64xx                   	bcc.s	bcdbad
 2270  00001294  C0FC000A               	mulu	#10,d0
 2271  00001298  D041                   	add.w	d1,d0
 2272  0000129A  7200                   	moveq	#0,d1
 2273  0000129C  4E75                   	rts
 2274                                   bcdbad:
 2275  0000129E  72FF                   	moveq	#-1,d1
 2276  000012A0  4E75                   	rts
 2277                                   ;
 2278                                   ;
 2279                                   hex2bcd:
 2280  000012A2  0280000000FF           	andi.l	#$ff,d0
 2281  000012A8  80FC000A               	divu	#10,d0
 2282  000012AC  2200                   	move.l	d0,d1
 2283  000012AE  4841                   	swap	d1
 2284  000012B0  E948                   	lsl.w	#4,d0
 2285  000012B2  8001                   	or.b	d1,d0
 2286  000012B4  4E75                   	rts
 2287                                   ;
 2288                                   ;
 2289                                   ;  rotate vlm logo
 2290                                   ;
 2291                                   fliplogo:
 2292                                   	.if	1
 2293  000012B6  41F90019ADD0           	lea	vlmlogo,a0	;do a temp swap
 2294  000012BC  2648                   	move.l	a0,a3
 2295  000012BE  D6FC0280               	adda.w	#(32*10*2),a3
 2296  000012C2  3E3C009F               	move.w	#(32*5)-1,d7
 2297                                   .fliplp:
 2298  000012C6  3C10                   	move.w	(a0),d6
 2299  000012C8  30E3                   	move.w	-(a3),(a0)+
 2300  000012CA  3686                   	move.w	d6,(a3)
 2301  000012CC  51CFFFF8               	dbra	d7,.fliplp
 2302                                   	.else
 2303                                 - ;
 2304                                 - ;  exchange lite VLM w/ Dark
 2305                                 - ;
 2306                                 - 	lea	vlmlogo,a0
 2307                                 - 	lea	vlmdk(pc),a3
 2308                                 - 	move.w	#(16*10)-1,d7
 2309                                 - .exglp:
 2310                                 - 	move.l	(a0),d6
 2311                                 - 	move.l	(a3),(a0)+
 2312                                 - 	move.l	d6,(a3)+
 2313                                 - 	dbra	d7,.exglp	
 2314                                 - ;
 2315                                 - 	.endif
 2316  000012D0  4E75                   	rts
 2317                                   ;
 2318                                   ;
 2319                                   ;  Blit up the Front panel on a cleen screen
 2320                                   ;
 2321                                   frontup:
 2322  000012D2  41F900F02200           	lea	A1_BASE,a0
 2323  000012D8  47F9xxxxxxxx           	lea	onepage3,a3
 2324                                   .bwait:


                                        src/cdfront.s        Page 43      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2325  000012DE  20280038               	move.l	B_CMD-A1_BASE(a0),d0	;wait til blitter free
 2326  000012E2  E248                   	lsr.w	#1,d0
 2327  000012E4  64F8                   	bcc	.bwait
 2328                                   ;
 2329  000012E6  7000                   	moveq	#0,d0
 2330  000012E8  3013                   	move.w	(a3),d0
 2331  000012EA  D08B                   	add.l	a3,d0
 2332  000012EC  21400024               	move.l	d0,A2_BASE-A1_BASE(a0)	;set SRC base
 2333  000012F0  20BC00004000           	move.l	#frntbase,(a0)		;set DST base
 2334                                   ;
 2335  000012F6  217C000140180028       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A2_FLAGS-A1_BASE(a0)	;src
 2336  000012FE  217C000140180004       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A1_FLAGS-A1_BASE(a0)	;dst
 2337                                   ;
 2338  00001306  7000                   	moveq	#0,d0
 2339  00001308  21400030               	move.l	d0,A2_PIXEL-A1_BASE(a0)	;src = (0,0)
 2340  0000130C  2140000C               	move.l	d0,A1_PIXEL-A1_BASE(a0)	;dst
 2341                                   ;
 2342  00001310  217C00300100003C       	move.l	#(48*$10000)+256,B_COUNT-A1_BASE(a0)	;w:256, h:48
 2343  00001318  203C0001FF00           	move.l	#(2*$10000)-256,d0
 2344  0000131E  21400010               	move.l	d0,A1_STEP-A1_BASE(a0)
 2345  00001322  21400034               	move.l	d0,A2_STEP-A1_BASE(a0)
 2346  00001326  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 2347                                   ;
 2348                                   ;  Now blit up the bottom sub panel ("C" "Left" "B" "Right" "Pause")
 2349                                   ;
 2350           =000000AC               subtbwid	equ	172
 2351                                   ;
 2352  0000132E  4BFAxxxx               	lea	tabuild(pc),a5
 2353  00001332  7202                   	moveq	#2,d1
 2354                                   tablop:
 2355                                   .bwait:
 2356  00001334  20280038               	move.l	B_CMD-A1_BASE(a0),d0	;wait til blitter free
 2357  00001338  E248                   	lsr.w	#1,d0
 2358  0000133A  64F8                   	bcc	.bwait
 2359                                   ;
 2360  0000133C  7000                   	moveq	#0,d0
 2361  0000133E  301D                   	move.w	(a5)+,d0		;get src Y
 2362  00001340  4840                   	swap	d0
 2363  00001342  21400030               	move.l	d0,A2_PIXEL-A1_BASE(a0)	;src = (0,0)
 2364                                   
 2365  00001346  7000                   	moveq	#0,d0
 2366  00001348  301D                   	move.w	(a5)+,d0		;get dst Y
 2367  0000134A  4840                   	swap	d0
 2368  0000134C  2140000C               	move.l	d0,A1_PIXEL-A1_BASE(a0)	;dst
 2369                                   ;
 2370  00001350  301D                   	move.w	(a5)+,d0		;get height
 2371  00001352  4840                   	swap	d0
 2372  00001354  303C00AC               	move.w	#subtbwid,d0
 2373  00001358  2140003C               	move.l	d0,B_COUNT-A1_BASE(a0)	;w:256, h:48
 2374  0000135C  203C0001FF54           	move.l	#(2*$10000)-subtbwid,d0
 2375  00001362  21400010               	move.l	d0,A1_STEP-A1_BASE(a0)
 2376  00001366  21400034               	move.l	d0,A2_STEP-A1_BASE(a0)
 2377  0000136A  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 2378                                   ;
 2379  00001372  51C9FFC0               	dbra	d1,tablop
 2380  00001376  60xx                   	bra.s	ovtbtab


                                        src/cdfront.s        Page 44      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2381                                   ;
 2382                                   tabuild:
 2383  00001378  0001                   	dc.w	1		;src Y
 2384  0000137A  002F                   	dc.w	47		;dst Y
 2385  0000137C  000D                   	dc.w	13		;height
 2386                                   ;
 2387  0000137E  0002                   	dc.w	2		;src Y
 2388  00001380  003C                   	dc.w	60		;dst Y
 2389  00001382  0001                   	dc.w	1		;height
 2390                                   ;
 2391  00001384  002E                   	dc.w	46		;src Y
 2392  00001386  003D                   	dc.w	61		;dst Y
 2393  00001388  0002                   	dc.w	2		;height
 2394                                   ;
 2395                                   ;
 2396                                   ovtbtab:
 2397                                   ;
 2398                                   ;   Now, stuff the buttons
 2399                                   ;
 2400  0000138A  4BFAxxxx               	lea	butbuild(pc),a5
 2401  0000138E  7203                   	moveq	#3,d1
 2402                                   butlop:
 2403                                   .bwait:
 2404  00001390  20280038               	move.l	B_CMD-A1_BASE(a0),d0	;wait til blitter free
 2405  00001394  E248                   	lsr.w	#1,d0
 2406  00001396  64F8                   	bcc	.bwait
 2407                                   ;
 2408  00001398  201D                   	move.l	(a5)+,d0		;get src Y,X
 2409  0000139A  21400030               	move.l	d0,A2_PIXEL-A1_BASE(a0)	;src = (0,0)
 2410                                   
 2411  0000139E  303C0033               	move.w	#51,d0			;Ypos = constant
 2412  000013A2  4840                   	swap	d0
 2413  000013A4  301D                   	move.w	(a5)+,d0		;get dst X
 2414  000013A6  2140000C               	move.l	d0,A1_PIXEL-A1_BASE(a0)	;dst
 2415                                   ;
 2416  000013AA  7008                   	moveq	#8,d0			;height is constant
 2417  000013AC  4840                   	swap	d0
 2418  000013AE  301D                   	move.w	(a5)+,d0		;get width
 2419  000013B0  2140003C               	move.l	d0,B_COUNT-A1_BASE(a0)	;w:xx, h:8
 2420  000013B4  48C0                   	ext.l	d0
 2421  000013B6  90BC00020000           	sub.l	#(2*$10000),d0
 2422  000013BC  4480                   	neg.l	d0
 2423  000013BE  21400010               	move.l	d0,A1_STEP-A1_BASE(a0)
 2424  000013C2  21400034               	move.l	d0,A2_STEP-A1_BASE(a0)
 2425  000013C6  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 2426                                   ;
 2427  000013CE  51C9FFC0               	dbra	d1,butlop
 2428  000013D2  60xx                   	bra.s	ovbttab
 2429                                   ;
 2430                                   butbuild:
 2431  000013D4  00640000               	dc.l	(100*$10000)+0	;src Y, X	C
 2432  000013D8  0004                   	dc.w	4		;dst X
 2433  000013DA  001C                   	dc.w	28		;width
 2434                                   ;	
 2435  000013DC  003100DA               	dc.l	(49*$10000)+218	;src Y, X	Left
 2436  000013E0  0022                   	dc.w	34		;dst X


                                        src/cdfront.s        Page 45      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2437  000013E2  0024                   	dc.w	36		;width
 2438                                   ;	
 2439  000013E4  0064001C               	dc.l	(100*$10000)+28	;src Y, X	B
 2440  000013E8  0048                   	dc.w	72		;dst X
 2441  000013EA  001C                   	dc.w	28		;width
 2442                                   ;	
 2443  000013EC  003A00DA               	dc.l	(58*$10000)+218	;src Y, X	Right
 2444  000013F0  0065                   	dc.w	101		;dst X
 2445  000013F2  0026                   	dc.w	38		;width
 2446                                   ;	
 2447                                   ;
 2448                                   ;
 2449                                   ovbttab:
 2450                                   ;
 2451                                   ;
 2452  000013F4  4A79xxxxxxxx           	tst.w	play
 2453  000013FA  67xx                   	beq.s	notdep
 2454                                   ;
 2455  000013FC  7002                   	moveq	#2,d0
 2456  000013FE  7201                   	moveq	#1,d1
 2457  00001400  6100xxxx               	bsr	depressd		;play button depressed
 2458                                   notdep:
 2459  00001404  4A79xxxxxxxx           	tst.w	pause
 2460  0000140A  67xx                   	beq.s	notpaws
 2461                                   ;
 2462  0000140C  7004                   	moveq	#4,d0
 2463  0000140E  7201                   	moveq	#1,d1
 2464  00001410  6100xxxx               	bsr	depressd		;pause button depressed
 2465                                   notpaws:
 2466  00001414  47F9xxxxxxxx           	lea	onepage3+10,a3
 2467  0000141A  4A79xxxxxxxx           	tst.w	cdgmode		;are we in RGB?
 2468  00001420  67xx                   	beq.s	notrgb		;br if not
 2469  00001422  47F9xxxxxxxx           	lea	rgbpal,a3
 2470                                   notrgb:
 2471  00001428  2A4B                   	move.l	a3,a5
 2472  0000142A  41F900F00400           	lea	CLUT,a0
 2473  00001430  303C0014               	move.w	#20,d0
 2474                                   paller:
 2475  00001434  30DB                   	move.w	(a3)+,(a0)+	;stuff 1st 128 palette entries
 2476  00001436  51C8FFFC               	dbra	d0,paller
 2477                                   ;
 2478  0000143A  264D                   	move.l	a5,a3
 2479  0000143C  41F900F00400           	lea	CLUT,a0
 2480  00001442  303C0014               	move.w	#20,d0
 2481                                   pallerx:
 2482  00001446  321B                   	move.w	(a3)+,d1
 2483  00001448  B250                   	cmp.w	(a0),d1
 2484  0000144A  67xx                   	beq.s	gopall
 2485  0000144C  30C1                   	move.w	d1,(a0)+
 2486  0000144E  51C8FFF6               	dbra	d0,pallerx
 2487  00001452  4E75                   	rts
 2488                                   gopall:
 2489  00001454  5488                   	addq.l	#2,a0
 2490  00001456  51C8FFEE               	dbra	d0,pallerx
 2491                                   ;
 2492                                   ;


                                        src/cdfront.s        Page 46      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2493  0000145A  4E75                   	rts
 2494                                   ;
 2495                                   ;
 2496                                   ;
 2497                                   ;=================================================
 2498                                   ;
 2499                                   ;
 2500                                   ;
 2501                                   ;   this routine will translate the joypad for mode 3
 2502                                   ;
 2503                                   m3trans:
 2504  0000145C  2239001AE00C           	move.l	pad_now,d1
 2505                                   ;
 2506                                   ;**added 17-Jan-95
 2507  00001462  7003                   	moveq	#3,d0
 2508  00001464  B079001AE02A           	cmp.w	vlm_mode,d0	;check on this idiot edit mode
 2509  0000146A  66xx                   	bne.s	vlmnoe
 2510                                   ;		   3         2         1         0
 2511                                   ;		  10987654321098765432109876543210
 2512                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 2513  0000146C  028110000000           	andi.l	#%00010000000000000000000000000000,d1	;only allow pause
 2514  00001472  6000xxxx               	bra	m3tx
 2515                                   vlmnoe:
 2516                                   ;***end addition
 2517                                   ;
 2518  00001476  2039xxxxxxxx           	move.l	m3prev,d0
 2519  0000147C  2401                   	move.l	d1,d2
 2520  0000147E  B182                   	eor.l	d0,d2			;any changes in m3 buttons?
 2521                                   ;
 2522                                   ; arbitrate multiple RLDU edges here (we're better off doing only 1 at a time)
 2523  00001480  2602                   	move.l	d2,d3
 2524  00001482  4843                   	swap	d3
 2525  00001484  024300F0               	andi.w	#%11110000,d3		;edges here
 2526  00001488  2801                   	move.l	d1,d4
 2527  0000148A  4844                   	swap	d4
 2528  0000148C  E84C                   	lsr.w	#4,d4
 2529  0000148E  0244000F               	andi.w	#%00001111,d4		;current
 2530  00001492  8644                   	or.w	d4,d3
 2531  00001494  7800                   	moveq	#0,d4
 2532  00001496  183B30xx               	move.b	arbtab(pc,d3.w),d4
 2533  0000149A  6700xxxx               	beq	samRLDU
 2534                                   ;
 2535                                   ;		    3         2         1         0
 2536                                   ;		   10987654321098765432109876543210
 2537                                   ;		   xxAPxxBxRLDU147*xxCxxxOx2580369#
 2538  0000149E  0281FF0FFFFF           	andi.l	#~%00000000111100000000000000000000,d1	;clear any RLDU
 2539  000014A4  E94C                   	lsl.w	#4,d4			;align to RLDU
 2540  000014A6  4844                   	swap	d4
 2541  000014A8  8284                   	or.l	d4,d1			;put in our custom RLDU
 2542  000014AA  2401                   	move.l	d1,d2
 2543  000014AC  B182                   	eor.l	d0,d2
 2544  000014AE  6000xxxx               	bra	samRLDU
 2545                                   ;          U   D       L               R
 2546                                   arbtab:
 2547  000014B2  00000000000000000000    dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;no edges
       000014BC  000000000000           


                                        src/cdfront.s        Page 47      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2548  000014C2  00000000000000000000    dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;U
       000014CC  000000000000           
 2549  000014D2  00000000000000000000    dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;D
       000014DC  000000000000           
 2550  000014E2  80808080848484848888    dc.b $80,$80,$80,$80,$84,$84,$84,$84,$88,$88,$88,$88,$8c,$8c,$8c,$8c ;D&U
       000014EC  88888C8C8C8C           
 2551  000014F2  00000000000000000000    dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;L
       000014FC  000000000000           
 2552  00001502  80808282808082828888    dc.b $80,$80,$82,$82,$80,$80,$82,$82,$88,$88,$8a,$8a,$88,$88,$88,$88 ;L&U
       0000150C  8A8A88888888           
 2553  00001512  80818081808180818889    dc.b $80,$81,$80,$81,$80,$81,$80,$81,$88,$89,$88,$89,$88,$89,$88,$89 ;L&D
       0000151C  888988898889           
 2554  00001522  80808080808080808888    dc.b $80,$80,$80,$80,$80,$80,$80,$80,$88,$88,$88,$88,$88,$88,$88,$88 ;L&D&U
       0000152C  888888888888           
 2555  00001532  00000000000000000000    dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;R
       0000153C  000000000000           
 2556  00001542  80808282848486868080    dc.b $80,$80,$82,$82,$84,$84,$86,$86,$80,$80,$82,$82,$84,$84,$86,$86 ;R&U
       0000154C  828284848686           
 2557  00001552  80818081848584858081    dc.b $80,$81,$80,$81,$84,$85,$84,$85,$80,$81,$80,$81,$84,$85,$84,$85 ;R&D
       0000155C  808184858485           
 2558  00001562  80808080848484848080    dc.b $80,$80,$80,$80,$84,$84,$84,$84,$80,$80,$80,$80,$84,$84,$84,$84 ;R&D&U
       0000156C  808084848484           
 2559  00001572  80818283808182838081    dc.b $80,$81,$82,$83,$80,$81,$82,$83,$80,$81,$82,$83,$80,$81,$82,$83 ;R&L
       0000157C  828380818283           
 2560  00001582  80808282808082828080    dc.b $80,$80,$82,$82,$80,$80,$82,$82,$80,$80,$82,$82,$80,$80,$82,$82 ;R&L&U
       0000158C  828280808282           
 2561  00001592  80818081808180818081    dc.b $80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81,$80,$81 ;R&L&D
       0000159C  808180818081           
 2562  000015A2  80808080808080808080    dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80 ;R&L&D&U
       000015AC  808080808080           
 2563                                   
 2564                                   samRLDU:
 2565  000015B2  23C1xxxxxxxx           	move.l	d1,m3prev
 2566                                   
 2567  000015B8  2602                   	move.l	d2,d3
 2568  000015BA  C681                   	and.l	d1,d3			;positive edges in d3
 2569                                   ;
 2570  000015BC  3839xxxxxxxx           	move.w	keytime,d4		;is a key pending?
 2571  000015C2  67xx                   	beq.s	keychk0
 2572  000015C4  B879001AE4D2           	cmp.w	frames,d4
 2573  000015CA  6Cxx                   	bge.s	keychk0
 2574  000015CC  4279xxxxxxxx           	clr.w	keytime
 2575  000015D2  7AFF                   	moveq	#-1,d5
 2576  000015D4  3839xxxxxxxx           	move.w	distrack,d4
 2577  000015DA  6600xxxx               	bne	seeker
 2578  000015DE  4A79xxxxxxxx           	tst.w	progenty		;were we in program entry mode?
 2579  000015E4  6600xxxx               	bne	wedele			;br if so
 2580                                   ;******test
 2581  000015E8  137C00FF0001           	move.b	#-1,1(a1)		;set track for auto update
 2582                                   ;****end test
 2583                                   keychk0:
 2584  000015EE  2803                   	move.l	d3,d4			;check for numeric key entires
 2585                                   
 2586                                   ;		   3         2         1         0
 2587                                   ;		  10987654321098765432109876543210
 2588                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#


                                        src/cdfront.s        Page 48      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2589  000015F0  0284000E00FF           	andi.l	#%00000000000011100000000011111111,d4	;check numeric
 2590  000015F6  67xx                   	beq.s	ignkey
 2591                                   ;
 2592                                   ;  positive edge on numeric key
 2593  000015F8  08010010               	btst.l	#16,d1			;is it one of Jeff's (*)?
 2594  000015FC  6700xxxx               	beq	savekey			;br if not
 2595                                   ;
 2596                                   ;
 2597                                   ignkey:
 2598  00001600  08030010               	btst.l	#16,d3			;leading edge on *?
 2599  00001604  67xx                   	beq.s	ignkeyx			;br if not
 2600  00001606  3839xxxxxxxx           	move.w	cdgmode,d4		;are we in cd+g?
 2601  0000160C  67xx                   	beq.s	ignkeyx			;br if not
 2602                                   ;
 2603                                   ;  In cd+g mode and a # key was pressed...cycle cd+g channels
 2604                                   ;
 2605  0000160E  3A39xxxxxxxx           	move.w	TvChnlAv,d5	;check avail channels on cd+g
 2606  00001614  00450002               	ori.w	#2,d5		;always force ch1
 2607                                   cdglp:
 2608  00001618  5244                   	addq.w	#1,d4		;cdgmode
 2609                                   cdglp0:
 2610  0000161A  0905                   	btst.l	d4,d5		;are we avail?
 2611  0000161C  66xx                   	bne.s	cdgavail	;br if so
 2612  0000161E  0C44000F               	cmpi.w	#15,d4
 2613  00001622  65F4                   	bcs	cdglp
 2614  00001624  7800                   	moveq	#0,d4
 2615  00001626  60F0                   	bra	cdglp
 2616                                   cdgavail:
 2617  00001628  33C4xxxxxxxx           	move.w	d4,cdgmode
 2618  0000162E  13C4xxxxxxxx           	move.b	d4,TvChnlNo	
 2619  00001634  5044                   	addq	#8,d4
 2620  00001636  3004                   	move.w	d4,d0
 2621  00001638  7200                   	moveq	#0,d1
 2622  0000163A  7803                   	moveq	#3,d4		;check for front panel
 2623  0000163C  B879xxxxxxxx           	cmp.w	our_mode,d4
 2624  00001642  66xx                   	bne.s	.cdgav
 2625  00001644  6100xxxx               	bsr	radiob
 2626                                   .cdgav:
 2627  00001648  6100xxxx               	bsr	bankout
 2628  0000164C  7200                   	moveq	#0,d1
 2629  0000164E  6000xxxx               	bra	m3tx	
 2630                                   ;	
 2631                                   ;
 2632                                   ignkeyx:	
 2633  00001652  7803                   	moveq	#3,d4			;check for mode3 ("User in-your-face")
 2634  00001654  B879xxxxxxxx           	cmp.w	our_mode,d4
 2635  0000165A  6700xxxx               	beq	dom3		;br if mode 3, we need fancy translation
 2636                                   ;
 2637                                   ;  Not mode3, so just pass joystick thru (except if in vlm_mode)
 2638                                   ;
 2639  0000165E  4A79xxxxxxxx           	tst.w	cdgmode		;ignore vlm mode stuff if in cd+g
 2640  00001664  66xx                   	bne.s	m3tx
 2641                                   ;
 2642  00001666  4A79001AE02A           	tst.w	vlm_mode	;0=audio mode, 1=vlm mode, 3=vlm edit mode
 2643  0000166C  67xx                   	beq.s	m3tx		;br if audio mode
 2644                                   m3txx:


                                        src/cdfront.s        Page 49      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2645                                   ;
 2646                                   ;  else, we're in vlm mode--we must ignore B & UDLR
 2647                                   ;
 2648                                   ;	
 2649                                   ;		    3         2         1         0
 2650                                   ;		   10987654321098765432109876543210
 2651                                   ;		   xxAPxxBxRLDU147*xxCxxxOx2580369#
 2652                                   ;	andi.l	#~%00000010111100000000000000000000,d1	;cancel B & UDLR
 2653  0000166E  0281FD0FDFFF           	andi.l	#~%00000010111100000010000000000000,d1	;cancel B, C & UDLR
 2654                                   m3tx:
 2655  00001674  42B9xxxxxxxx           	clr.l	dave_pad
 2656                                   notm3:
 2657  0000167A  83B9xxxxxxxx           	or.l	d1,dave_pad
 2658  00001680  4E75                   	rts
 2659                                   ;
 2660                                   ;
 2661                                   ;  Numeric keypad check
 2662                                   ;
 2663                                   savekey:
 2664                                   ;  got a positive edge on a numeric key (or #)
 2665                                   ;
 2666  00001682  7A07                   	moveq	#7,d5
 2667                                   keylp:
 2668  00001684  E24C                   	lsr.w	#1,d4
 2669  00001686  65xx                   	bcs.s	keygot
 2670  00001688  51CDFFFA               	dbra	d5,keylp
 2671  0000168C  4844                   	swap	d4
 2672  0000168E  E24C                   	lsr.w	#1,d4
 2673                                   ;
 2674  00001690  7A02                   	moveq	#2,d5
 2675                                   keylp1:
 2676  00001692  E24C                   	lsr.w	#1,d4
 2677  00001694  65xx                   	bcs.s	keygot1
 2678  00001696  51CDFFFA               	dbra	d5,keylp1
 2679  0000169A  6000FF64               	bra	ignkey
 2680                                   ;
 2681                                   ;
 2682                                   keytab:
 2683  0000169E  02050800030609FF       	dc.b	2,5,8,0,3,6,9,-1
 2684  000016A6  01040700               	dc.b	1,4,7,0
 2685                                   ;
 2686                                   ;
 2687                                   keygot1:
 2688  000016AA  5045                   	addq	#8,d5
 2689                                   keygot:
 2690  000016AC  1A3B50F0               	move.b	keytab(pc,d5),d5
 2691  000016B0  3839xxxxxxxx           	move.w	keytime,d4		;get frame count when last key came in
 2692  000016B6  6600xxxx               	bne	secnkey
 2693  000016BA  4A05                   	tst.b	d5			;are we terminator without a key?
 2694  000016BC  6B00FF42               	bmi	ignkey			;br if so
 2695  000016C0  33C5xxxxxxxx           	move.w	d5,distrack		;display track during key entry
 2696  000016C6  3039001AE4D2           	move.w	frames,d0
 2697  000016CC  D07C0078               	add.w	#120,d0			;2 seconds til forced update
 2698  000016D0  66xx                   	bne.s	.not0
 2699  000016D2  5240                   	addq.w	#1,d0
 2700                                   .not0:


                                        src/cdfront.s        Page 50      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2701  000016D4  33C0xxxxxxxx           	move.w	d0,keytime
 2702                                   ;
 2703                                   ;  display track in d5
 2704                                   ;
 2705  000016DA  4A79xxxxxxxx           	tst.w	progenty		;are we in program entry mode?
 2706  000016E0  6700xxxx               	beq	.stand			;br if not
 2707                                   ;
 2708                                   ;  Program entry mode..  open up a place in the sequence
 2709                                   ;
 2710                                   ;	add.w	#1,gridsize	;# of tracks for trk grid purposes
 2711                                   ;
 2712  000016E4  3039xxxxxxxx           	move.w	gridsize,d0	;need a limit on this
 2713  000016EA  5240                   	addq.w	#1,d0
 2714  000016EC  0C4000BF               	cmpi.w	#191,d0		;no more than "x" tracks allowed
 2715  000016F0  6500xxxx               	bcs	.advtrk
 2716  000016F4  4279xxxxxxxx           	clr.w	keytime
 2717  000016FA  60xx                   	bra.s	.noarad
 2718                                   .advtrk:
 2719  000016FC  33C0xxxxxxxx           	move.w	d0,gridsize
 2720                                   ;
 2721                                   ;
 2722  00001702  3039xxxxxxxx           	move.w	m3row,d0
 2723  00001708  5740                   	subq.w	#3,d0
 2724  0000170A  C0FC000A               	mulu	#10,d0
 2725  0000170E  D079xxxxxxxx           	add.w	m3col,d0
 2726  00001714  D079xxxxxxxx           	add.w	gridoff,d0	;d0 = offset into trkseq for new entry
 2727  0000171A  4BF9xxxxxxxx           	lea	trkseq,a5
 2728  00001720  DAC0                   	adda.w	d0,a5
 2729  00001722  204D                   	move.l	a5,a0
 2730  00001724  2208                   	move.l	a0,d1		;save target
 2731                                   .endgam:
 2732  00001726  4A18                   	tst.b	(a0)+		;find end
 2733  00001728  66FC                   	bne	.endgam
 2734                                   ;
 2735  0000172A  4BE80001               	lea	1(a0),a5
 2736                                   .openho:
 2737  0000172E  1B20                   	move.b	-(a0),-(a5)	;expand trkseq to open up a hole
 2738  00001730  B288                   	cmp.l	a0,d1
 2739  00001732  65FA                   	bcs	.openho
 2740                                   ;
 2741  00001734  3039xxxxxxxx           	move.w	distrack,d0	;get current entry
 2742  0000173A  66xx                   	bne.s	.singe
 2743  0000173C  70FF                   	moveq	#-1,d0		;set special tag for gridigit
 2744                                   .singe:
 2745  0000173E  1080                   	move.b	d0,(a0)
 2746  00001740  23C8xxxxxxxx           	move.l	a0,holeptr	;save our ptr
 2747                                   ;
 2748  00001746  1800                   	move.b	d0,d4		;29-Mar-95
 2749  00001748  6100xxxx               	bsr	listinst
 2750                                   ;	bsr	uprantrk	;display the new tracks
 2751                                   ;
 2752  0000174C  33FCFFFFxxxxxxxx       	move.w	#-1,blinkon
 2753  00001754  6100xxxx               	bsr	ringit		;restore select box
 2754                                   ;
 2755  00001758  3039xxxxxxxx           	move.w	gridsize,d0
 2756  0000175E  9079xxxxxxxx           	sub.w	gridoff,d0


                                        src/cdfront.s        Page 51      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2757  00001764  0C400015               	cmpi.w	#21,d0
 2758  00001768  65xx                   	bcs.s	.noarad
 2759                                   ;
 2760  0000176A  6100xxxx               	bsr	plantard	;turn on down arrows
 2761                                   .noarad:
 2762  0000176E  7200                   	moveq	#0,d1			
 2763  00001770  6000FF02               	bra	m3tx
 2764                                   ;
 2765                                   ;
 2766                                   ;  Not in Program entry mode--display digit in standard trk window
 2767                                   ;
 2768                                   .stand:
 2769  00001774  3005                   	move.w	d5,d0
 2770                                   ;
 2771  00001776  3A39xxxxxxxx           	move.w	our_mode,d5
 2772  0000177C  0C450003               	cmpi.w	#3,d5		;on mode3 screen
 2773  00001780  67xx                   	beq.s	.novlmst	;br if so
 2774                                   ;	
 2775  00001782  4A79001AE02A           	tst.w	vlm_mode	;are we in Jeff mode?
 2776  00001788  67xx                   	beq.s	.novlmst	;br if not
 2777                                   ;
 2778                                   ;  in VLM mode on non mode3 screen
 2779                                   ;
 2780  0000178A  4A40                   	tst.w	d0		;don't allow effect 0
 2781  0000178C  67xx                   	beq.s	.yevlmst
 2782  0000178E  33C0xxxxxxxx           	move.w	d0,diseff	;set effect
 2783  00001794  6100xxxx               	bsr	bankout
 2784  00001798  60xx                   	bra.s	.yevlmst
 2785                                   ;
 2786                                   .novlmst:
 2787  0000179A  7201                   	moveq	#1,d1
 2788  0000179C  6100xxxx               	bsr	printout
 2789                                   .yevlmst:
 2790  000017A0  7200                   	moveq	#0,d1			
 2791  000017A2  6000FED0               	bra	m3tx
 2792                                   ;
 2793                                   secnkey:
 2794  000017A6  3839xxxxxxxx           	move.w	distrack,d4
 2795  000017AC  4A05                   	tst.b	d5			;are we a terminator with 1 key?
 2796  000017AE  6Bxx                   	bmi.s	seeker
 2797  000017B0  C8FC000A               	mulu	#10,d4
 2798  000017B4  D845                   	add.w	d5,d4
 2799                                   seeker:
 2800  000017B6  4279xxxxxxxx           	clr.w	keytime
 2801                                   ;
 2802                                   ;  d4 has completed hex track #
 2803                                   ;
 2804  000017BC  4A79xxxxxxxx           	tst.w	progenty		;are we in program entry mode?
 2805  000017C2  6700xxxx               	beq	.doseeky		;br if not
 2806                                   ;
 2807  000017C6  4A44                   	tst.w	d4
 2808  000017C8  6700xxxx               	beq	wedele		;user wants trk 00, deny him
 2809                                   ;
 2810  000017CC  3039xxxxxxxx           	move.w	maxmin,d0
 2811  000017D2  024000FF               	andi.w	#$ff,d0
 2812  000017D6  B044                   	cmp.w	d4,d0		;does track exist?


                                        src/cdfront.s        Page 52      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2813  000017D8  6500xxxx               	bcs	wedele		;br if not
 2814                                   ;
 2815  000017DC  2079xxxxxxxx           	move.l	holeptr,a0
 2816  000017E2  1084                   	move.b	d4,(a0)		;install final track in trkseq
 2817                                   ;
 2818  000017E4  2008                   	move.l	a0,d0
 2819  000017E6  90BCxxxxxxxx           	sub.l	#trkseq,d0
 2820                                   ;
 2821  000017EC  3239xxxxxxxx           	move.w	trksptr,d1	;check for current not on list
 2822  000017F2  6Axx                   	bpl.s	.onlist
 2823                                   ;
 2824  000017F4  B879xxxxxxxx           	cmp.w	track,d4
 2825  000017FA  66xx                   	bne.s	.noinc
 2826                                   ;
 2827  000017FC  33C0xxxxxxxx           	move.w	d0,trksptr
 2828                                   ;	bra.s	.noinc
 2829                                   ;
 2830                                   .onlist:
 2831                                   .noinc:
 2832  00001802  6100xxxx               	bsr	uprantrk	;display the new tracks
 2833                                   ;
 2834                                   ;	bsr	listinst
 2835                                   ;
 2836  00001806  4279xxxxxxxx           	clr.w	blinkon
 2837  0000180C  6100xxxx               	bsr	ringit			;turn off current selector box
 2838                                   ;
 2839  00001810  3039xxxxxxxx           	move.w	m3col,d0		;move select box to right
 2840  00001816  D07C0001               	add.w	#1,d0
 2841  0000181A  0C40000A               	cmpi.w	#10,d0
 2842  0000181E  65xx                   	bcs.s	.gotrite
 2843                                   ;
 2844  00001820  3039xxxxxxxx           	move.w	m3row,d0
 2845  00001826  D07C0001               	add.w	#1,d0
 2846  0000182A  0C400004               	cmpi.w	#4,d0			;move down row if you have to
 2847  0000182E  67xx                   	beq.s	.gotdown
 2848  00001830  0679000Axxxxxxxx       	add.w	#10,gridoff
 2849                                   ;
 2850  00001838  6100xxxx               	bsr	uprantrk	;display the new tracks
 2851                                   ;
 2852  0000183C  6100xxxx               	bsr	plantaru		;add up arrows		
 2853  00001840  3439xxxxxxxx           	move.w	gridsize,d2
 2854  00001846  9479xxxxxxxx           	sub.w	gridoff,d2
 2855  0000184C  0C420015               	cmpi.w	#21,d2
 2856  00001850  64xx                   	bcc.s	.notdof
 2857  00001852  6100xxxx               	bsr	planoffd	;turn off down arrows
 2858                                   .notdof:
 2859  00001856  303C0004               	move.w	#4,d0
 2860                                   .gotdown:
 2861  0000185A  33C0xxxxxxxx           	move.w	d0,m3row
 2862  00001860  303C0000               	move.w	#0,d0
 2863                                   .gotrite:
 2864  00001864  33C0xxxxxxxx           	move.w	d0,m3col
 2865                                   ;
 2866  0000186A  33FCFFFFxxxxxxxx       	move.w	#-1,blinkon
 2867  00001872  6100xxxx               	bsr	ringit		;restore select box
 2868                                   ;


                                        src/cdfront.s        Page 53      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2869  00001876  7200                   	moveq	#0,d1
 2870  00001878  6000FDFA               	bra	m3tx
 2871                                   ;
 2872                                   ;  d4 has track or bank/effect
 2873                                   ;
 2874                                   .doseeky:
 2875  0000187C  3C39xxxxxxxx           	move.w	our_mode,d6
 2876  00001882  0C460003               	cmpi.w	#3,d6		;on mode3 screen
 2877  00001886  6700xxxx               	beq	.unJeff		;br if so
 2878                                   ;	
 2879  0000188A  4A79001AE02A           	tst.w	vlm_mode	;are we in Jeff mode?
 2880  00001890  6700xxxx               	beq	.unJeff		;br if not
 2881                                   ;
 2882                                   ;  in VLM mode on non mode3 screen--d4 is bank/effect to use
 2883                                   ;
 2884                                   ;	move.w	imatrix,d6
 2885                                   ;	addq.w	#1,d6		;assume 1 character
 2886                                   ;
 2887  00001894  4A05                   	tst.b	d5		;negative if only 1 char
 2888  00001896  6Axx                   	bpl.s	.twochar	;br if 2 chars entered
 2889                                   ;
 2890                                   ;  Only 1 char entered--can only be effect
 2891                                   ;
 2892  00001898  4A44                   	tst.w	d4
 2893  0000189A  67xx                   	beq.s	.dobout		;if effect 0, just ignore
 2894                                   ;
 2895                                   ;  just change effect
 2896                                   ;
 2897                                   .onechar:
 2898  0000189C  B879001AF05E           	cmp.w	skid,d4
 2899  000018A2  67xx                   	beq.s	.dobout
 2900                                   ;
 2901  000018A4  33C4001AF05E           	move.w	d4,skid
 2902  000018AA  23FC00195076001AE524   	move.l	#skidoo,action	;jeffs recommendation for just effect change
 2903  000018B4  60xx                   	bra.s	.waiteff
 2904                                   ;
 2905                                   ;  2 chars entered for bank/effect change
 2906                                   ;	
 2907                                   .twochar:
 2908  000018B6  48C4                   	ext.l	d4
 2909  000018B8  88FC000A               	divu	#10,d4
 2910  000018BC  3C04                   	move.w	d4,d6		;d6.w = bank (+1)
 2911  000018BE  4844                   	swap	d4		;d4.w = effect
 2912                                   .unchar:
 2913  000018C0  4A44                   	tst.w	d4
 2914  000018C2  67xx                   	beq.s	.dobout		;if effect 0, just ignore
 2915  000018C4  5346                   	subq.w	#1,d6
 2916  000018C6  6Bxx                   	bmi.s	.dobout		;if bank 0, just ignore
 2917  000018C8  BC79001AF068           	cmp.w	imatrix,d6	;not a new bank?
 2918  000018CE  67CC                   	beq	.onechar	;br if not new--just do effect
 2919                                   ;
 2920                                   ;  d4 = effect
 2921                                   ;  d6 = bank
 2922                                   ;
 2923  000018D0  33C6001AF068           	move.w	d6,imatrix
 2924  000018D6  33C4001AF05E           	move.w	d4,skid


                                        src/cdfront.s        Page 54      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2925  000018DC  23FC00196814001AE524   	move.l	#gm,action	;switch bank/effect
 2926  000018E6  60xx                   	bra.s	.waiteff	
 2927                                   .dobout:
 2928  000018E8  3C39001AF068           	move.w	imatrix,d6
 2929  000018EE  33C6xxxxxxxx           	move.w	d6,locbank
 2930  000018F4  33C6xxxxxxxx           	move.w	d6,disbank
 2931  000018FA  3C39001AF05E           	move.w	skid,d6
 2932  00001900  33C6xxxxxxxx           	move.w	d6,loceff
 2933  00001906  33C6xxxxxxxx           	move.w	d6,diseff
 2934  0000190C  6100xxxx               	bsr	bankout
 2935                                   .waiteff:
 2936  00001910  7200                   	moveq	#0,d1			
 2937  00001912  6000FD60               	bra	m3tx
 2938                                   ;
 2939                                   ;
 2940                                   .unJeff:
 2941  00001916  4A44                   	tst.w	d4		;are we requesting track 0?
 2942  00001918  66xx                   	bne.s	.unZero
 2943  0000191A  137C00FF0001           	move.b	#-1,1(a1)	;force redisplay of track
 2944  00001920  6000xxxx               	bra	oit
 2945                                   .unZero:
 2946  00001924  3A39xxxxxxxx           	move.w	track,d5	;remember current track
 2947  0000192A  33C4xxxxxxxx           	move.w	d4,track
 2948  00001930  3839xxxxxxxx           	move.w	trksptr,d4
 2949  00001936  6100xxxx               	bsr	trkptrfx
 2950  0000193A  4A02                   	tst.b	d2
 2951  0000193C  6Bxx                   	bmi.s	.notfnd
 2952  0000193E  4A79xxxxxxxx           	tst.w	play			;are we in play mode?
 2953  00001944  66xx                   	bne.s	.doplay
 2954  00001946  3839xxxxxxxx           	move.w	trksptr,d4
 2955  0000194C  60xx                   	bra.s	.jusdis			;just display & continue
 2956                                   ;
 2957                                   .doplay:	
 2958  0000194E  588F                   	addq.l	#4,sp			;adjust for subroutine
 2959  00001950  6000F6A4               	bra	starplay
 2960                                   .notfnd:
 2961  00001954  33C4xxxxxxxx           	move.w	d4,trksptr		;restore previous track ptr
 2962  0000195A  60xx                   	bra.s	.m3txx
 2963                                   .jusdis:
 2964  0000195C  47F9xxxxxxxx           	lea	trkseq,a3
 2965  00001962  1A334000               	move.b	(a3,d4.w),d5
 2966                                   .m3txx:
 2967  00001966  33C5xxxxxxxx           	move.w	d5,track
 2968  0000196C  3005                   	move.w	d5,d0
 2969                                   ;
 2970  0000196E  66xx                   	bne.s	.ninpla			;13-Apr-95 if not in play
 2971  00001970  3039xxxxxxxx           	move.w	maxmin,d0
 2972  00001976  024000FF               	andi.w	#$ff,d0			;end 13-Apr-95 addition	
 2973                                   .ninpla:
 2974                                   ;
 2975  0000197A  6100F926               	bsr	hex2bcd
 2976  0000197E  7201                   	moveq	#1,d1
 2977  00001980  6100xxxx               	bsr	printout
 2978                                   oit:
 2979  00001984  7200                   	moveq	#0,d1
 2980  00001986  6000FCEC               	bra	m3tx


                                        src/cdfront.s        Page 55      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2981                                   ;
 2982                                   ;  We're in mode 3--do it
 2983                                   ;
 2984                                   dom3:
 2985                                   
 2986  0000198A  2001                   	move.l	d1,d0
 2987                                   ;
 2988  0000198C  08030009               	btst.l	#9,d3			;positive edge on option?
 2989  00001990  67xx                   	beq.s	dom3z
 2990                                   ;
 2991  00001992  303C0030               	move.w	#frnthite-15,d0
 2992  00001996  33FCFFFFxxxxxxxx       	move.w	#-1,blinkon		;assume turn on entering select box
 2993  0000199E  4679xxxxxxxx           	not.w	m3opt			;toggle upper/lower mode
 2994  000019A4  66xx                   	bne.s	setlo			;br if lower
 2995                                   ;
 2996                                   ;  else, upper
 2997                                   ;
 2998                                   ;*******test
 2999  000019A6  4A79xxxxxxxx           	tst.w	keytime			;are we in data entry?
 3000  000019AC  67xx                   	beq.s	keynoe			;br if not
 3001  000019AE  4279xxxxxxxx           	clr.w	keytime
 3002  000019B4  4A79xxxxxxxx           	tst.w	distrack
 3003  000019BA  66xx                   	bne.s	keynoe
 3004  000019BC  3F00                   	move.w	d0,-(sp)
 3005  000019BE  6100xxxx               	bsr	wedele
 3006  000019C2  33FCFFFFxxxxxxxx       	move.w	#-1,blinkon		;assume turn on entering select box
 3007  000019CA  301F                   	move.w	(sp)+,d0
 3008                                   keynoe:
 3009                                   ;
 3010                                   ;*******end test
 3011  000019CC  4279xxxxxxxx           	clr.w	progenty		;force no program entry
 3012  000019D2  0640000F               	addi.w	#15,d0
 3013  000019D6  4679xxxxxxxx           	not.w	blinkon			;else, turn on ring
 3014  000019DC  60xx                   	bra.s	doring
 3015                                   setlo:
 3016  000019DE  3A39xxxxxxxx           	move.w	m3row,d5
 3017  000019E4  0C450003               	cmpi.w	#3,d5
 3018  000019E8  65xx                   	bcs.s	doring
 3019                                   ;
 3020  000019EA  4A79xxxxxxxx           	tst.w	seqmode			;are we in program mode?
 3021  000019F0  66xx                   	bne.s	doring
 3022  000019F2  33FCFFFFxxxxxxxx       	move.w	#-1,progenty		;set up program entry mode
 3023                                   doring:
 3024  000019FA  33C0001AE162           	move.w	d0,davesobj+$1a		;set new hieght
 3025                                   ;
 3026  00001A00  6100xxxx               	bsr	ringit
 3027  00001A04  6100xxxx               	bsr	chngdisp
 3028  00001A08  6000xxxx               	bra	bd2clr			;exit
 3029                                   ;
 3030                                   dom3z:
 3031  00001A0C  0803001D               	btst.l	#Abit,d3		;Abit exits mode--let main do it now
 3032  00001A10  67xx                   	beq.s	nom3chg			;br if not exiting mode
 3033                                   ;
 3034                                   ;  Positive edge on fireA--ignore other stuff & exit mode
 3035                                   ;
 3036  00001A12  7200                   	moveq	#0,d1


                                        src/cdfront.s        Page 56      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3037  00001A14  08C1001D               	bset.l	#Abit,d1	;set fireA bit so main code can do dirty work
 3038  00001A18  42B9xxxxxxxx           	clr.l	m3prev		;prev m3 buttons cleaned up
 3039                                   ;
 3040                                   ;	clr.w	m3col		;reset to "play" mode (fireB)
 3041                                   ;	clr.w	m3row		; on row too
 3042                                   ;
 3043  00001A1E  4279xxxxxxxx           	clr.w	progenty	;exit program entry mode (if any)
 3044                                   ;
 3045  00001A24  4279xxxxxxxx           	clr.w	boxleft
 3046  00001A2A  33F9001AE4D2xxxxxxxx   	move.w	frames,voltimr	;turn off volume bar (if on)
 3047  00001A34  6000FC44               	bra	notm3		;exit to change modes
 3048                                   ;
 3049                                   ;
 3050                                   nom3chg:
 3051  00001A38  2800                   	move.l	d0,d4
 3052                                   ;		   3         2         1         0
 3053                                   ;		  10987654321098765432109876543210
 3054                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 3055  00001A3A  028412F02000           	andi.l	#%00010010111100000010000000000000,d4	;PBC,RLUD pass-thru
 3056  00001A40  4A79xxxxxxxx           	tst.w	m3opt
 3057  00001A46  6600xxxx               	bne	dom3zz			;br if on bottom
 3058  00001A4A  23C4xxxxxxxx           	move.l	d4,dave_pad		;else, exit with pass thru
 3059  00001A50  4E75                   	rts
 3060                                   ;
 3061                                   ;
 3062                                   dom3zz:
 3063                                   ;		   3         2         1         0
 3064                                   ;		  10987654321098765432109876543210
 3065                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 3066  00001A52  028010002000           	andi.l	#%00010000000000000010000000000000,d0	;P & C pass-thru
 3067  00001A58  23C0xxxxxxxx           	move.l	d0,dave_pad
 3068                                   ;
 3069                                   dom33z:
 3070                                   ;		   3         2         1         0
 3071                                   ;		  10987654321098765432109876543210
 3072                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 3073  00001A5E  028122F00000           	andi.l	#%00100010111100000000000000000000,d1	;only want these
 3074                                   ;
 3075                                   ;  No mode change requested--check RLDU for any m3sel ("selection") changes
 3076                                   ;
 3077                                   ;	
 3078                                   ;		   3         2         1         0
 3079                                   ;		  10987654321098765432109876543210
 3080                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 3081  00001A64  028300F00000           	andi.l	#%00000000111100000000000000000000,d3	;positive edges?
 3082  00001A6A  6700xxxx               	beq	nom3sel		;br if no joypad maneouverings
 3083                                   ;
 3084                                   ;  joypad maneouvering..
 3085                                   ;
 3086  00001A6E  4A79xxxxxxxx           	tst.w	keytime		;are we awaiting another keypad entry?
 3087  00001A74  67xx                   	beq.s	.nokey		;br if not
 3088  00001A76  4A79xxxxxxxx           	tst.w	progenty	;are we in program mode
 3089  00001A7C  67xx                   	beq.s	.nokey		;br if not
 3090                                   ;
 3091                                   ;  we have to cancel any further key entry..
 3092  00001A7E  4279xxxxxxxx           	clr.w	keytime		;turn off await timer


                                        src/cdfront.s        Page 57      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3093  00001A84  3839xxxxxxxx           	move.w	distrack,d4	;check legit track request
 3094  00001A8A  67xx                   	beq.s	.cankey
 3095                                   ;
 3096  00001A8C  3A39xxxxxxxx           	move.w	maxmin,d5
 3097  00001A92  024500FF               	andi.w	#$ff,d5
 3098  00001A96  BA44                   	cmp.w	d4,d5
 3099  00001A98  65xx                   	bcs.s	.cankey		;cancel previous key entry
 3100                                   ;
 3101                                   ;  legit partial track..  do final install in list
 3102                                   ;	movem.l	d0-d7/a0-a6,-(sp)
 3103                                   ;	bsr	listinst	;29-Mar-95 update display, trksptr
 3104                                   ;	movem.l	(sp)+,d0-d7/a0-a6
 3105                                   ;
 3106                                   ;	move.l	holeptr,a0
 3107                                   ;	move.b	d4,(a0)		;install partial track as final
 3108                                   ;
 3109                                   ;	bsr	uprantrk	;***29-Mar-95
 3110                                   ;
 3111                                   ;	move.w	#-1,blinkon
 3112                                   ;	bsr	ringit		;restore select box
 3113                                   
 3114  00001A9A  60xx                   	bra.s	.nokey
 3115                                   ;
 3116                                   .cankey:
 3117  00001A9C  4CF90010xxxxxxxx       	movem.l	m3col,d4
 3118  00001AA4  48E7F800               	movem.l	d0-d4,-(sp)
 3119  00001AA8  6100xxxx               	bsr	wedele		;delete entry
 3120                                   
 3121  00001AAC  4279xxxxxxxx           	clr.w	blinkon
 3122  00001AB2  6100xxxx               	bsr	ringit		;turn off select box
 3123                                   	
 3124  00001AB6  4CDF001F               	movem.l	(sp)+,d0-d4
 3125  00001ABA  23C4xxxxxxxx           	move.l	d4,m3col	;restore original row/col
 3126                                   	
 3127                                   .nokey:	
 3128  00001AC0  4A79xxxxxxxx           	tst.w	boxleft		;check for box off grid (on volume bar)
 3129  00001AC6  67xx                   	beq.s	nrmbox		;br if not
 3130                                   ;
 3131                                   ;		   3         2         1         0
 3132                                   ;		  10987654321098765432109876543210
 3133                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 3134  00001AC8  028300C00000           	andi.l	#%00000000110000000000000000000000,d3	;edge on L/R?
 3135  00001ACE  66xx                   	bne.s	boxon
 3136                                   ;
 3137                                   volux:
 3138                                   ;		   3         2         1         0
 3139                                   ;		  10987654321098765432109876543210
 3140                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 3141  00001AD0  028100300000           	andi.l	#%00000000001100000000000000000000,d1	;pass thru only up/down
 3142  00001AD6  6000FBA2               	bra	notm3
 3143                                   
 3144                                   boxon:
 3145  00001ADA  3439xxxxxxxx           	move.w	m3row,d2
 3146  00001AE0  66xx                   	bne.s	rowan
 3147  00001AE2  7402                   	moveq	#2,d2
 3148  00001AE4  08030016               	btst.l	#Lbit,d3


                                        src/cdfront.s        Page 58      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3149  00001AE8  66xx                   	bne.s	set3col
 3150  00001AEA  7403                   	moveq	#3,d2
 3151  00001AEC  60xx                   	bra.s	set3col
 3152                                   rowan:
 3153  00001AEE  7402                   	moveq	#2,d2
 3154  00001AF0  08030016               	btst.l	#Lbit,d3
 3155  00001AF4  66xx                   	bne.s	set3col
 3156  00001AF6  7400                   	moveq	#0,d2
 3157                                   set3col:
 3158  00001AF8  33C2xxxxxxxx           	move.w	d2,m3col
 3159  00001AFE  33F9001AE4D2xxxxxxxx   	move.w	frames,voltimr		;turn off volume bar
 3160                                   ;
 3161                                   ;
 3162                                   ;
 3163                                   nrmbox:
 3164  00001B08  74FF                   	moveq	#-1,d2
 3165  00001B0A  08030016               	btst.l	#Lbit,d3	;leading edge on Left? 
 3166  00001B0E  6600xxxx               	bne	chgcol
 3167  00001B12  7401                   	moveq	#1,d2
 3168  00001B14  08030017               	btst.l	#Rbit,d3
 3169  00001B18  6600xxxx               	bne	chgcol
 3170  00001B1C  08030015               	btst.l	#Dbit,d3
 3171  00001B20  66xx                   	bne.s	chgrow
 3172  00001B22  74FF                   	moveq	#-1,d2
 3173  00001B24  08030014               	btst.l	#Ubit,d3
 3174  00001B28  6700xxxx               	beq	nom3sel
 3175                                   ;
 3176                                   ;
 3177                                   ;  0 - Front panel
 3178                                   ;  1 - seq/repeat/cd+g buttons
 3179                                   ;  2 - trk selector box		(only in program mode)
 3180                                   ;  3 - top row, trk grid	(only in prog & random modes)
 3181                                   ;  4 - bottom row, trk grid	(only in prog & random modes)
 3182                                   ;
 3183                                   ;
 3184                                   ;
 3185                                   chgrow:
 3186  00001B2C  D479xxxxxxxx           	add.w	m3row,d2
 3187  00001B32  6700xxxx               	beq	bd2clr		;don't allow access to old row #0
 3188                                   ;	bpl.s	nomwrap
 3189                                   ;	moveq	#0,d2		;can't go above (neg) top row
 3190                                   nomwrap:
 3191  00001B36  0C420002               	cmpi.w	#2,d2		;max +1 row # in normal mode
 3192  00001B3A  6500xxxx               	bcs	nomwrap1	;br if ok within all modes
 3193  00001B3E  3839xxxxxxxx           	move.w	seqmode,d4	;are we in program or random modes?
 3194                                   ;
 3195  00001B44  67xx                   	beq.s	randrow		;br if program mode--always allow grid access
 3196                                   ;
 3197  00001B46  0C440001               	cmpi.w	#1,d4		;normal mode?
 3198  00001B4A  6700xxxx               	beq	bd2clr		;br if so--at limit, can't change rows
 3199                                   ;
 3200                                   ;  must be random mode..(see if overflo allows us scrolling)
 3201                                   ;
 3202  00001B4E  3839xxxxxxxx           	move.w	gridsize,d4
 3203  00001B54  0C440015               	cmpi.w	#21,d4		;more than 20 tracks?
 3204  00001B58  6500xxxx               	bcs	bd2clr		;if not, can't select any grid box


                                        src/cdfront.s        Page 59      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3205                                   ;
 3206                                   ;
 3207                                   ;  Prog/random mode..
 3208                                   ;
 3209                                   randrow:
 3210  00001B5C  0C420005               	cmpi.w	#5,d2		;max on random/prog
 3211  00001B60  65xx                   	bcs.s	.rannwrp	;br if not max on random mode
 3212                                   ;
 3213  00001B62  3839xxxxxxxx           	move.w	gridsize,d4
 3214  00001B68  0C440015               	cmpi.w	#21,d4
 3215  00001B6C  6500xxxx               	bcs	.skipwrp
 3216  00001B70  9879xxxxxxxx           	sub.w	gridoff,d4
 3217  00001B76  0C440015               	cmpi.w	#21,d4
 3218  00001B7A  6500xxxx               	bcs	.skipwrp
 3219                                   ;
 3220                                   ;  Scroll data in track grid down 1 row
 3221                                   ;
 3222  00001B7E  0679000Axxxxxxxx       	addi.w	#10,gridoff
 3223  00001B86  6100xxxx               	bsr	uprantrk
 3224  00001B8A  6100xxxx               	bsr	plantaru	;set up arrows
 3225  00001B8E  3439xxxxxxxx           	move.w	gridsize,d2
 3226  00001B94  9479xxxxxxxx           	sub.w	gridoff,d2
 3227  00001B9A  0C420015               	cmpi.w	#21,d2
 3228  00001B9E  64xx                   	bcc.s	.notdof
 3229  00001BA0  6100xxxx               	bsr	planoffd	;turn off down arrows
 3230                                   .notdof:
 3231  00001BA4  7404                   	moveq	#4,d2		;set max select row position
 3232                                   ;
 3233                                   .rannwrp:
 3234  00001BA6  0C420002               	cmpi.w	#2,d2		;in random mode, did we land on phantom row2?
 3235  00001BAA  66xx                   	bne.s	nomwrap1	;br if not
 3236                                   ;
 3237                                   ;  We have no row2 in random mode--better jump over it
 3238                                   ;
 3239  00001BAC  0802001F               	btst.l	#31,d2		;check neg increment (moving up a row)
 3240  00001BB0  66xx                   	bne.s	.upmove		;br if moving up
 3241                                   ;
 3242                                   ;  we were moving down and landed on phantom row 2
 3243                                   ;
 3244  00001BB2  3439xxxxxxxx           	move.w	seqmode,d2	;are we in program mode?
 3245  00001BB8  66xx                   	bne.s	.notprg		;br if random mode
 3246  00001BBA  33FCFFFFxxxxxxxx       	move.w	#-1,progenty	;set flag for program entry mode
 3247                                   ;
 3248  00001BC2  4279xxxxxxxx           	clr.w	keytime		;29-Mar-95		
 3249  00001BC8  137C00FF0001           	move.b	#-1,1(a1)	;force track update
 3250                                   ;
 3251                                   .notprg:
 3252  00001BCE  343C0003               	move.w	#3,d2		;set for row 3
 3253  00001BD2  6000xxxx               	bra	nomwrap1
 3254                                   .upmove:
 3255                                   ;
 3256                                   ;  we may have to hold here to Scroll track data if gridoff is non-zero
 3257                                   ;
 3258  00001BD6  3839xxxxxxxx           	move.w	gridoff,d4	;get grid offset
 3259  00001BDC  67xx                   	beq.s	.scroff
 3260  00001BDE  0444000A               	subi.w	#10,d4


                                        src/cdfront.s        Page 60      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3261  00001BE2  33C4xxxxxxxx           	move.w	d4,gridoff
 3262  00001BE8  66xx                   	bne.s	.stillgrd
 3263  00001BEA  6100xxxx               	bsr	planoffu	;remove up arrows
 3264                                   .stillgrd:
 3265  00001BEE  3039xxxxxxxx           	move.w	gridsize,d0
 3266  00001BF4  9079xxxxxxxx           	sub.w	gridoff,d0
 3267  00001BFA  0C400015               	cmpi.w	#21,d0
 3268  00001BFE  65xx                   	bcs.s	.noarad
 3269                                   ;
 3270  00001C00  6100xxxx               	bsr	plantard	;turn on down arrows
 3271                                   .noarad:
 3272                                   
 3273                                   ;	bsr	plantard
 3274                                   ;
 3275                                   ;
 3276  00001C04  6100xxxx               	bsr	uprantrk
 3277  00001C08  7403                   	moveq	#3,d2
 3278  00001C0A  60xx                   	bra.s	nomwrap1
 3279                                   .scroff:
 3280  00001C0C  4279xxxxxxxx           	clr.w	progenty	;always clear if moving up
 3281  00001C12  78FF                   	moveq	#-1,d4
 3282                                   .adjop:
 3283  00001C14  D444                   	add.w	d4,d2
 3284  00001C16  60xx                   	bra.s	nomwrap1
 3285                                   .skipwrp:
 3286  00001C18  78FF                   	moveq	#-1,d4
 3287  00001C1A  0802001F               	btst.l	#31,d2
 3288  00001C1E  66xx                   	bne.s	.adjopx
 3289  00001C20  7801                   	moveq	#1,d4
 3290                                   .adjopx:
 3291  00001C22  9444                   	sub.w	d4,d2
 3292                                   nomwrap1:
 3293                                   ;
 3294                                   ;  set column for new row
 3295                                   ;
 3296  00001C24  3802                   	move.w	d2,d4
 3297  00001C26  4842                   	swap	d2
 3298  00001C28  3439xxxxxxxx           	move.w	m3row,d2
 3299  00001C2E  D444                   	add.w	d4,d2
 3300  00001C30  0C420006               	cmpi.w	#6,d2
 3301  00001C34  65xx                   	bcs.s	offgrid	
 3302                                   ;
 3303                                   ;  same col as before if 3<->4
 3304                                   ;
 3305                                   samebf:
 3306  00001C36  3439xxxxxxxx           	move.w	m3col,d2
 3307  00001C3C  4A79xxxxxxxx           	tst.w	progenty	;are we in program entry?
 3308  00001C42  6700xxxx               	beq	nomwrapx	;br if not
 3309                                   ;
 3310                                   ; we may need to prevent landing on a blank..
 3311                                   ;
 3312  00001C46  4842                   	swap	d2
 3313  00001C48  3802                   	move.w	d2,d4		;get proposed row
 3314  00001C4A  4842                   	swap	d2
 3315  00001C4C  5744                   	subq.w	#3,d4		;adjust for top row of grid (+10)
 3316  00001C4E  C8FC000A               	mulu	#10,d4


                                        src/cdfront.s        Page 61      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3317  00001C52  D879xxxxxxxx           	add.w	gridoff,d4
 3318  00001C58  9879xxxxxxxx           	sub.w	gridsize,d4	;
 3319  00001C5E  4444                   	neg.w	d4
 3320  00001C60  6B00xxxx               	bmi	bd2clr		;this occurs if no legit entries on new row
 3321  00001C64  B842                   	cmp.w	d2,d4
 3322  00001C66  6400xxxx               	bcc	nomwrapx
 3323                                   ;
 3324  00001C6A  3404                   	move.w	d4,d2		;this is max col for this row
 3325  00001C6C  6000xxxx               	bra	nomwrapx
 3326                                   ;
 3327                                   samesam:
 3328  00001C70  3439xxxxxxxx           	move.w	m3row,d2
 3329  00001C76  4842                   	swap	d2
 3330  00001C78  60BC                   	bra	samebf
 3331                                   ;
 3332                                   offgrid:
 3333  00001C7A  9879xxxxxxxx           	sub.w	m3row,d4	;new row - old row
 3334  00001C80  67B4                   	beq	samebf
 3335  00001C82  6Axx                   	bpl.s	.setmid		;going down
 3336                                   ;
 3337                                   ;  moving up
 3338                                   ;
 3339  00001C84  3839xxxxxxxx           	move.w	m3row,d4
 3340  00001C8A  B87C0003               	cmp.w	#3,d4		;coming in from row #3?
 3341  00001C8E  66xx                   	bne.s	.setmid
 3342                                   ;
 3343  00001C90  7800                   	moveq	#0,d4
 3344  00001C92  3839xxxxxxxx           	move.w	m3col,d4
 3345  00001C98  5344                   	subq	#1,d4
 3346  00001C9A  6Axx                   	bpl.s	.loc
 3347  00001C9C  7800                   	moveq	#0,d4
 3348                                   .loc:
 3349  00001C9E  88FC0003               	divu	#3,d4
 3350  00001CA2  08020011               	btst.l	#17,d2		;are we going to row #2?
 3351  00001CA6  67xx                   	beq.s	.loca
 3352  00001CA8  7800                   	moveq	#0,d4
 3353                                   .loca:
 3354  00001CAA  3404                   	move.w	d4,d2
 3355  00001CAC  6000xxxx               	bra	nomwrapx
 3356                                   .setmid:
 3357  00001CB0  4842                   	swap	d2
 3358  00001CB2  3802                   	move.w	d2,d4
 3359  00001CB4  4842                   	swap	d2
 3360  00001CB6  4242                   	clr.w	d2
 3361  00001CB8  143B40xx               	move.b	midtab(pc,d4.w),d2
 3362  00001CBC  0C440003               	cmpi.w	#3,d4		;are we entering grid?
 3363  00001CC0  6600xxxx               	bne	nomwrapx
 3364  00001CC4  B479xxxxxxxx           	cmp.w	gridsize,d2	;if so--can't be beyond a short program here
 3365  00001CCA  6500xxxx               	bcs	nomwrapx
 3366  00001CCE  3439xxxxxxxx           	move.w	gridsize,d2
 3367  00001CD4  6000xxxx               	bra	nomwrapx
 3368                                   midtab:
 3369  00001CD8  00010005               	dc.b	0,1,0,5
 3370                                   ;
 3371                                   ;
 3372                                   ;


                                        src/cdfront.s        Page 62      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3373                                   chgcol:
 3374  00001CDC  3639xxxxxxxx           	move.w	m3row,d3
 3375  00001CE2  0C430003               	cmpi.w	#3,d3			;are we on trk grid?
 3376  00001CE6  65xx                   	bcs.s	.notgrid		;br if not
 3377                                   ;
 3378  00001CE8  4843                   	swap	d3
 3379  00001CEA  3639xxxxxxxx           	move.w	seqmode,d3
 3380  00001CF0  0C430002               	cmpi.w	#2,d3			;are we in random mode?
 3381  00001CF4  6700xxxx               	beq	bd2clr			;if so, ignore left/right selects
 3382  00001CF8  4843                   	swap	d3
 3383                                   .notgrid:
 3384  00001CFA  D479xxxxxxxx           	add.w	m3col,d2
 3385  00001D00  6Axx                   	bpl.s	nomwrap3
 3386                                   ;
 3387  00001D02  0C430003               	cmpi.w	#3,d3			;are we row #3?
 3388  00001D06  65xx                   	bcs.s	.nongri
 3389                                   ;
 3390  00001D08  66xx                   	bne.s	.nongrii
 3391                                   ;
 3392                                   ;  moved left on top row--may need to scroll up
 3393                                   ;
 3394  00001D0A  4A79xxxxxxxx           	tst.w	gridoff			;any scroll room?
 3395  00001D10  6700xxxx               	beq	staytop			;br if not--stay put
 3396                                   ;
 3397  00001D14  0479000Axxxxxxxx       	subi.w	#10,gridoff
 3398  00001D1C  6100xxxx               	bsr	uprantrk
 3399                                   
 3400  00001D20  3039xxxxxxxx           	move.w	gridsize,d0
 3401  00001D26  9079xxxxxxxx           	sub.w	gridoff,d0
 3402  00001D2C  0C400015               	cmpi.w	#21,d0
 3403  00001D30  65xx                   	bcs.s	.noarad
 3404                                   ;
 3405  00001D32  6100xxxx               	bsr	plantard	;turn on down arrows
 3406                                   .noarad:
 3407                                   ;	bsr	plantard	;set up down arrows
 3408                                   
 3409  00001D36  4A79xxxxxxxx           	tst.w	gridoff
 3410  00001D3C  66xx                   	bne.s	.notdof
 3411  00001D3E  6100xxxx               	bsr	planoffu	;turn off up arrows
 3412                                   .notdof:
 3413                                   
 3414                                   ;
 3415                                   .nongrii:
 3416  00001D42  363C0003               	move.w	#3,d3
 3417                                   .nongri:
 3418  00001D46  7400                   	moveq	#0,d2
 3419  00001D48  143B30xx               	move.b	maxcolx(pc,d3.w),d2
 3420  00001D4C  60xx                   	bra.s	nomwrap3
 3421                                   ;
 3422                                   ;  max col #'s, each row
 3423                                   ;
 3424                                   maxcolx:
 3425  00001D4E  040200090900           	dc.b	4,2,0,9,9,0
 3426                                   ;
 3427                                   nomwrap3:
 3428  00001D54  0802001F               	btst.l	#31,d2			;moved to left?


                                        src/cdfront.s        Page 63      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3429  00001D58  66xx                   	bne.s	nomwrap2		;br if so--we can always do
 3430                                   ;
 3431  00001D5A  0C430003               	cmpi.w	#3,d3			;just check below if on trk grid
 3432  00001D5E  65xx                   	bcs.s	.notforb
 3433                                   ;
 3434                                   ;  moving to right--did we enter forbidden zone?
 3435                                   ;
 3436  00001D60  3803                   	move.w	d3,d4		;get proposed row
 3437  00001D62  5744                   	subq.w	#3,d4		;adjust for top row of grid (+10)
 3438  00001D64  C8FC000A               	mulu	#10,d4
 3439  00001D68  D879xxxxxxxx           	add.w	gridoff,d4
 3440  00001D6E  9879xxxxxxxx           	sub.w	gridsize,d4	;
 3441  00001D74  4444                   	neg.w	d4
 3442  00001D76  B842                   	cmp.w	d2,d4
 3443  00001D78  6400xxxx               	bcc	.notforb
 3444  00001D7C  3404                   	move.w	d4,d2
 3445                                   .notforb:
 3446                                   ;	
 3447                                   ;  need to check bounds
 3448                                   ;	
 3449  00001D7E  B43B30CE               	cmp.b	maxcolx(pc,d3.w),d2
 3450  00001D82  63xx                   	bls.s	nomwrap2
 3451                                   ;
 3452  00001D84  0C430003               	cmpi.w	#3,d3
 3453  00001D88  65xx                   	bcs.s	staytop
 3454                                   ;
 3455                                   ;  we want to wrap on right--check rules for how to do..
 3456                                   ;
 3457  00001D8A  5243                   	addq.w	#1,d3		;advance row count
 3458  00001D8C  0C430005               	cmpi.w	#5,d3		;exceeded rows allowed?
 3459  00001D90  65xx                   	bcs.s	staytop		;br if not
 3460  00001D92  7604                   	moveq	#4,d3		;got to stay on bottom row
 3461                                   ;
 3462                                   ;  advance to next row
 3463                                   ;
 3464  00001D94  0679000Axxxxxxxx       	addi.w	#10,gridoff
 3465  00001D9C  6100xxxx               	bsr	uprantrk
 3466  00001DA0  6100xxxx               	bsr	plantaru	;set up arrows
 3467  00001DA4  3839xxxxxxxx           	move.w	gridsize,d4
 3468  00001DAA  9879xxxxxxxx           	sub.w	gridoff,d4
 3469  00001DB0  0C440015               	cmpi.w	#21,d4
 3470  00001DB4  64xx                   	bcc.s	.notdof
 3471  00001DB6  6100xxxx               	bsr	planoffd	;turn off down arrows
 3472                                   .notdof:
 3473  00001DBA  7604                   	moveq	#4,d3		;set max select row position
 3474                                   staytop:
 3475  00001DBC  7400                   	moveq	#0,d2
 3476                                   nomwrap2:
 3477  00001DBE  4842                   	swap	d2
 3478  00001DC0  3403                   	move.w	d3,d2
 3479  00001DC2  4842                   	swap	d2
 3480                                   ;
 3481                                   ;  d2 = new row[31:16] col[15:00]
 3482                                   ;
 3483                                   nomwrapx:
 3484  00001DC4  2F02                   	move.l	d2,-(sp)


                                        src/cdfront.s        Page 64      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3485  00001DC6  4279xxxxxxxx           	clr.w	blinkon		;force previous off
 3486  00001DCC  6100xxxx               	bsr	ringit
 3487  00001DD0  241F                   	move.l	(sp)+,d2
 3488  00001DD2  3802                   	move.w	d2,d4
 3489  00001DD4  D879xxxxxxxx           	add.w	m3col,d4	;d4=5 if we wrap
 3490                                   ;
 3491  00001DDA  4A79xxxxxxxx           	tst.w	boxleft		;are we on volume bar
 3492  00001DE0  67xx                   	beq.s	novobar
 3493  00001DE2  4279xxxxxxxx           	clr.w	boxleft
 3494  00001DE8  60xx                   	bra.s	entbox
 3495                                   ;
 3496                                   transtab:
 3497  00001DEA  0502                   	dc.b	5,2
 3498                                   ;
 3499                                   ;  not on volume bar
 3500                                   ;
 3501                                   novobar:
 3502  00001DEC  60xx                   	bra.s	nowind
 3503                                   ;
 3504  00001DEE  4842                   	swap	d2
 3505  00001DF0  3A02                   	move.w	d2,d5
 3506  00001DF2  4842                   	swap	d2
 3507  00001DF4  BA79xxxxxxxx           	cmp.w	m3row,d5
 3508  00001DFA  66xx                   	bne.s	nowind
 3509  00001DFC  B83B50EC               	cmp.b	transtab(pc,d5.w),d4	;check horz wrap indicator
 3510  00001E00  66xx                   	bne.s	nowind		;br if no wrap here
 3511  00001E02  33FCFFFFxxxxxxxx       	move.w	#-1,boxleft
 3512  00001E0A  7200                   	moveq	#0,d1
 3513  00001E0C  08C10014               	bset	#Ubit,d1
 3514  00001E10  6000F868               	bra	notm3		;exit with up bit set
 3515                                   ;
 3516                                   nowind:
 3517                                   
 3518  00001E14  33C2xxxxxxxx           	move.w	d2,m3col	;set new mode 3 selection
 3519  00001E1A  4842                   	swap	d2
 3520  00001E1C  33C2xxxxxxxx           	move.w	d2,m3row
 3521                                   entbox:
 3522  00001E22  6100xxxx               	bsr	ringit
 3523                                   ;
 3524                                   ;
 3525                                   ;  Now set translated bit determined by selection from fireB bit
 3526                                   ;
 3527                                   nom3sel:
 3528  00001E26  4A79xxxxxxxx           	tst.w	boxleft		;if we're on the volume bar, just do up/down
 3529  00001E2C  6600FCA2               	bne	volux		;exit with up/down only
 3530                                   ;
 3531  00001E30  08010019               	btst.l	#Bbit,d1
 3532  00001E34  67xx                   	beq.s	bd2clr
 3533  00001E36  4A79xxxxxxxx           	tst.w	m3row
 3534  00001E3C  6600xxxx               	bne	nonBset
 3535  00001E40  7400                   	moveq	#0,d2
 3536  00001E42  3639xxxxxxxx           	move.w	m3col,d3
 3537  00001E48  163B30xx               	move.b	btrantab(pc,d3.w),d3
 3538  00001E4C  08010019               	btst.l	#Bbit,d1
 3539  00001E50  67xx                   	beq.s	bclear
 3540  00001E52  07C2                   	bset.l	d3,d2


                                        src/cdfront.s        Page 65      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3541  00001E54  60xx                   	bra.s	bclear
 3542                                   btrantab:
 3543  00001E56  19171C0D1600           	dc.b	Bbit,Rbit,Pbit,Cbit,Lbit,0	
 3544                                   ;
 3545                                   ;   We translate the B button & RLDU into virtual buttons the rest of the code
 3546                                   ;  can understand.
 3547                                   ;
 3548                                   ;   selections are:
 3549                                   ;
 3550                                   ;   m3sel:- Action:		State of fireB translated to:
 3551                                   ;
 3552                                   ;	0 - play (default)	fireB
 3553                                   ;	1 - FF			Right
 3554                                   ;	2 - pause		pause
 3555                                   ;	3 - Stop		fireC
 3556                                   ;	4 - Rew			Left
 3557                                   ;
 3558                                   bd2clr:
 3559  00001E5C  7400                   	moveq	#0,d2
 3560                                   bclear:
 3561  00001E5E  85B9xxxxxxxx           	or.l	d2,dave_pad		;save our response
 3562  00001E64  4E75                   	rts			; else, we have nothing more to do
 3563                                   ;
 3564                                   ;
 3565                                   ;  We have a B button but we're not on top row
 3566                                   ;
 3567                                   nonBset:
 3568  00001E66  2602                   	move.l	d2,d3
 3569  00001E68  C681                   	and.l	d1,d3
 3570  00001E6A  7400                   	moveq	#0,d2
 3571  00001E6C  85B9xxxxxxxx           	or.l	d2,dave_pad	;no response for dave
 3572  00001E72  08030019               	btst.l	#Bbit,d3	;leading edge only
 3573  00001E76  67xx                   	beq.s	nonBsetx
 3574  00001E78  3439xxxxxxxx           	move.w	m3row,d2
 3575  00001E7E  0C420001               	cmpi.w	#1,d2		;only have row #0 & #1 for now
 3576  00001E82  67xx                   	beq.s	werow1
 3577                                   ;
 3578                                   ;  B-button on row #3/#4--are we in data entry mode?
 3579                                   ;
 3580  00001E84  4A79xxxxxxxx           	tst.w	progenty	;if active, B clears current trk in grid
 3581  00001E8A  6600xxxx               	bne	werowB		;if so, go do it
 3582                                   ;
 3583                                   nonBsetx:
 3584  00001E8E  4E75                   	rts
 3585                                   ;
 3586                                   ;
 3587                                   ;
 3588                                   ;
 3589                                   maxmodz:
 3590  00001E90  03031000               	dc.b	3,3,16,0		;max entries for each col on row #1
 3591                                   ;
 3592                                   ;
 3593                                   ;  B button on row #1
 3594                                   ;
 3595                                   werow1:
 3596  00001E94  3439xxxxxxxx           	move.w	m3col,d2


                                        src/cdfront.s        Page 66      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3597  00001E9A  7600                   	moveq	#0,d3
 3598  00001E9C  163B20F2               	move.b	maxmodz(pc,d2.w),d3
 3599  00001EA0  D442                   	add.w	d2,d2
 3600  00001EA2  47F9xxxxxxxx           	lea	seqmode,a3
 3601  00001EA8  32332000               	move.w	(a3,d2.w),d1
 3602                                   ;
 3603  00001EAC  5241                   	addq.w	#1,d1		;advance seqmode/reptmode/cdgmode
 3604  00001EAE  0C420004               	cmpi.w	#4,d2		;are we advancing cd+g mode?
 3605  00001EB2  66xx                   	bne.s	scdgm		;br if not
 3606                                   ;
 3607                                   ;  we're in cdgmode change
 3608                                   ;
 3609                                   ;******24-Jan-95
 3610  00001EB4  0C410001               	cmpi.w	#1,d1
 3611  00001EB8  66xx                   	bne.s	scgmlp
 3612  00001EBA  4279xxxxxxxx           	clr.w	vlmrdcnt	;29-Mar-95
 3613  00001EC0  33F9001AE4D2xxxxxxxx   	move.w	frames,vlmrfrm	;set frame count
 3614  00001ECA  4679xxxxxxxx           	not.w	vlmrand
 3615  00001ED0  66xx                   	bne.s	scdgmx
 3616                                   ;*******end addition	
 3617                                   scgmlp:
 3618  00001ED2  3839xxxxxxxx           	move.w	TvChnlAv,d4	;check avail channels on cd+g
 3619  00001ED8  0304                   	btst.l	d1,d4		;are we avail?
 3620  00001EDA  66xx                   	bne.s	scdgm		;br if so
 3621  00001EDC  5241                   	addq.w	#1,d1
 3622  00001EDE  B243                   	cmp.w	d3,d1
 3623  00001EE0  65F0                   	bcs	scgmlp
 3624                                   scdgm:
 3625  00001EE2  B243                   	cmp.w	d3,d1
 3626  00001EE4  65xx                   	bcs.s	werow1x	
 3627                                   scdgmx:
 3628  00001EE6  7200                   	moveq	#0,d1
 3629                                   werow1x:
 3630  00001EE8  37812000               	move.w	d1,(a3,d2.w)
 3631  00001EEC  E34A                   	lsl.w	#1,d2
 3632  00001EEE  D242                   	add.w	d2,d1
 3633  00001EF0  3001                   	move.w	d1,d0
 3634  00001EF2  7200                   	moveq	#0,d1
 3635  00001EF4  6100xxxx               	bsr	radiob
 3636                                   ;
 3637                                   ;
 3638                                   ;
 3639  00001EF8  3039xxxxxxxx           	move.w	m3col,d0	;are we changing sequence stuff?
 3640  00001EFE  6600xxxx               	bne	noseqm		;br if not
 3641                                   ;
 3642                                   ;  sequence mode was changed
 3643                                   ;
 3644  00001F02  3039xxxxxxxx           	move.w	seqmode,d0	;(program-0, normal-1, random-2)
 3645  00001F08  67xx                   	beq.s	progseqm	;br if program
 3646  00001F0A  0C400001               	cmpi.w	#1,d0		;normal mode?
 3647  00001F0E  6700xxxx               	beq	setnorm
 3648                                   ;
 3649                                   ;  must be seqmode=2-- entering random sequnce
 3650                                   ;
 3651  00001F12  3039xxxxxxxx           	move.w	maxmin,d0
 3652  00001F18  024000FF               	andi.w	#$ff,d0


                                        src/cdfront.s        Page 67      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3653  00001F1C  33C0xxxxxxxx           	move.w	d0,gridsize	;set total # of tracks for grid
 3654  00001F22  6100xxxx               	bsr	randf		;form random sequence of tracks
 3655  00001F26  4279xxxxxxxx           	clr.w	gridoff		;29-Mar-95
 3656  00001F2C  6100xxxx               	bsr	progup
 3657  00001F30  4E75                   	rts
 3658                                   ;
 3659                                   ;
 3660                                   ;
 3661                                   ;
 3662                                   ;
 3663                                   listinst:
 3664  00001F32  2079xxxxxxxx           	move.l	holeptr,a0
 3665  00001F38  1084                   	move.b	d4,(a0)		;install final track in trkseq
 3666                                   ;
 3667                                   listins1:
 3668  00001F3A  2008                   	move.l	a0,d0
 3669  00001F3C  90BCxxxxxxxx           	sub.l	#trkseq,d0
 3670                                   ;
 3671  00001F42  3239xxxxxxxx           	move.w	trksptr,d1	;check for current not on list
 3672  00001F48  6Axx                   	bpl.s	.onlist
 3673                                   ;
 3674  00001F4A  B879xxxxxxxx           	cmp.w	track,d4
 3675  00001F50  66xx                   	bne.s	.noinc
 3676                                   ;
 3677  00001F52  33C0xxxxxxxx           	move.w	d0,trksptr
 3678  00001F58  60xx                   	bra.s	.noinc
 3679                                   ;
 3680                                   .onlist:
 3681  00001F5A  B041                   	cmp.w	d1,d0
 3682  00001F5C  62xx                   	bhi.s	.noinc
 3683  00001F5E  06790001xxxxxxxx       	addi.w	#1,trksptr	;just inc by 1
 3684                                   .noinc:
 3685  00001F66  6100xxxx               	bsr	uprantrk	;display the new tracks
 3686  00001F6A  4E75                   	rts
 3687                                   ;
 3688                                   ;
 3689                                   ;
 3690                                   ;
 3691                                   ;  Entering User programable sequence mode
 3692                                   ;
 3693                                   progseqm:
 3694  00001F6C  41F9xxxxxxxx           	lea	progseq,a0
 3695  00001F72  43F9xxxxxxxx           	lea	trkseq,a1
 3696  00001F78  70FF                   	moveq	#-1,d0
 3697                                   .coprog:
 3698  00001F7A  5240                   	addq.w	#1,d0
 3699  00001F7C  12D8                   	move.b	(a0)+,(a1)+
 3700  00001F7E  66FA                   	bne	.coprog
 3701                                   ;
 3702  00001F80  33C0xxxxxxxx           	move.w	d0,gridsize	;this is the # of tracks for grid purposes
 3703                                   ;
 3704  00001F86  33F9xxxxxxxxxxxxxxxx   	move.w	trksptrp,trksptr	;get track ptr used last time in program
 3705                                   
 3706  00001F90  4279xxxxxxxx           	clr.w	gridoff		;29-Mar-95
 3707  00001F96  6100xxxx               	bsr	progup		;put up user programmable seq
 3708  00001F9A  6000xxxx               	bra	settrkp		;exit by setting trksptr


                                        src/cdfront.s        Page 68      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3709                                   ;
 3710                                   ;
 3711                                   ;  Entering Normal sequential sequence
 3712                                   ;
 3713                                   setnorm:
 3714                                   ;	move.w	#-1,davesobj+$4c	;turn off
 3715                                   ;
 3716                                   ;  previous mode was program--need to preserve user's program sequence
 3717  00001F9E  41F9xxxxxxxx           	lea	trkseq,a0
 3718  00001FA4  43F9xxxxxxxx           	lea	progseq,a1
 3719                                   .coprog:
 3720  00001FAA  12D8                   	move.b	(a0)+,(a1)+
 3721  00001FAC  66FC                   	bne	.coprog
 3722                                   ;
 3723  00001FAE  33F9xxxxxxxxxxxxxxxx   	move.w	trksptr,trksptrp	;save program mode's trksptr too	
 3724                                   ;
 3725                                   
 3726  00001FB8  6100xxxx               	bsr	buildseq	;normal mode just does straight seq
 3727                                   ;
 3728  00001FBC  3039xxxxxxxx           	move.w	maxmin,d0
 3729  00001FC2  024000FF               	andi.w	#$ff,d0
 3730  00001FC6  33C0xxxxxxxx           	move.w	d0,gridsize	;set total # of tracks for grid
 3731                                   ;
 3732  00001FCC  4279xxxxxxxx           	clr.w	gridoff		;29-Mar-95
 3733  00001FD2  6100xxxx               	bsr	progup
 3734                                   settrkp:
 3735  00001FD6  4A79xxxxxxxx           	tst.w	play		;if we're playing, we better fix trksptr
 3736  00001FDC  67xx                   	beq.s	setnormx	;br if not playing--we're set	
 3737                                   ;
 3738  00001FDE  6100xxxx               	bsr	trkptrfx	;find proper trksptr for track we're playing
 3739                                   setnormx:
 3740  00001FE2  6100xxxx               	bsr	chngdisp	;may need for cd+g
 3741  00001FE6  4E75                   	rts
 3742                                   ;
 3743                                   ;  Not in sequence mode, check cd+g
 3744                                   ;
 3745                                   noseqm:
 3746  00001FE8  0C400002               	cmpi.w	#2,d0		;did we change cd+g mode?
 3747  00001FEC  67xx                   	beq.s	docdg		;br if so	
 3748  00001FEE  4E75                   	rts
 3749                                   ;
 3750                                   ;
 3751                                   docdg:
 3752  00001FF0  4A79xxxxxxxx           	tst.w	cdgmode		;did we just enter cd+g mode?
 3753  00001FF6  6600xxxx               	bne	cdgdo		; br to do it if so
 3754                                   ;
 3755                                   ;  may be re-entering vlm
 3756                                   ;
 3757  00001FFA  4A79xxxxxxxx           	tst.w	vlmrand		;are we just shifting to vlm random?
 3758  00002000  67xx                   	beq.s	revlm		;br if no--we're starting up vlm again
 3759  00002002  4E75                   	rts
 3760                                   revlm:
 3761                                   ;
 3762                                   ;******1-Aug-95
 3763  00002004  3039001AE4D2           	move.w	frames,d0
 3764                                   frsync:


                                        src/cdfront.s        Page 69      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3765  0000200A  B079001AE4D2           	cmp.w	frames,d0
 3766  00002010  67F8                   	beq	frsync
 3767                                   ;***end 1-Aug-95
 3768                                   ;
 3769  00002012  21FC00194C900100       	move.l	#Frame,$100
 3770                                   ;
 3771  0000201A  6100xxxx               	bsr	stopcdg
 3772                                   ;
 3773  0000201E  41F9001AE148           	lea	davesobj,a0	;copy daves objects into local
 3774  00002024  47F9xxxxxxxx           	lea	objcopi,a3
 3775  0000202A  702F                   	moveq	#47,d0
 3776                                   daveloc:
 3777  0000202C  26D8                   	move.l	(a0)+,(a3)+
 3778  0000202E  51C8FFFC               	dbra	d0,daveloc
 3779                                   ;
 3780  00002032  23FCxxxxxxxx00199994   	move.l	#davesres,davesvec
 3781                                   ;
 3782  0000203C  33F9001AE4D2xxxxxxxx   	move.w	frames,reframe	;save this 'cause vlm trashes
 3783                                   ;
 3784                                   .gpuwait:
 3785  00002046  203900F02114           	move.l	G_CTRL,d0
 3786  0000204C  E248                   	lsr.w	#1,d0
 3787  0000204E  65F6                   	bcs	.gpuwait
 3788                                   ;	
 3789  00002050  4FF900200000           	lea	$200000,sp
 3790  00002056  4EF90019207A           	jmp	goag
 3791                                   ;
 3792                                   ;
 3793                                   ;
 3794                                   ;
 3795                                   davesres:
 3796  0000205C  33F9xxxxxxxx001AE4D2   	move.w	reframe,frames
 3797                                   ;
 3798  00002066  41F9001AE148           	lea	davesobj,a0	;copy daves objects into local
 3799  0000206C  47F9xxxxxxxx           	lea	objcopi,a3
 3800  00002072  702F                   	moveq	#47,d0
 3801                                   daveloc1:
 3802  00002074  20DB                   	move.l	(a3)+,(a0)+
 3803  00002076  51C8FFFC               	dbra	d0,daveloc1
 3804                                   ;
 3805                                   ;  restore CRY palette
 3806                                   ;
 3807                                   .repalle:
 3808                                   ;	lea	cdstatus+10,a0
 3809  0000207A  41F9xxxxxxxx           	lea	onepage3+10,a0
 3810  00002080  43F900F00400           	lea	CLUT,a1
 3811  00002086  303C00FF               	move.w	#255,d0	
 3812                                   .fullpal:
 3813  0000208A  32D8                   	move.w	(a0)+,(a1)+
 3814  0000208C  51C8FFFC               	dbra	d0,.fullpal
 3815                                   ;
 3816  00002090  303C00FF               	move.w	#255,d0
 3817                                   .chkp:
 3818  00002094  3221                   	move.w	-(a1),d1
 3819  00002096  B260                   	cmp.w	-(a0),d1
 3820  00002098  66E0                   	bne	.repalle


                                        src/cdfront.s        Page 70      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3821  0000209A  51C8FFF8               	dbra	d0,.chkp
 3822  0000209E  33FCFFFF00F005FE       	move.w	#-1,CLUT+(2*$ff)
 3823                                   ;
 3824  000020A6  23FC0000030200199994   	move.l	#service,davesvec
 3825  000020B0  6000E250               	bra	service
 3826                                   ;		
 3827                                   ;
 3828                                   ;
 3829                                   cdgdo:
 3830  000020B4  3039xxxxxxxx           	move.w	cdgmode,d0
 3831  000020BA  0C400001               	cmpi.w	#1,d0
 3832  000020BE  6600xxxx               	bne	nvlmkill		;only ch #1 will be kill of VLM
 3833                                   ;
 3834                                   ;
 3835  000020C2  23FC9800317E00F03160   	move.l	#$9800317e,$f03160	;this cheap magick will shut-down GPU
 3836                                   ;
 3837                                   ;
 3838                                   .gpuwait:
 3839  000020CC  203900F02114           	move.l	G_CTRL,d0
 3840  000020D2  E248                   	lsr.w	#1,d0
 3841  000020D4  65F6                   	bcs	.gpuwait
 3842                                   ;
 3843  000020D6  23FC980030BE00F03160   	move.l	#$980030be,$f03160	;restore to former self
 3844                                   ;
 3845                                   ;	move.l	#$c00,d2	;compute screen addr
 3846                                   ;	add.l	cscreen,d2	;get base addr here
 3847                                   ;	add.l	hango,d2	;add offset
 3848                                   ;
 3849           =00100000               cdg_scrn	equ	$100000
 3850                                   ;
 3851                                   ;	move.l	#GPU_S,a0
 3852                                   ;	move.l	#GPU_E,d0
 3853                                   ;	sub.l	a0,d0
 3854                                   ;	asr.l	#2,d0
 3855                                   ;	lea	$f03000,a1
 3856                                   ;.copy:
 3857                                   ;	move.l	(a0)+,(a1)+
 3858                                   ;	dbra	d0,.copy
 3859                                   ;
 3860                                   ;	move.l	#cdg_scrn,G_RAM+4
 3861                                   ;
 3862                                   ;	move.l	#gpustart,G_PC
 3863                                   ;
 3864                                   ;	move.l	#1,G_CTRL
 3865                                   ;
 3866                                   ;  Set-up davelist
 3867                                   ;
 3868  000020E0  4A79xxxxxxxx           	tst.w	daveonce	;only do this once
 3869  000020E6  66xx                   	bne.s	only1
 3870                                   ;
 3871  000020E8  7260                   	moveq	#$60,d1
 3872  000020EA  D2B9001AEC80           	add.l	dlist,d1	;get link ptr for davelist
 3873  000020F0  41F9xxxxxxxx           	lea	davelist,a0
 3874                                   ;
 3875  000020F6  243C00100000           	move.l	#cdg_scrn,d2
 3876  000020FC  028200FFFFF8           	andi.l	#$00fffff8,d2	


                                        src/cdfront.s        Page 71      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3877  00002102  E18A                   	lsl.l	#8,d2		;get image ptr
 3878  00002104  2082                   	move.l	d2,(a0)
 3879                                   ;
 3880  00002106  24280002               	move.l	2(a0),d2
 3881  0000210A  024200FF               	andi.w	#$ff,d2
 3882  0000210E  EB89                   	lsl.l	#5,d1
 3883  00002110  028107FFFF00           	andi.l	#$07ffff00,d1
 3884  00002116  8481                   	or.l	d1,d2
 3885  00002118  21420002               	move.l	d2,2(a0)
 3886                                   ;
 3887                                   only1:
 3888                                   ;
 3889                                   ;
 3890  0000211C  6100xxxx               	bsr	initgpu		;set-up Pradip
 3891                                   ;
 3892                                   ;  Need to tell GPU the following addresses before we start-up..
 3893                                   ;
 3894                                   ;	davelist
 3895                                   ;	dlist
 3896                                   ;	blist
 3897                                   ;	Pradip
 3898                                   ;	frames
 3899                                   ;
 3900  00002120  203Cxxxxxxxx           	move.l	#davelist,d0
 3901  00002126  3200                   	move.w	d0,d1			;must be long-word aligned
 3902  00002128  02410003               	andi.w	#3,d1
 3903  0000212C  67xx                   	beq.s	islongw
 3904  0000212E  2200                   	move.l	d0,d1
 3905  00002130  0241FFFC               	andi.w	#~3,d1
 3906  00002134  2641                   	move.l	d1,a3
 3907  00002136  2040                   	move.l	d0,a0
 3908  00002138  2001                   	move.l	d1,d0
 3909  0000213A  4A79xxxxxxxx           	tst.w	daveonce
 3910  00002140  66xx                   	bne.s	islongw
 3911                                   ;
 3912  00002142  33FCFFFFxxxxxxxx       	move.w	#-1,daveonce		;this should only happen once
 3913                                   ;	
 3914  0000214A  26D8                   	move.l	(a0)+,(a3)+
 3915  0000214C  26D8                   	move.l	(a0)+,(a3)+
 3916  0000214E  26D8                   	move.l	(a0)+,(a3)+
 3917  00002150  26D8                   	move.l	(a0)+,(a3)+
 3918                                   islongw:
 3919  00002152  41F900F03020           	lea	$f03020,a0		;GPU addresses here
 3920  00002158  20C0                   	move.l	d0,(a0)+		;long-aligned davelist
 3921  0000215A  20F9001AEC80           	move.l	dlist,(a0)+
 3922  00002160  20F9001AEC7C           	move.l	blist,(a0)+
 3923  00002166  20FCxxxxxxxx           	move.l	#Pradip,(a0)+
 3924  0000216C  20FC001AE4D2           	move.l	#frames,(a0)+
 3925                                   ;
 3926  00002172  23FC0000000100F02114   	move.l	#1,G_CTRL		;start up GPU
 3927                                   ;
 3928  0000217C  6100xxxx               	bsr	initcdg
 3929                                   ;
 3930                                   ;
 3931                                   .repalle:
 3932  00002180  41F9xxxxxxxx           	lea	rgbpal,a0


                                        src/cdfront.s        Page 72      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3933  00002186  43F900F00400           	lea	CLUT,a1
 3934  0000218C  303C00FF               	move.w	#255,d0	
 3935                                   .fullpal:
 3936  00002190  32D8                   	move.w	(a0)+,(a1)+
 3937  00002192  51C8FFFC               	dbra	d0,.fullpal
 3938                                   ;
 3939  00002196  303C00FF               	move.w	#255,d0
 3940                                   .chkp:
 3941  0000219A  3221                   	move.w	-(a1),d1
 3942  0000219C  B260                   	cmp.w	-(a0),d1
 3943  0000219E  66E0                   	bne	.repalle
 3944  000021A0  51C8FFF8               	dbra	d0,.chkp
 3945                                   ;
 3946                                   ;
 3947                                   ;
 3948  000021A4  21FCxxxxxxxx0100       	move.l	#Dframe,$100	;use Dave's v_blank
 3949                                   ;
 3950  000021AC  33FC06C700F00028       	move.w	#$6c7,VMODE		;go into RGB mode
 3951                                   nvlmkill:
 3952  000021B4  3039xxxxxxxx           	move.w	cdgmode,d0
 3953  000021BA  13C0xxxxxxxx           	move.b	d0,TvChnlNo	;set our channel here
 3954                                   
 3955  000021C0  4E75                   	rts
 3956                                   ;
 3957                                   daveonce:
 3958  000021C2  0000                   	dc.w	0
 3959                                   ;
 3960                                   ;  arrive here if erroneous entry needs deleting
 3961                                   ;
 3962                                   wedele:
 3963  000021C4  7AFF                   	moveq	#-1,d5
 3964  000021C6  60xx                   	bra.s	werowBi
 3965                                   ;
 3966                                   ;  arrive here if B-button on trk grid in program mode...
 3967                                   ;
 3968                                   werowB:
 3969  000021C8  7A00                   	moveq	#0,d5		;indicate normal "B" button delete
 3970                                   werowBi:
 3971                                   ;*********added 22-Jan-95
 3972  000021CA  3439xxxxxxxx           	move.w	gridsize,d2	;see if we're trying to delete last
 3973  000021D0  0C420002               	cmpi.w	#2,d2
 3974  000021D4  6500xxxx               	bcs	trkfnx		;br if attempt to delete last--don't allow
 3975                                   ;*********end addition
 3976                                   ;
 3977  000021D8  3439xxxxxxxx           	move.w	m3row,d2	;find entry in trkseq we are deleting
 3978  000021DE  5742                   	subq.w	#3,d2
 3979  000021E0  C4FC000A               	mulu	#10,d2
 3980  000021E4  D479xxxxxxxx           	add.w	gridoff,d2
 3981  000021EA  D479xxxxxxxx           	add.w	m3col,d2	;d2 = entry in trkseq to delete
 3982  000021F0  41F9xxxxxxxx           	lea	trkseq,a0
 3983  000021F6  60xx                   	bra.s	trkfni
 3984                                   ;
 3985                                   trkfnlp:
 3986  000021F8  4A18                   	tst.b	(a0)+
 3987  000021FA  6700xxxx               	beq	trkfnx		;exit if we went beyond end
 3988                                   trkfni:


                                        src/cdfront.s        Page 73      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 3989  000021FE  51CAFFF8               	dbra	d2,trkfnlp
 3990                                   ;
 3991  00002202  4A10                   	tst.b	(a0)		;were we just pointing to endblank?
 3992  00002204  67xx                   	beq.s	trkback		;if so, just back up the box
 3993                                   ;
 3994  00002206  04790001xxxxxxxx       	sub.w	#1,gridsize	;# of tracks for trk grid purposes
 3995                                   ;
 3996  0000220E  7001                   	moveq	#1,d0
 3997  00002210  4A79xxxxxxxx           	tst.w	trksptr
 3998  00002216  6Bxx                   	bmi.s	.negtrkp
 3999                                   ;
 4000  00002218  2008                   	move.l	a0,d0
 4001  0000221A  90BCxxxxxxxx           	sub.l	#trkseq,d0	;check for trksptr update
 4002  00002220  9079xxxxxxxx           	sub.w	trksptr,d0
 4003                                   .negtrkp:
 4004                                   ;
 4005  00002226  2A48                   	move.l	a0,a5
 4006  00002228  528D                   	addq.l	#1,a5
 4007  0000222A  74FF                   	moveq	#-1,d2
 4008                                   trkfnlp1:
 4009  0000222C  5242                   	addq.w	#1,d2
 4010  0000222E  10DD                   	move.b	(a5)+,(a0)+
 4011  00002230  66FA                   	bne.s	trkfnlp1
 4012                                   ;
 4013  00002232  4A40                   	tst.w	d0
 4014  00002234  6Bxx                   	bmi.s	.decptr
 4015  00002236  66xx                   	bne.s	.nodec
 4016  00002238  48E72400               	movem.l	d2/d5,-(sp)
 4017  0000223C  6100xxxx               	bsr	trkptrfx	;we deleted current trk-- find new one
 4018  00002240  4CDF0024               	movem.l	(sp)+,d2/d5
 4019  00002244  60xx                   	bra.s	.nodec
 4020                                   .decptr:
 4021  00002246  04790001xxxxxxxx       	subi.w	#1,trksptr	;just decrement by 1
 4022                                   .nodec:
 4023                                   ;
 4024  0000224E  4A42                   	tst.w	d2		;did we delete last in list?
 4025  00002250  66xx                   	bne.s	trknfol		;br if not
 4026                                   ;
 4027  00002252  4A45                   	tst.w	d5
 4028  00002254  66xx                   	bne.s	trknfol		;are we just cancelling bad entry?
 4029                                   ;
 4030                                   ;  deleted last in list--move select box to new last
 4031                                   ;
 4032                                   trkback:
 4033  00002256  4279xxxxxxxx           	clr.w	blinkon
 4034  0000225C  6100xxxx               	bsr	ringit		;turn off select box
 4035                                   ;
 4036  00002260  3439xxxxxxxx           	move.w	m3col,d2	;move box to left
 4037  00002266  5342                   	subq.w	#1,d2
 4038  00002268  6Axx                   	bpl.s	.boxleft
 4039                                   ;
 4040  0000226A  3439xxxxxxxx           	move.w	m3row,d2	;see if we can move up a row?
 4041  00002270  04420001               	subi.w	#1,d2
 4042  00002274  0C420003               	cmpi.w	#3,d2
 4043  00002278  67xx                   	beq.s	.rowup		;br if was on bottom row
 4044                                   ;


                                        src/cdfront.s        Page 74      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4045                                   ; we were on top row
 4046                                   ;
 4047  0000227A  3439xxxxxxxx           	move.w	gridoff,d2
 4048  00002280  947C000A               	sub.w	#10,d2
 4049  00002284  6Bxx                   	bmi.s	trknfol
 4050  00002286  33C2xxxxxxxx           	move.w	d2,gridoff
 4051  0000228C  66xx                   	bne.s	.rownup
 4052  0000228E  6100xxxx               	bsr	planoffu	;turn off up arrows
 4053  00002292  60xx                   	bra.s	.rownup
 4054                                   .rowup:
 4055  00002294  33C2xxxxxxxx           	move.w	d2,m3row
 4056                                   .rownup:
 4057  0000229A  343C0009               	move.w	#9,d2
 4058                                   .boxleft:
 4059  0000229E  33C2xxxxxxxx           	move.w	d2,m3col	
 4060                                   trknfol:
 4061  000022A4  6100xxxx               	bsr	uprantrk	;display the new tracks
 4062                                   ;
 4063  000022A8  33FCFFFFxxxxxxxx       	move.w	#-1,blinkon
 4064  000022B0  6100xxxx               	bsr	ringit		;restore select box
 4065                                   ;
 4066  000022B4  3039xxxxxxxx           	move.w	gridsize,d0
 4067  000022BA  9079xxxxxxxx           	sub.w	gridoff,d0
 4068  000022C0  0C400015               	cmpi.w	#21,d0
 4069  000022C4  64xx                   	bcc.s	trkfnx
 4070                                   ;
 4071  000022C6  6100xxxx               	bsr	planoffd	;turn off down arrows
 4072                                   trkfnx:
 4073  000022CA  4E75                   	rts
 4074                                   ;---------------------------------------------------
 4075                                   ;
 4076                                   ;  put up the program mode screen
 4077                                   ;
 4078                                   ;rectv	equ	42
 4079           =0000001B               rectv	equ	27
 4080                                   ;
 4081                                   gridv:
 4082  000022CC  0125                   	dc.w	$140-rectv	;NTSC
 4083  000022CE  0185                   	dc.w	$140-rectv+$60	;PAL
 4084                                   ;
 4085                                   ;
 4086                                   ;
 4087                                   progup:
 4088  000022D0  48E7FC84               	movem.l	a0/a5/d0-d5,-(sp)
 4089                                   ;
 4090                                   ;  Now install the object
 4091                                   ;
 4092  000022D4  41F9001AE188           	lea	davesobj+$40,a0
 4093  000022DA  30BC0038               	move.w	#$38,(a0)		;horz position
 4094                                   ;	move.w	#$140-rectv,$4(a0)	;vert position
 4095  000022DE  3039001FD426           	move.w	pal,d0
 4096  000022E4  D040                   	add.w	d0,d0
 4097  000022E6  317B00E40004           	move.w	gridv(pc,d0.w),$4(a0)	;vert position
 4098                                   ;
 4099                                   ;	move.w	#$140-rectv,$4(a0)	;vert position
 4100                                   ;


                                        src/cdfront.s        Page 75      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4101  000022EC  317C00010014           	move.w	#1,$14(a0)		;rmw or transparent
 4102  000022F2  317C00000016           	move.w	#0,$16(a0)		;palette index
 4103  000022F8  317C00200018           	move.w	#$20,$18(a0)		;DWIDTH
 4104  000022FE  317C0060001A           	move.w	#$60,$1A(a0)		;height
 4105  00002304  317C0003001C           	move.w	#3,$1C(a0)		;pixel depth
 4106                                   ;
 4107  0000230A  217C00007F000010       	move.l	#gridbase,$10(a0)	;this one might get munged
 4108  00002312  317C0006000C           	move.w	#6,$c(a0)		;turn on the object
 4109                                   ;
 4110  00002318  7000                   	moveq	#0,d0			;fill data set for clear
 4111                                   ;	move.l	#$12121212,d0		;fill data set for color
 4112                                   
 4113  0000231A  323C0000               	move.w	#0,d1			;x
 4114                                   ;
 4115                                   ;	move.w	#rectv,d2		;y
 4116  0000231E  343C0011               	move.w	#17,d2
 4117                                   ;
 4118  00002322  363C0100               	move.w	#256,d3			;w
 4119  00002326  383C004F               	move.w	#$60-17,d4		;h
 4120  0000232A  6100xxxx               	bsr	fillbox			;clear buffer
 4121                                   ;
 4122  0000232E  203C04040404           	move.l	#$04040404,d0		;fill data set for opaque black
 4123  00002334  323C0000               	move.w	#0,d1			;x
 4124  00002338  343C001B               	move.w	#rectv,d2		;y
 4125  0000233C  363C00F3               	move.w	#243,d3			;w
 4126  00002340  383C003F               	move.w	#63,d4			;h
 4127  00002344  6100xxxx               	bsr	fillbox			;clear buffer
 4128                                   ;
 4129  00002348  203C02020202           	move.l	#$02020202,d0		;fill data set for lite tan
 4130  0000234E  323C0001               	move.w	#1,d1			;x
 4131  00002352  343C001C               	move.w	#rectv+1,d2		;y
 4132  00002356  363C0001               	move.w	#1,d3			;w
 4133  0000235A  383C003D               	move.w	#61,d4			;h
 4134  0000235E  7A0A                   	moveq	#10,d5
 4135                                   .vlines:
 4136  00002360  6100xxxx               	bsr	fillbox			;clear buffer
 4137  00002364  D27C0018               	add.w	#24,d1
 4138  00002368  51CDFFF6               	dbra	d5,.vlines
 4139                                   ;
 4140  0000236C  323C0001               	move.w	#1,d1			;x
 4141  00002370  343C001C               	move.w	#rectv+1,d2		;y
 4142  00002374  363C00F0               	move.w	#240,d3			;w
 4143  00002378  383C0001               	move.w	#1,d4			;h
 4144  0000237C  7A02                   	moveq	#2,d5
 4145                                   .hlines:
 4146  0000237E  6100xxxx               	bsr	fillbox			;clear buffer
 4147  00002382  D47C001E               	add.w	#30,d2
 4148  00002386  51CDFFF6               	dbra	d5,.hlines
 4149                                   ;
 4150  0000238A  6100xxxx               	bsr	trkptrfx	;find current track seq ptr
 4151                                   ;
 4152  0000238E  6100xxxx               	bsr	uprantrk	;display the tracks
 4153                                   ;
 4154  00002392  3039xxxxxxxx           	move.w	gridsize,d0
 4155  00002398  0C000015               	cmpi.b	#21,d0
 4156  0000239C  65xx                   	bcs.s	nodwnar


                                        src/cdfront.s        Page 76      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4157                                   ;
 4158  0000239E  9079xxxxxxxx           	sub.w	gridoff,d0
 4159  000023A4  0C400015               	cmpi.w	#21,d0
 4160  000023A8  65xx                   	bcs.s	.skipdwn
 4161  000023AA  6100xxxx               	bsr	plantard	;down arrows
 4162                                   .skipdwn:
 4163  000023AE  4A79xxxxxxxx           	tst.w	gridoff
 4164  000023B4  67xx                   	beq.s	nodwnar
 4165  000023B6  6100xxxx               	bsr	plantaru	;do up arrows
 4166                                   nodwnar:
 4167                                   ;29-Mar-95	clr.w	gridoff		;grid offset is at top
 4168  000023BA  6100xxxx               	bsr	chngdisp
 4169  000023BE  4CDF213F               	movem.l	(sp)+,a0/a5/d0-d5
 4170  000023C2  4E75                   	rts	
 4171                                   ;
 4172                                   ;
 4173                                   ;
 4174                                   ;  Update track sequence display
 4175                                   ;
 4176                                   uprantrk:
 4177  000023C4  7803                   	moveq	#3,d4
 4178  000023C6  B879xxxxxxxx           	cmp.w	our_mode,d4
 4179  000023CC  66xx                   	bne.s	outuptrk	;skip if not in mode=3
 4180                                   
 4181  000023CE  4BF9xxxxxxxx           	lea	trkseq,a5
 4182  000023D4  DAF9xxxxxxxx           	adda.w	gridoff,a5
 4183                                   ;
 4184  000023DA  7813                   	moveq	#19,d4
 4185  000023DC  263C00008D00           	move.l	#gridbase+((rectv-13)*256),d3
 4186                                   ;
 4187  000023E2  7404                   	moveq	#4,d2
 4188                                   uptrker:
 4189  000023E4  7000                   	moveq	#0,d0
 4190  000023E6  101D                   	move.b	(a5)+,d0
 4191  000023E8  6700xxxx               	beq	uptrkx
 4192                                   ;
 4193  000023EC  0C0000FF               	cmpi.b	#-1,d0		;special way to get a zero thru
 4194  000023F0  66xx                   	bne.s	uptrxx
 4195  000023F2  7000                   	moveq	#0,d0
 4196                                   uptrxx:
 4197  000023F4  6100EEAC               	bsr	hex2bcd	
 4198  000023F8  720B                   	moveq	#$b,d1
 4199  000023FA  33C2xxxxxxxx           	move.w	d2,randtrk
 4200  00002400  0C00000A               	cmpi.b	#10,d0
 4201  00002404  64xx                   	bcc.s	uptrkr
 4202  00002406  04790002xxxxxxxx       	sub.w	#2,randtrk
 4203                                   uptrkr:
 4204  0000240E  6100xxxx               	bsr	gridigit
 4205  00002412  D47C0018               	add.w	#24,d2
 4206  00002416  0C44000A               	cmpi.w	#10,d4
 4207  0000241A  66xx                   	bne.s	not2ndr
 4208  0000241C  068300001E00           	addi.l	#30*256,d3
 4209  00002422  7404                   	moveq	#4,d2
 4210                                   not2ndr:
 4211  00002424  51CCFFBE               	dbra	d4,uptrker
 4212                                   outuptrk:


                                        src/cdfront.s        Page 77      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4213  00002428  4E75                   	rts
 4214                                   ;
 4215                                   ;  got some blanks to put in at the end..
 4216                                   ;
 4217                                   uptrkx:
 4218  0000242A  7A13                   	moveq	#19,d5
 4219  0000242C  9A44                   	sub.w	d4,d5
 4220                                   
 4221  0000242E  203C04040404           	move.l	#$04040404,d0		;fill data set for opaque black
 4222  00002434  363C0016               	move.w	#22,d3			;w
 4223                                   .blnklp:
 4224  00002438  3205                   	move.w	d5,d1
 4225  0000243A  343C001D               	move.w	#rectv+2,d2		;y assume top row
 4226  0000243E  0C45000A               	cmpi.w	#10,d5
 4227  00002442  65xx                   	bcs.s	.botrow
 4228  00002444  D47C001E               	add.w	#30,d2			;y
 4229  00002448  927C000A               	sub.w	#10,d1
 4230                                   .botrow:
 4231  0000244C  C2FC0018               	mulu	#24,d1
 4232  00002450  D27C0002               	add.w	#2,d1			;x
 4233  00002454  48E79C00               	movem.l	d0/d3-d5,-(sp)
 4234  00002458  383C001C               	move.w	#28,d4			;h
 4235  0000245C  6100xxxx               	bsr	fillbox			;clear buffer
 4236  00002460  4CDF0039               	movem.l	(sp)+,d0/d3-d5
 4237  00002464  5245                   	addq.w	#1,d5
 4238  00002466  51CCFFD0               	dbra	d4,.blnklp
 4239  0000246A  4E75                   	rts
 4240                                   ;
 4241                                   ;
 4242                                   ;
 4243                                   ;  d0 = fill data
 4244                                   ;  d1 = x
 4245                                   ;  d2 = y
 4246                                   ;  d3 = w
 4247                                   ;  d4 = h
 4248                                   ;
 4249                                   fillbox:
 4250  0000246C  2F05                   	move.l	d5,-(sp)
 4251  0000246E  41F900F02200           	lea	A1_BASE,a0
 4252                                   .bwait:
 4253  00002474  2A280038               	move.l	B_CMD-A1_BASE(a0),d5	;wait til blitter free
 4254  00002478  E24D                   	lsr.w	#1,d5
 4255  0000247A  64F8                   	bcc	.bwait
 4256                                   ;
 4257  0000247C  21400068               	move.l	d0,B_PATD-A1_BASE(a0)	;set pattern regs w/fill data
 4258  00002480  2140006C               	move.l	d0,B_PATD+4-A1_BASE(a0)
 4259                                   ;
 4260  00002484  20BC00007F00           	move.l	#gridbase,(a0)		;set DST base
 4261                                   ;
 4262  0000248A  217C000140180004       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A1_FLAGS-A1_BASE(a0)	;dst
 4263  00002492  3A02                   	move.w	d2,d5
 4264  00002494  4845                   	swap	d5
 4265  00002496  3A01                   	move.w	d1,d5
 4266  00002498  2145000C               	move.l	d5,A1_PIXEL-A1_BASE(a0)	;dst (y,x)
 4267                                   ;
 4268  0000249C  3A04                   	move.w	d4,d5


                                        src/cdfront.s        Page 78      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4269  0000249E  4845                   	swap	d5
 4270  000024A0  3A03                   	move.w	d3,d5
 4271  000024A2  2145003C               	move.l	d5,B_COUNT-A1_BASE(a0)		;h:xx, w:1
 4272  000024A6  7A00                   	moveq	#0,d5
 4273  000024A8  3A03                   	move.w	d3,d5
 4274  000024AA  4445                   	neg.w	d5
 4275  000024AC  08C50010               	bset.l	#16,d5
 4276  000024B0  21450010               	move.l	d5,A1_STEP-A1_BASE(a0)
 4277  000024B4  217C000102000038       	move.l	#PATDSEL|UPDA1,B_CMD-A1_BASE(a0)	;write opaque black
 4278  000024BC  2A1F                   	move.l	(sp)+,d5
 4279  000024BE  4E75                   	rts
 4280                                   ;
 4281                                   ;
 4282                                   ;
 4283                                   ;  Build some displayable arrows
 4284                                   ;
 4285                                   ;   16 bytes horz x 7 lines high
 4286                                   ;
 4287                                   arrbuild:
 4288  000024C0  41F9xxxxxxxx           	lea	arrowfrm,a0
 4289  000024C6  2A08                   	move.l	a0,d5
 4290  000024C8  DABC0000000C           	add.l	#12,d5
 4291  000024CE  0245FFF8               	andi.w	#~7,d5
 4292  000024D2  2085                   	move.l	d5,(a0)
 4293  000024D4  2045                   	move.l	d5,a0
 4294  000024D6  4BF9xxxxxxxx           	lea	uparrow,a5
 4295                                   ;
 4296  000024DC  7606                   	moveq	#6,d3
 4297                                   arcollp:
 4298  000024DE  201D                   	move.l	(a5)+,d0
 4299  000024E0  323C000F               	move.w	#15,d1		
 4300                                   arowlp:
 4301  000024E4  E598                   	rol.l	#2,d0
 4302  000024E6  2400                   	move.l	d0,d2
 4303  000024E8  02420003               	andi.w	#3,d2
 4304  000024EC  10FB20xx               	move.b	arrcol(pc,d2.w),(a0)+
 4305  000024F0  51C9FFF2               	dbra	d1,arowlp
 4306  000024F4  51CBFFE8               	dbra	d3,arcollp
 4307                                   ;
 4308  000024F8  2A48                   	move.l	a0,a5
 4309  000024FA  90FC0010               	suba.w	#16,a0
 4310  000024FE  7006                   	moveq	#6,d0
 4311                                   arup:
 4312  00002500  2AD8                   	move.l	(a0)+,(a5)+
 4313  00002502  2AD8                   	move.l	(a0)+,(a5)+
 4314  00002504  2AD8                   	move.l	(a0)+,(a5)+
 4315  00002506  2AD8                   	move.l	(a0)+,(a5)+
 4316  00002508  90FC0020               	suba.w	#32,a0
 4317  0000250C  51C8FFF2               	dbra	d0,arup
 4318                                   ;
 4319  00002510  4E75                   	rts
 4320                                   ;
 4321                                   ;
 4322                                   ;		trans,fg,n/a, black
 4323                                   arrcol:
 4324  00002512  00220004               	dc.b	0,$22,0,4


                                        src/cdfront.s        Page 79      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4325                                   ;
 4326                                   ;
 4327                                   ;		 v v v v v v v v v v v v v
 4328                                   uparrow:
 4329  00002516  00003000               	dc.l	%00000000000011000000000000
 4330  0000251A  0000DC00               	dc.l	%00000000001101110000000000
 4331  0000251E  00035700               	dc.l	%00000000110101011100000000
 4332  00002522  000D55C0               	dc.l	%00000011010101010111000000
 4333  00002526  00355570               	dc.l	%00001101010101010101110000
 4334  0000252A  00D5555C               	dc.l	%00110101010101010101011100
 4335  0000252E  03FFFFFF               	dc.l	%11111111111111111111111111
 4336                                   ;
 4337                                   ;  Turn off down arrows
 4338                                   ;
 4339                                   planoffd:
 4340  00002532  48E7F800               	movem.l	d0-d4,-(sp)
 4341  00002536  343C005A               	move.w	#rectv+63,d2		;y
 4342  0000253A  60xx                   	bra.s	filby
 4343                                   ;
 4344                                   ;  Turn off down arrows
 4345                                   ;
 4346                                   planoffu:
 4347  0000253C  48E7F800               	movem.l	d0-d4,-(sp)
 4348  00002540  343C0015               	move.w	#rectv-6,d2		;y
 4349                                   filby:
 4350  00002544  7000                   	moveq	#0,d0			;fill data set for transparent
 4351  00002546  323C0000               	move.w	#0,d1			;x
 4352  0000254A  363C0100               	move.w	#256,d3			;w
 4353  0000254E  383C0006               	move.w	#6,d4			;h
 4354  00002552  6100FF18               	bsr	fillbox
 4355  00002556  4CDF001F               	movem.l	(sp)+,d0-d4
 4356  0000255A  4E75                   	rts
 4357                                   ;
 4358                                   ;
 4359                                   plantard:
 4360  0000255C  303C005A               	move.w	#rectv+63,d0		;vert pos
 4361  00002560  243C00000080           	move.l	#8*16,d2
 4362  00002566  60xx                   	bra.s	plant	
 4363                                   ;
 4364                                   plantaru:
 4365  00002568  303C0015               	move.w	#rectv-6,d0		;vert pos
 4366  0000256C  7400                   	moveq	#0,d2
 4367                                   plant:
 4368  0000256E  4840                   	swap	d0
 4369  00002570  303C0005               	move.w	#5,d0
 4370  00002574  41F900F02200           	lea	A1_BASE,a0
 4371                                   .bwait:
 4372  0000257A  22280038               	move.l	B_CMD-A1_BASE(a0),d1	;wait til blitter free
 4373  0000257E  E249                   	lsr.w	#1,d1
 4374  00002580  64F8                   	bcc	.bwait
 4375                                   ;
 4376  00002582  47F9xxxxxxxx           	lea	arrowfrm,a3
 4377  00002588  D493                   	add.l	(a3),d2
 4378  0000258A  21420024               	move.l	d2,A2_BASE-A1_BASE(a0)		;set SRC base
 4379  0000258E  20BC00007F00           	move.l	#gridbase,(a0)			;set DST base
 4380                                   ;


                                        src/cdfront.s        Page 80      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4381  00002594  217C000120180028       	move.l	#PITCH1|WID16|XADDPIX|PIXEL8,A2_FLAGS-A1_BASE(a0)	;src
 4382  0000259C  217C000140180004       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A1_FLAGS-A1_BASE(a0)	;dst
 4383                                   ;
 4384  000025A4  7409                   	moveq	#9,d2
 4385                                   multar:
 4386  000025A6  217C000000000030       	move.l	#0,A2_PIXEL-A1_BASE(a0)		;src = (x,y)
 4387  000025AE  2140000C               	move.l	d0,A1_PIXEL-A1_BASE(a0)		;dst = (x,y)
 4388  000025B2  06400018               	addi.w	#$18,d0
 4389  000025B6  217C00060010003C       	move.l	#(6*$10000)+16,B_COUNT-A1_BASE(a0)	;h:xx, w:xx
 4390  000025BE  223C0001FFF0           	move.l	#2*$10000-16,d1
 4391  000025C4  21410010               	move.l	d1,A1_STEP-A1_BASE(a0)
 4392  000025C8  21410034               	move.l	d1,A2_STEP-A1_BASE(a0)
 4393  000025CC  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 4394                                   ;
 4395                                   .bwait1:
 4396  000025D4  22280038               	move.l	B_CMD-A1_BASE(a0),d1	;wait til blitter free
 4397  000025D8  E249                   	lsr.w	#1,d1
 4398  000025DA  64F8                   	bcc	.bwait1
 4399                                   ;
 4400  000025DC  51CAFFC8               	dbra	d2,multar
 4401  000025E0  4E75                   	rts
 4402                                   ;
 4403                                   ;====================================================================
 4404                                   ;
 4405                                   ringit:
 4406                                   ;
 4407                                   ;  test code
 4408  000025E2  3039xxxxxxxx           	move.w	m3row,d0
 4409  000025E8  0C400002               	cmpi.w	#2,d0
 4410  000025EC  66xx                   	bne.s	.ring0
 4411                                   .ringo:
 4412  000025EE  4AFC                   	illegal
 4413                                   .ring0:
 4414  000025F0  0C400005               	cmpi.w	#5,d0
 4415  000025F4  64F8                   	bcc	.ringo
 4416                                   ;
 4417  000025F6  7400                   	moveq	#0,d2
 4418  000025F8  143B00xx               	move.b	mcolx(pc,d0.w),d2
 4419  000025FC  B479xxxxxxxx           	cmp.w	m3col,d2
 4420  00002602  65EA                   	bcs	.ringo
 4421  00002604  6000xxxx               	bra	ring1
 4422                                   mcolx:
 4423  00002608  040200090900           	dc.b	4,2,0,9,9,0
 4424                                   ;
 4425                                   ring1:
 4426                                   ;
 4427                                   ;  end test
 4428                                   ;
 4429                                   ;
 4430  0000260E  41F900F02200           	lea	A1_BASE,a0
 4431                                   .bwait:
 4432  00002614  20280038               	move.l	B_CMD-A1_BASE(a0),d0	;wait til blitter free
 4433  00002618  E248                   	lsr.w	#1,d0
 4434  0000261A  64F8                   	bcc	.bwait
 4435                                   ;
 4436  0000261C  203C04040404           	move.l	#$04040404,d0


                                        src/cdfront.s        Page 81      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4437  00002622  4679xxxxxxxx           	not.w	blinkon
 4438  00002628  6Bxx                   	bmi.s	.blone
 4439  0000262A  70FF                   	move.l	#$ffffffff,d0
 4440                                   .blone:
 4441  0000262C  21400068               	move.l	d0,B_PATD-A1_BASE(a0)	;set pattern regs
 4442  00002630  2140006C               	move.l	d0,B_PATD+4-A1_BASE(a0)
 4443                                   ;
 4444  00002634  20BC00004000           	move.l	#frntbase,(a0)		;set DST base
 4445                                   ;
 4446  0000263A  217C000140180004       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A1_FLAGS-A1_BASE(a0)	;dst
 4447                                   ;
 4448  00002642  3039xxxxxxxx           	move.w	m3row,d0		;check row
 4449  00002648  0C400002               	cmpi.w	#2,d0
 4450  0000264C  65xx                   	bcs.s	.uppr
 4451  0000264E  67xx                   	beq.s	.selbox
 4452                                   ;
 4453                                   ;  on track grid
 4454                                   ;
 4455  00002650  7006                   	moveq	#6,d0
 4456  00002652  D079xxxxxxxx           	add.w	m3col,d0
 4457  00002658  60xx                   	bra.s	.tgrid
 4458                                   .selbox:
 4459  0000265A  203C00140018           	move.l	#20*$10000+24,d0
 4460  00002660  60xx                   	bra.s	.selboxy
 4461                                   .uppr:
 4462  00002662  E948                   	lsl.w	#4,d0
 4463  00002664  8079xxxxxxxx           	or.w	m3col,d0
 4464                                   .tgrid:
 4465  0000266A  E548                   	lsl.w	#2,d0
 4466  0000266C  203B00xx               	move.l	DSTXW(pc,d0.w),d0	;get DST (x,w)
 4467                                   .selboxy:
 4468  00002670  3439xxxxxxxx           	move.w	m3row,d2
 4469  00002676  E54A                   	lsl.w	#2,d2
 4470  00002678  243B20xx               	move.l	DSTYH(pc,d2.w),d2
 4471                                   ;
 4472  0000267C  2602                   	move.l	d2,d3
 4473  0000267E  4840                   	swap	d0
 4474  00002680  3600                   	move.w	d0,d3			;d3 = (y,x)
 4475  00002682  4840                   	swap	d0
 4476  00002684  4842                   	swap	d2
 4477  00002686  3400                   	move.w	d0,d2			;d2 = (h,w)
 4478  00002688  60xx                   	bra.s	owdata
 4479                                   ;
 4480           =00000011               butseq	equ	24-7
 4481           =00000056               butrept	equ	93-7
 4482           =000000AD               butcdg	equ	180-7	
 4483                                   ;
 4484                                   ;butseq	equ	24
 4485                                   ;butrept	equ	93
 4486                                   ;butcdg	equ	180	
 4487                                   ;
 4488                                   ;  Dst xpos,width
 4489                                   ;
 4490                                   DSTXW:
 4491  0000268A  0046001D               	dc.w	70,29	;0 play
 4492  0000268E  00630027               	dc.w	99,39	;1 FF


                                        src/cdfront.s        Page 82      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4493  00002692  008A001F               	dc.w	138,31	;2 pause
 4494  00002696  0002001E               	dc.w	2,30	;3 stop
 4495  0000269A  00200026               	dc.w	32,38	;4 Rew
 4496  0000269E  00000000               	dc.w	0,0
 4497                                   ;
 4498  000026A2  00020016               	dc.w	(0*24)+2,22	;bottom row (trk grid)
 4499  000026A6  001A0016               	dc.w	(1*24)+2,22
 4500  000026AA  00320016               	dc.w	(2*24)+2,22
 4501  000026AE  004A0016               	dc.w	(3*24)+2,22
 4502  000026B2  00620016               	dc.w	(4*24)+2,22
 4503  000026B6  007A0016               	dc.w	(5*24)+2,22
 4504  000026BA  00920016               	dc.w	(6*24)+2,22
 4505  000026BE  00AA0016               	dc.w	(7*24)+2,22
 4506  000026C2  00C20016               	dc.w	(8*24)+2,22
 4507  000026C6  00DA0016               	dc.w	(9*24)+2,22
 4508                                   ;
 4509  000026CA  00140032               	dc.w	butseq+3,56-6	
 4510  000026CE  00590043               	dc.w	butrept+3,73-6
 4511  000026D2  00B00032               	dc.w	butcdg+3,56-6
 4512                                   ;
 4513                                   ;
 4514                                   DSTYH:
 4515  000026D6  000E0020               	dc.l	(14*$10000)+32		;get DST (y,h) constants
 4516                                   ;	dc.l	(57*$10000)+17-4
 4517                                   ;	dc.l	(60*$10000)+17-4
 4518  000026DA  0041000D               	dc.l	((frnthite+2)*$10000)+17-4
 4519                                   
 4520  000026DE  00000000               	dc.l	0	
 4521  000026E2  005C001D               	dc.l	((frnthite+rectv+2)*$10000)+29
 4522  000026E6  007A001D               	dc.l	((frnthite+rectv+32)*$10000)+29
 4523                                   ;
 4524                                   ;
 4525                                   owdata:
 4526  000026EA  2143000C               	move.l	d3,A1_PIXEL-A1_BASE(a0)	;dst (y,x)
 4527  000026EE  2002                   	move.l	d2,d0			;dst (h,w)
 4528  000026F0  303C0001               	move.w	#1,d0
 4529                                   ;
 4530  000026F4  2140003C               	move.l	d0,B_COUNT-A1_BASE(a0)	;h:xx, w:1
 4531  000026F8  48C0                   	ext.l	d0
 4532  000026FA  4440                   	neg.w	d0
 4533  000026FC  08C00010               	bset.l	#16,d0
 4534  00002700  21400010               	move.l	d0,A1_STEP-A1_BASE(a0)
 4535                                   
 4536  00002704  217C000102000038       	move.l	#PATDSEL|UPDA1,B_CMD-A1_BASE(a0)
 4537                                   ;	
 4538                                   .bwait1:
 4539  0000270C  20280038               	move.l	B_CMD-A1_BASE(a0),d0	;wait til blitter free
 4540  00002710  E248                   	lsr.w	#1,d0
 4541  00002712  64F8                   	bcc	.bwait1
 4542                                   ;
 4543  00002714  2143000C               	move.l	d3,A1_PIXEL-A1_BASE(a0)	;dst (y,x)
 4544  00002718  2002                   	move.l	d2,d0			;dst (h,w)
 4545  0000271A  48C0                   	ext.l	d0
 4546  0000271C  08C00010               	bset.l	#16,d0
 4547                                   ;
 4548  00002720  2140003C               	move.l	d0,B_COUNT-A1_BASE(a0)	;h:1, w:xx


                                        src/cdfront.s        Page 83      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4549  00002724  48C0                   	ext.l	d0
 4550  00002726  4440                   	neg.w	d0
 4551  00002728  08C00010               	bset.l	#16,d0
 4552  0000272C  21400010               	move.l	d0,A1_STEP-A1_BASE(a0)
 4553                                   
 4554  00002730  217C000102000038       	move.l	#PATDSEL|UPDA1,B_CMD-A1_BASE(a0)
 4555                                   ;	
 4556                                   .bwait2:
 4557  00002738  20280038               	move.l	B_CMD-A1_BASE(a0),d0	;wait til blitter free
 4558  0000273C  E248                   	lsr.w	#1,d0
 4559  0000273E  64F8                   	bcc	.bwait2
 4560                                   ;
 4561  00002740  4843                   	swap	d3
 4562  00002742  4842                   	swap	d2
 4563  00002744  D642                   	add.w	d2,d3
 4564  00002746  5343                   	subq.w	#1,d3
 4565  00002748  4843                   	swap	d3
 4566  0000274A  4842                   	swap	d2
 4567  0000274C  2143000C               	move.l	d3,A1_PIXEL-A1_BASE(a0)	;dst (y+h-1,x)
 4568  00002750  2002                   	move.l	d2,d0			;dst (h,w)
 4569  00002752  48C0                   	ext.l	d0
 4570  00002754  08C00010               	bset.l	#16,d0
 4571  00002758  2140003C               	move.l	d0,B_COUNT-A1_BASE(a0)	;h:1, w:xx
 4572  0000275C  48C0                   	ext.l	d0
 4573  0000275E  4440                   	neg.w	d0
 4574  00002760  08C00010               	bset.l	#16,d0
 4575  00002764  21400010               	move.l	d0,A1_STEP-A1_BASE(a0)
 4576                                   
 4577  00002768  217C000102000038       	move.l	#PATDSEL|UPDA1,B_CMD-A1_BASE(a0)
 4578                                   ;	
 4579                                   .bwait3:
 4580  00002770  20280038               	move.l	B_CMD-A1_BASE(a0),d0	;wait til blitter free
 4581  00002774  E248                   	lsr.w	#1,d0
 4582  00002776  64F8                   	bcc	.bwait3
 4583                                   ;
 4584  00002778  4842                   	swap	d2
 4585  0000277A  4843                   	swap	d3
 4586  0000277C  9642                   	sub.w	d2,d3
 4587  0000277E  D67C0001               	add.w	#1,d3
 4588  00002782  4842                   	swap	d2
 4589  00002784  4843                   	swap	d3
 4590  00002786  D642                   	add.w	d2,d3
 4591  00002788  5343                   	subq.w	#1,d3
 4592  0000278A  2143000C               	move.l	d3,A1_PIXEL-A1_BASE(a0)	;dst (y,x+w-1)
 4593  0000278E  2002                   	move.l	d2,d0			;dst (h,w)
 4594  00002790  303C0001               	move.w	#1,d0
 4595  00002794  2140003C               	move.l	d0,B_COUNT-A1_BASE(a0)	;h:1, w:xx
 4596  00002798  48C0                   	ext.l	d0
 4597  0000279A  4440                   	neg.w	d0
 4598  0000279C  08C00010               	bset.l	#16,d0
 4599  000027A0  21400010               	move.l	d0,A1_STEP-A1_BASE(a0)
 4600                                   
 4601  000027A4  217C000102000038       	move.l	#PATDSEL|UPDA1,B_CMD-A1_BASE(a0)
 4602                                   ;
 4603  000027AC  4E75                   	rts
 4604                                   ;


                                        src/cdfront.s        Page 84      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4605                                   ;
 4606                                   ;
 4607                                   ;
 4608                                   ;   call this to put up stop display (max track, max time)
 4609                                   ;
 4610                                   stopout:
 4611  000027AE  3039xxxxxxxx           	move.w	maxmin,d0
 4612  000027B4  024000FF               	andi.w	#$ff,d0
 4613  000027B8  6100EAE8               	bsr	hex2bcd
 4614  000027BC  7201                   	moveq	#1,d1
 4615  000027BE  6100xxxx               	bsr	printout	;put up max track
 4616                                   ;
 4617  000027C2  7000                   	moveq	#0,d0
 4618  000027C4  1039xxxxxxxx           	move.b	fineEND+1,d0	;put up max mins
 4619  000027CA  7203                   	moveq	#3,d1
 4620  000027CC  6100xxxx               	bsr	printout
 4621                                   ;
 4622  000027D0  7000                   	moveq	#0,d0
 4623  000027D2  1039xxxxxxxx           	move.b	fineEND+2,d0	;put up max secs
 4624  000027D8  7204                   	moveq	#4,d1
 4625  000027DA  6100xxxx               	bsr	printout
 4626  000027DE  4E75                   	rts
 4627                                   ;
 4628                                   ;
 4629                                   ;
 4630                                   ;
 4631                                   ;
 4632                                   ;
 4633                                   ;  Raise or Lower volume one tick based on Ubit set in d2.l
 4634                                   ;    if set, raise volume, else lower
 4635                                   ;    uses d0.l & d1.l
 4636                                   ;
 4637                                   volupdwn:
 4638  000027E0  4279xxxxxxxx           	clr.w	voltimr		;we were already on
 4639  000027E6  7018                   	moveq	#24,d0
 4640  000027E8  08020014               	btst.l	#Ubit,d2
 4641  000027EC  66xx                   	bne.s	ud1
 4642  000027EE  4480                   	neg.l	d0
 4643                                   ud1:
 4644  000027F0  D1B9001AE1D8           	add.l	d0,davesobj+$90
 4645  000027F6  7000                   	moveq	#0,d0
 4646  000027F8  3039xxxxxxxx           	move.w	volptr,d0
 4647  000027FE  5240                   	addq.w	#1,d0
 4648  00002800  08020014               	btst.l	#Ubit,d2
 4649  00002804  66xx                   	bne.s	weup
 4650  00002806  5540                   	subq.w	#2,d0
 4651  00002808  6Axx                   	bpl.s	weup
 4652  0000280A  7000                   	moveq	#0,d0
 4653                                   weup:
 4654  0000280C  0C400041               	cmpi.w	#65,d0
 4655  00002810  65xx                   	bcs.s	not2hi
 4656  00002812  7040                   	moveq	#64,d0
 4657                                   not2hi:
 4658  00002814  33C0xxxxxxxx           	move.w	d0,volptr
 4659  0000281A  41F9xxxxxxxx           	lea	voltab,a0
 4660  00002820  D040                   	add.w	d0,d0


                                        src/cdfront.s        Page 85      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4661  00002822  7200                   	moveq	#0,d1
 4662  00002824  32300000               	move.w	(a0,d0.w),d1
 4663  00002828  23C100F1BE04           	move.l	d1,VOLUME
 4664  0000282E  C0FC000C               	mulu	#12,d0
 4665  00002832  D0BC00012000           	add.l	#VOLbar,d0
 4666  00002838  23C0001AE1D8           	move.l	d0,davesobj+$90
 4667  0000283E  6100xxxx               	bsr	chngdisp
 4668  00002842  4E75                   	rts
 4669                                   ;
 4670                                   ;  Entry point to put in Bank/Effect or cd+g Channel # on rmw digit screen
 4671                                   ;
 4672                                   ;   Put out the bank & effect
 4673                                   ;
 4674                                   bankout:
 4675  00002844  48E7F844               	movem.l	d0-d4/a1/a5,-(sp)
 4676  00002848  4BF84000               	lea	frntbase,a5		;base address of dst form		
 4677  0000284C  3439xxxxxxxx           	move.w	our_mode,d2		;check mode 1st
 4678  00002852  0C420002               	cmpi.w	#2,d2			;only rmw-digit mode
 4679  00002856  6600xxxx               	bne	printx
 4680                                   ;
 4681  0000285A  4A79xxxxxxxx           	tst.w	cdgmode			;are we in cd+g mode?
 4682  00002860  67xx                   	beq.s	banko			;br if not
 4683                                   ;
 4684  00002862  7000                   	moveq	#0,d0
 4685  00002864  1039xxxxxxxx           	move.b	TvChnlNo,d0		;else, put up the cd+g channel #
 4686  0000286A  0C40000A               	cmpi.w	#10,d0			;convert binary nibble to bcd
 4687  0000286E  65xx                   	bcs.s	cdgbcd
 4688  00002870  0440000A               	subi.w	#10,d0
 4689  00002874  06400010               	addi.w	#$10,d0
 4690                                   cdgbcd:
 4691  00002878  7205                   	moveq	#5,d1
 4692  0000287A  780A                   	moveq	#10,d4	
 4693  0000287C  60xx                   	bra.s	blnumb
 4694                                   banko:
 4695  0000287E  3839xxxxxxxx           	move.w	disbank,d4
 4696  00002884  5244                   	addq.w	#1,d4
 4697  00002886  0244000F               	andi.w	#$f,d4
 4698  0000288A  E94C                   	lsl.w	#4,d4
 4699  0000288C  3039xxxxxxxx           	move.w	diseff,d0
 4700  00002892  0240000F               	andi.w	#$f,d0
 4701  00002896  8044                   	or.w	d4,d0
 4702  00002898  7200                   	moveq	#0,d1
 4703                                   
 4704  0000289A  7811                   	moveq	#17,d4			;digit spacing
 4705  0000289C  60xx                   	bra.s	blnumb
 4706                                   ;
 4707                                   ;  Entry point for putting track digits in Random/Program grid
 4708                                   ;
 4709                                   ;  d0.b = bcd to print
 4710                                   ;  d1   = offset in subcodes (if odd, do leading zero suppression)
 4711                                   ;
 4712                                   gridigit:
 4713  0000289E  48E7F844               	movem.l	d0-d4/a1/a5,-(sp)
 4714  000028A2  41F9xxxxxxxx           	lea	trkseq+1,a0
 4715  000028A8  D0F9xxxxxxxx           	adda.w	trksptr,a0
 4716  000028AE  43F900061000           	lea	$61000,a1		;use lite green


                                        src/cdfront.s        Page 86      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4717  000028B4  BBC8                   	cmp.l	a0,a5
 4718  000028B6  66xx                   	bne.s	.grf
 4719  000028B8  4A79xxxxxxxx           	tst.w	play			;are we in play mode?
 4720  000028BE  67xx                   	beq.s	.grf			;br if not
 4721  000028C0  43F900060000           	lea	$60000,a1		;use standard green
 4722                                   .grf:
 4723  000028C6  2A43                   	move.l	d3,a5
 4724  000028C8  60xx                   	bra.s	pox
 4725                                   ;
 4726                                   ;  Entry point for putting track/min/sec digits in trk/time display
 4727                                   ;
 4728                                   ;  d0.b = bcd to print
 4729                                   ;  d1   = offset in subcodes (if odd, do leading zero suppression)
 4730                                   ;
 4731                                   ;	
 4732                                   printout:
 4733  000028CA  48E7F844               	movem.l	d0-d4/a1/a5,-(sp)
 4734  000028CE  4BF84000               	lea	frntbase,a5		;base address of dst form		
 4735  000028D2  43F900060000           	lea	$60000,a1		;use standard green
 4736                                   pox:
 4737  000028D8  780A                   	moveq	#10,d4			;digit spacing
 4738                                   ;
 4739                                   ;	move.w	our_mode,d2		;check mode 1st
 4740                                   ;	beq	printx
 4741                                   ;
 4742  000028DA  4A79xxxxxxxx           	tst.w	our_mode
 4743  000028E0  6700xxxx               	beq	printx
 4744                                   ;
 4745  000028E4  60xx                   	bra.s	blnumbb
 4746                                   ;
 4747                                   ; blit up the numbers
 4748                                   ;
 4749                                   blnumb:
 4750  000028E6  43F900060000           	lea	$60000,a1
 4751                                   blnumbb:	
 4752  000028EC  08010000               	btst.l	#0,d1
 4753  000028F0  67xx                   	beq.s	prinx
 4754  000028F2  B03C000A               	cmp.b	#10,d0
 4755  000028F6  64xx                   	bcc.s	prinx
 4756  000028F8  803C00A0               	or.b	#$a0,d0
 4757                                   prinx:
 4758  000028FC  E349                   	lsl.w	#1,d1
 4759  000028FE  323B10xx               	move.w	offline(pc,d1.w),d1	;get dst xpos
 4760  00002902  6700xxxx               	beq	printx
 4761                                   ;
 4762  00002906  4841                   	swap	d1			;dst in high word
 4763  00002908  41F900F02200           	lea	A1_BASE,a0
 4764                                   ;
 4765  0000290E  7601                   	moveq	#1,d3
 4766                                   reblit:
 4767  00002910  E818                   	ror.b	#4,d0
 4768  00002912  323C0000               	move.w	#0,d1
 4769  00002916  1200                   	move.b	d0,d1
 4770  00002918  0241000F               	andi.w	#$f,d1
 4771  0000291C  D241                   	add.w	d1,d1
 4772  0000291E  323B10xx               	move.w	srcxtab(pc,d1.w),d1	;d1 = src xpos in lo word


                                        src/cdfront.s        Page 87      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4773  00002922  60xx                   	bra.s	pout
 4774                                   ;
 4775                                   ;	
 4776           =00000000               sbasex	equ	0
 4777           =0000000A               swid	equ	10
 4778           =0000000A               swidx	equ	10
 4779           =00000011               shite	equ	17
 4780                                   ;
 4781                                   ;
 4782                                   ;
 4783                                   srcxtab:
 4784  00002924  0003                   	dc.w	3		;0
 4785  00002926  000B                   	dc.w	$b		;1
 4786  00002928  0015                   	dc.w	$15		;2
 4787  0000292A  001E                   	dc.w	$1e		;3
 4788  0000292C  0029                   	dc.w	$29		;4
 4789  0000292E  0033                   	dc.w	$33		;5
 4790  00002930  003D                   	dc.w	$3d		;6
 4791  00002932  0046                   	dc.w	$46		;7
 4792  00002934  0050                   	dc.w	$50		;8
 4793  00002936  005A                   	dc.w	$5a		;9
 4794  00002938  0064                   	dc.w	$64		;<sp>
 4795                                   ;
 4796                                   ;   DST xpos
 4797                                   ;
 4798                                   offline:
 4799                                   ;
 4800                                   ;
 4801  0000293A  0022                   	dc.w	34	;0 Cont/Adr (bank/effect xpos)
 4802  0000293C  00AD                   	dc.w	173	;1 TNO
 4803  0000293E  0000                   	dc.w	0	;2 Index
 4804  00002940  00CD                   	dc.w	205	;3 Min
 4805  00002942  00E7                   	dc.w	231	;4 Sec
 4806  00002944  001F                   	dc.w	31	;5 Frame (cd+g channel)
 4807  00002946  0000                   	dc.w	0	;6 Zero
 4808  00002948  0000                   	dc.w	0	;7 Amin
 4809  0000294A  0000                   	dc.w	0	;8 Asec
 4810                                   
 4811  0000294C  0000                   	dc.w	0	;9 Aframe
 4812  0000294E  0000                   	dc.w	0	;A CRC
 4813                                   randtrk:
 4814  00002950  0000                   	dc.w	0	;B CRC (track #'s in rand/prog grid)
 4815  00002952  0000                   	dc.w	0	;C
 4816  00002954  0000                   	dc.w	0	;D
 4817  00002956  0000                   	dc.w	0	;E
 4818  00002958  0000                   	dc.w	0	;F
 4819                                   ;
 4820                                   pout:
 4821                                   ;
 4822                                   ;	lea	$60000,a1
 4823                                   bltloop:
 4824  0000295A  24280038               	move.l	B_CMD-A1_BASE(a0),d2	;wait til blitter free
 4825  0000295E  E24A                   	lsr.w	#1,d2
 4826  00002960  64F8                   	bcc	bltloop
 4827                                   
 4828  00002962  21490024               	move.l	a1,A2_BASE-A1_BASE(a0)	;set SRC base


                                        src/cdfront.s        Page 88      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4829  00002966  208D                   	move.l	a5,(a0)			;set DST base
 4830                                   ;
 4831  00002968  217C000138180028       	move.l	#PITCH1|WID128|XADDPIX|PIXEL8,A2_FLAGS-A1_BASE(a0)	;src
 4832  00002970  217C000140180004       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A1_FLAGS-A1_BASE(a0)	;dst
 4833                                   ;
 4834  00002978  7400                   	moveq	#0,d2		;ypos
 4835  0000297A  3401                   	move.w	d1,d2		;src y=0, x 
 4836  0000297C  21420030               	move.l	d2,A2_PIXEL-A1_BASE(a0)
 4837                                   ;
 4838  00002980  7416                   	moveq	#vertdig,d2		;ypos
 4839  00002982  4842                   	swap	d2
 4840  00002984  4841                   	swap	d1
 4841  00002986  3401                   	move.w	d1,d2		;dst y=0, x 
 4842  00002988  2142000C               	move.l	d2,A1_PIXEL-A1_BASE(a0)
 4843                                   ;
 4844  0000298C  217C0011000A003C       	move.l	#(17*$10000)+10,B_COUNT-A1_BASE(a0)	;w:10, h:17
 4845  00002994  243C0001FFF6           	move.l	#(2*$10000)-10,d2
 4846  0000299A  21420010               	move.l	d2,A1_STEP-A1_BASE(a0)
 4847  0000299E  21420034               	move.l	d2,A2_STEP-A1_BASE(a0)
 4848  000029A2  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 4849                                   ;
 4850  000029AA  D244                   	add.w	d4,d1		;advance dst x
 4851  000029AC  4841                   	swap	d1
 4852                                   
 4853  000029AE  51CBFF60               	dbra	d3,reblit
 4854                                   printx:
 4855  000029B2  4CDF221F               	movem.l	(sp)+,d0-d4/a1/a5
 4856  000029B6  4E75                   	rts
 4857                                   ;
 4858                                   ;
 4859                                   ;
 4860                                   bankneg:
 4861  000029B8  3439xxxxxxxx           	move.w	our_mode,d2		;check mode 1st
 4862  000029BE  0C420002               	cmpi.w	#2,d2			;only rmw-digit mode
 4863  000029C2  6700xxxx               	beq	bankneg0
 4864  000029C6  4E75                   	rts
 4865                                   bankneg0:
 4866  000029C8  41F900F02200           	lea	A1_BASE,a0
 4867  000029CE  323C002C               	move.w	#44,d1			;dst
 4868  000029D2  4841                   	swap	d1
 4869                                   ;	move.w	#112,d1			;src
 4870  000029D4  323C006F               	move.w	#111,d1			;src
 4871                                   ;
 4872                                   .blwait:
 4873  000029D8  24280038               	move.l	B_CMD-A1_BASE(a0),d2	;wait til blitter free
 4874  000029DC  E24A                   	lsr.w	#1,d2
 4875  000029DE  64F8                   	bcc	.blwait
 4876                                   
 4877  000029E0  217C000600000024       	move.l	#$60000,A2_BASE-A1_BASE(a0)	;set SRC base
 4878  000029E8  20BC00004000           	move.l	#frntbase,(a0)		;set DST base
 4879                                   
 4880  000029EE  217C000138180028       	move.l	#PITCH1|WID128|XADDPIX|PIXEL8,A2_FLAGS-A1_BASE(a0)	;src
 4881  000029F6  217C000140180004       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A1_FLAGS-A1_BASE(a0)	;dst
 4882                                   ;
 4883  000029FE  7400                   	moveq	#0,d2		;ypos
 4884  00002A00  3401                   	move.w	d1,d2		;src y=0, x 


                                        src/cdfront.s        Page 89      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4885  00002A02  21420030               	move.l	d2,A2_PIXEL-A1_BASE(a0)
 4886                                   ;
 4887  00002A06  7416                   	moveq	#vertdig,d2		;ypos
 4888  00002A08  4842                   	swap	d2
 4889  00002A0A  4841                   	swap	d1
 4890  00002A0C  3401                   	move.w	d1,d2		;dst y=0, x 
 4891  00002A0E  2142000C               	move.l	d2,A1_PIXEL-A1_BASE(a0)
 4892                                   ;
 4893  00002A12  217C00110007003C       	move.l	#(17*$10000)+7,B_COUNT-A1_BASE(a0)	;w:6, h:17
 4894  00002A1A  243C0001FFF9           	move.l	#(2*$10000)-7,d2
 4895  00002A20  21420010               	move.l	d2,A1_STEP-A1_BASE(a0)
 4896  00002A24  21420034               	move.l	d2,A2_STEP-A1_BASE(a0)
 4897  00002A28  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 4898  00002A30  4E75                   	rts
 4899                                   ;
 4900                                   ;
 4901                                   ;
 4902                                   ;
 4903           =000000E1               colona	equ	225
 4904                                   ;
 4905                                   colons:
 4906  00002A32  48E7F844               	movem.l	d0-d4/a1/a5,-(sp)
 4907  00002A36  41F900F02200           	lea	A1_BASE,a0
 4908  00002A3C  323C00E1               	move.w	#colona,d1			;dst
 4909  00002A40  4841                   	swap	d1
 4910  00002A42  323C0076               	move.w	#118,d1	;src
 4911                                   ;
 4912  00002A46  43F900060000           	lea	$60000,a1
 4913  00002A4C  7601                   	moveq	#1,d3
 4914                                   blwait:
 4915  00002A4E  24280038               	move.l	B_CMD-A1_BASE(a0),d2	;wait til blitter free
 4916  00002A52  E24A                   	lsr.w	#1,d2
 4917  00002A54  64F8                   	bcc	blwait
 4918                                   
 4919  00002A56  21490024               	move.l	a1,A2_BASE-A1_BASE(a0)	;set SRC base
 4920  00002A5A  20BC00004000           	move.l	#frntbase,(a0)		;set DST base
 4921                                   
 4922  00002A60  217C000138180028       	move.l	#PITCH1|WID128|XADDPIX|PIXEL8,A2_FLAGS-A1_BASE(a0)	;src
 4923  00002A68  217C000140180004       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A1_FLAGS-A1_BASE(a0)	;dst
 4924                                   ;
 4925  00002A70  7400                   	moveq	#0,d2		;ypos
 4926  00002A72  3401                   	move.w	d1,d2		;src y=0, x 
 4927  00002A74  21420030               	move.l	d2,A2_PIXEL-A1_BASE(a0)
 4928                                   ;
 4929  00002A78  7416                   	moveq	#vertdig,d2		;ypos
 4930  00002A7A  4842                   	swap	d2
 4931  00002A7C  4841                   	swap	d1
 4932  00002A7E  3401                   	move.w	d1,d2		;dst y=0, x 
 4933  00002A80  2142000C               	move.l	d2,A1_PIXEL-A1_BASE(a0)
 4934                                   ;
 4935  00002A84  217C00110006003C       	move.l	#(17*$10000)+6,B_COUNT-A1_BASE(a0)	;w:6, h:17
 4936  00002A8C  243C0001FFFA           	move.l	#(2*$10000)-6,d2
 4937  00002A92  21420010               	move.l	d2,A1_STEP-A1_BASE(a0)
 4938  00002A96  21420034               	move.l	d2,A2_STEP-A1_BASE(a0)
 4939  00002A9A  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 4940                                   ;


                                        src/cdfront.s        Page 90      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4941  00002AA2  4CDF221F               	movem.l	(sp)+,d0-d4/a1/a5
 4942  00002AA6  4E75                   	rts
 4943                                   ;
 4944                                   ;
 4945                                   ;
 4946                                   ;   Use blitter to zero maximum screen memory (@ $4000)..256x50
 4947                                   ;
 4948                                   screnclr:
 4949  00002AA8  48E78080               	movem.l	a0/d0,-(sp)
 4950  00002AAC  41F900F02200           	lea	A1_BASE,a0
 4951                                   .bwait:
 4952  00002AB2  20280038               	move.l	B_CMD-A1_BASE(a0),d0	;wait til blitter free
 4953  00002AB6  E248                   	lsr.w	#1,d0
 4954  00002AB8  64F8                   	bcc	.bwait
 4955                                   ;
 4956  00002ABA  7000                   	moveq	#0,d0
 4957  00002ABC  20BC00004000           	move.l	#frntbase,(a0)		;set DST base
 4958                                   ;
 4959  00002AC2  21400068               	move.l	d0,B_PATD-A1_BASE(a0)	;clear pattern regs
 4960  00002AC6  2140006C               	move.l	d0,B_PATD+4-A1_BASE(a0)
 4961                                   ;
 4962  00002ACA  2140000C               	move.l	d0,A1_PIXEL-A1_BASE(a0)		;start at top/left corner
 4963                                   
 4964  00002ACE  217C005A0100003C       	move.l	#((frnthite+rectv)*$10000)+256,B_COUNT-A1_BASE(a0)
 4965                                   
 4966  00002AD6  217C0001FF000010       	move.l	#(2*$10000)-256,A1_STEP-A1_BASE(a0)
 4967  00002ADE  217C000040180004       	move.l	#PITCH1|WID256|XADDPHR|PIXEL8,A1_FLAGS-A1_BASE(a0)
 4968  00002AE6  217C000102000038       	move.l	#PATDSEL|UPDA1,B_CMD-A1_BASE(a0)
 4969                                   ;
 4970                                   .bwait1:
 4971  00002AEE  20280038               	move.l	B_CMD-A1_BASE(a0),d0	;wait til blitter free
 4972  00002AF2  E248                   	lsr.w	#1,d0
 4973  00002AF4  64F8                   	bcc	.bwait1
 4974                                   ;
 4975  00002AF6  4CDF0101               	movem.l	(sp)+,a0/d0
 4976  00002AFA  4E75                   	rts
 4977                                   ;
 4978                                   ;
 4979                                   ;
 4980                                   ;
 4981                                   ;
 4982                                   ;
 4983                                   ;
 4984                                   ;
 4985                                   string:
 4986  00002AFC  3039xxxxxxxx           	move.w	track,d0
 4987  00002B02  6100E79E               	bsr	hex2bcd
 4988  00002B06  7201                   	moveq	#1,d1
 4989  00002B08  6100FDC0               	bsr	printout	
 4990                                   stringb:
 4991  00002B0C  2F09                   	move.l	a1,-(sp)
 4992  00002B0E  303C00AA               	move.w	#$aa,d0
 4993  00002B12  43F9xxxxxxxx           	lea	bxlist,a1
 4994                                   restn:
 4995  00002B18  7200                   	moveq	#0,d1
 4996  00002B1A  1219                   	move.b	(a1)+,d1


                                        src/cdfront.s        Page 91      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 4997  00002B1C  67xx                   	beq.s	stringx
 4998  00002B1E  6100FDAA               	bsr	printout
 4999  00002B22  60F4                   	bra	restn
 5000                                   stringx:
 5001  00002B24  225F                   	move.l	(sp)+,a1
 5002  00002B26  4E75                   	rts
 5003                                   ;
 5004                                   bxlist:
 5005  00002B28  030407080000           	dc.b	3,4,7,8,0,0
 5006                                   ;
 5007                                   ;
 5008                                   ;
 5009                                   ;
 5010                                   ;
 5011                                   ;
 5012                                   ;   Blit from cdpanin or cdpanout to front panel to effect push button
 5013                                   ;
 5014                                   ;  0 - RESET
 5015                                   ;  1 - REW
 5016                                   ;  2 - PLAY
 5017                                   ;  3 - FF
 5018                                   ;  4 - PAUSE
 5019                                   ;
 5020                                   ;   d0 = 0..4 for the various functions
 5021                                   ;   d1 = 0 for out, 1 for in
 5022                                   ;
 5023                                   ;pansrc:
 5024                                   ;	dc.l	cpanout
 5025                                   ;	dc.l	cpanin
 5026                                   ;
 5027                                   ;
 5028                                   panx:
 5029  00002B2E  0003                   	dc.w	3
 5030  00002B30  0021                   	dc.w	33
 5031  00002B32  0047                   	dc.w	71
 5032  00002B34  0064                   	dc.w	100
 5033  00002B36  008B                   	dc.w	139
 5034                                   panwid:
 5035  00002B38  001C                   	dc.w	28	
 5036  00002B3A  0024                   	dc.w	36
 5037  00002B3C  001B                   	dc.w	27
 5038  00002B3E  0025                   	dc.w	37
 5039  00002B40  001D                   	dc.w	29
 5040                                   ;
 5041                                   ;
 5042                                   depressd:
 5043  00002B42  3439xxxxxxxx           	move.w	our_mode,d2
 5044  00002B48  0C420002               	cmpi.w	#2,d2
 5045  00002B4C  66xx                   	bne.s	depresok
 5046  00002B4E  4E75                   	rts
 5047                                   depresok:
 5048  00002B50  343C0031               	move.w	#49,d2		;assume panel "IN" (SRC ypos)
 5049  00002B54  4A41                   	tst.w	d1
 5050  00002B56  66xx                   	bne.s	itspanin
 5051  00002B58  343C000F               	move.w	#15,d2		;else, its panel "OUT"
 5052                                   itspanin:


                                        src/cdfront.s        Page 92      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5053  00002B5C  4841                   	swap	d1
 5054  00002B5E  3202                   	move.w	d2,d1
 5055  00002B60  4841                   	swap	d1
 5056                                   ;
 5057  00002B62  47F9xxxxxxxx           	lea	onepage3,a3
 5058                                   ;
 5059  00002B68  41F900F02200           	lea	A1_BASE,a0
 5060  00002B6E  D040                   	add.w	d0,d0
 5061  00002B70  323B00BC               	move.w	panx(pc,d0.w),d1	;srcx, dstx in d1
 5062  00002B74  303B00C2               	move.w	panwid(pc,d0.w),d0	;width in d0	
 5063                                   .bwait:
 5064  00002B78  24280038               	move.l	B_CMD-A1_BASE(a0),d2	;wait til blitter free
 5065  00002B7C  E24A                   	lsr.w	#1,d2
 5066  00002B7E  64F8                   	bcc	.bwait
 5067                                   ;
 5068  00002B80  7400                   	moveq	#0,d2
 5069  00002B82  3413                   	move.w	(a3),d2
 5070  00002B84  D48B                   	add.l	a3,d2
 5071  00002B86  21420024               	move.l	d2,A2_BASE-A1_BASE(a0)	;set SRC base
 5072  00002B8A  20BC00004000           	move.l	#frntbase,(a0)		;set DST base
 5073                                   ;
 5074  00002B90  217C000140180028       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A2_FLAGS-A1_BASE(a0)	;src
 5075  00002B98  217C000140180004       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A1_FLAGS-A1_BASE(a0)	;dst
 5076                                   ;
 5077  00002BA0  21410030               	move.l	d1,A2_PIXEL-A1_BASE(a0)	;src = (0,0)
 5078  00002BA4  4841                   	swap	d1
 5079  00002BA6  323C000F               	move.w	#15,d1			;set srcy, dsty
 5080  00002BAA  4841                   	swap	d1
 5081  00002BAC  2141000C               	move.l	d1,A1_PIXEL-A1_BASE(a0)	;dst
 5082                                   ;
 5083  00002BB0  323C001E               	move.w	#30,d1
 5084  00002BB4  4841                   	swap	d1
 5085  00002BB6  3200                   	move.w	d0,d1
 5086  00002BB8  2141003C               	move.l	d1,B_COUNT-A1_BASE(a0)	;w:xx, h:31
 5087                                   ;
 5088  00002BBC  223C00020000           	move.l	#(2*$10000),d1
 5089  00002BC2  48C0                   	ext.l	d0
 5090  00002BC4  9280                   	sub.l	d0,d1
 5091  00002BC6  21410010               	move.l	d1,A1_STEP-A1_BASE(a0)
 5092  00002BCA  21410034               	move.l	d1,A2_STEP-A1_BASE(a0)
 5093  00002BCE  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 5094                                   ;
 5095  00002BD6  4E75                   	rts
 5096                                   ;
 5097                                   ;
 5098                                   ;
 5099                                   ;   put up a radio button
 5100                                   ;
 5101                                   ;
 5102                                   ;  d0.w = button #
 5103                                   ;  d1.w = 0 if normal, -1 if full button
 5104                                   ;
 5105                                   ;
 5106           =00000004               xadj	equ	4	;subtract from dstx,srcx for full
 5107           =00000005               yadj	equ	5	;subtract from dsty,srcy for full
 5108           =00000008               wadj	equ	8	;add to width for full


                                        src/cdfront.s        Page 93      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5109           =00000009               hadj	equ	9	;add to height for full
 5110                                   ;
 5111                                   ;
 5112                                   radiob:
 5113  00002BD8  7403                   	moveq	#3,d2
 5114  00002BDA  B479xxxxxxxx           	cmp.w	our_mode,d2
 5115  00002BE0  67xx                   	beq.s	radiok
 5116  00002BE2  4E75                   	rts
 5117                                   ;
 5118                                   ;
 5119                                   ;
 5120                                   ;
 5121                                   ; Butn#
 5122                                   ;		srcx	srcy	dstx	dsty	wid	hite
 5123                                   ; 0 - program	0	82	24	55	56	17
 5124                                   ; 1 - normal	64	82	24	55	56	17
 5125                                   ; 2 - random	128	82	24	55	56	17
 5126                                   ; 3 - 
 5127                                   ;
 5128                                   ; 4 - rept trk	176	48	100	55	73	17
 5129                                   ; 5 - no rept	176	65	100	55	73	17
 5130                                   ;
 5131                                   bsrcx:
 5132  00002BE4  00AA                   	dc.w	170	;0 program (sequence mode)
 5133  00002BE6  0004                   	dc.w	0+xadj	;1 normal
 5134  00002BE8  00AA                   	dc.w	170	;2 random
 5135  00002BEA  0000                   	dc.w	0	;3 n/a
 5136                                   ;
 5137  00002BEC  00B9                   	dc.w	185	;4 rep trk (repeat mode)
 5138  00002BEE  003B                   	dc.w	55+xadj	;5 no rep
 5139  00002BF0  00B9                   	dc.w	185	;6 rep disc
 5140  00002BF2  0000                   	dc.w	0	;7 n/a
 5141                                   ;
 5142  00002BF4  0085                   	dc.w	129+xadj ;8 vlm (vlm/cd+g mode)
 5143  00002BF6  00AA                   	dc.w	170	;9 cd+g
 5144                                   
 5145  00002BF8  008D                   	dc.w	129+xadj+8 ;a vlm-random (vlm/cd+g mode)
 5146                                   ;
 5147                                   ;
 5148                                   bsrcy:
 5149  00002BFA  0031                   	dc.w	49	;0 program (sequence mode)
 5150  00002BFC  0057                   	dc.w	82+yadj	;1 normal
 5151  00002BFE  003A                   	dc.w	58	;2 random
 5152  00002C00  0000                   	dc.w	0	;3 n/a
 5153                                   ;
 5154  00002C02  004C                   	dc.w	76	;4 rep trk (repeat mode)
 5155  00002C04  0057                   	dc.w	82+yadj	;5 no rep
 5156  00002C06  0055                   	dc.w	85	;6 rep disc
 5157  00002C08  0000                   	dc.w	0	;7 n/a
 5158                                   ;
 5159  00002C0A  0057                   	dc.w	82+yadj	;8 vlm (vlm/cd+g mode)
 5160  00002C0C  0043                   	dc.w	67	;9 cd+g
 5161                                   ;
 5162  00002C0E  0057                   	dc.w	82+yadj	;A vlm-random (vlm/cd+g mode)
 5163                                   ;
 5164                                   bdstx:


                                        src/cdfront.s        Page 94      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5165  00002C10  0015005A00B1           	dc.w	butseq+xadj,butrept+xadj,butcdg+xadj
 5166                                   bdsty:
 5167                                   ;	dc.w	55+yadj,55+yadj,55+yadj
 5168                                   ;	dc.w	10+yadj,10+yadj,10+yadj
 5169  00002C16  000500050005           	dc.w	yadj,yadj,yadj
 5170                                   bwid:
 5171  00002C1C  003000410030           	dc.w	56-wadj,73-wadj,56-wadj
 5172                                   bhite:
 5173  00002C22  000800080008           	dc.w	17-hadj,17-hadj,17-hadj
 5174                                   ;
 5175                                   ;
 5176                                   radiok:
 5177  00002C28  47F9xxxxxxxx           	lea	onepage3,a3
 5178  00002C2E  7800                   	moveq	#0,d4			;assume no ch # to append
 5179  00002C30  0C400008               	cmpi.w	#8,d0			;are we cd+g with channels?
 5180  00002C34  65xx                   	bcs.s	.radb			;br if not
 5181  00002C36  66xx                   	bne.s	.radbx
 5182  00002C38  4A79xxxxxxxx           	tst.w	vlmrand
 5183  00002C3E  67xx                   	beq.s	.radb
 5184  00002C40  78FF                   	moveq	#-1,d4			;tell them post-processing for vlm R
 5185  00002C42  700A                   	moveq	#10,d0			;this is for vlm-random
 5186  00002C44  60xx                   	bra.s	.radb
 5187                                   .radbx:
 5188  00002C46  3800                   	move.w	d0,d4
 5189  00002C48  987C0008               	sub.w	#8,d4			;d4 = channel # to append
 5190  00002C4C  7009                   	moveq	#9,d0			;else, just set for ch 1
 5191                                   .radb:
 5192  00002C4E  41F900F02200           	lea	A1_BASE,a0
 5193  00002C54  D040                   	add.w	d0,d0
 5194                                   .bwait:
 5195  00002C56  24280038               	move.l	B_CMD-A1_BASE(a0),d2	;wait til blitter free
 5196  00002C5A  E24A                   	lsr.w	#1,d2
 5197  00002C5C  64F8                   	bcc	.bwait
 5198                                   ;
 5199  00002C5E  7400                   	moveq	#0,d2
 5200  00002C60  3413                   	move.w	(a3),d2
 5201  00002C62  D48B                   	add.l	a3,d2
 5202  00002C64  21420024               	move.l	d2,A2_BASE-A1_BASE(a0)	;set SRC base
 5203  00002C68  20BC00007F00           	move.l	#gridbase,(a0)		;set DST base
 5204                                   ;
 5205  00002C6E  47FAFF74               	lea	bsrcx(pc),a3
 5206                                   ;
 5207  00002C72  217C000140180028       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A2_FLAGS-A1_BASE(a0)	;src
 5208  00002C7A  217C000140180004       	move.l	#PITCH1|WID256|XADDPIX|PIXEL8,A1_FLAGS-A1_BASE(a0)	;dst
 5209                                   ;
 5210                                   
 5211  00002C82  36330016               	move.w	bsrcy-bsrcx(a3,d0.w),d3
 5212  00002C86  4843                   	swap	d3
 5213  00002C88  36330000               	move.w	bsrcx-bsrcx(a3,d0.w),d3
 5214  00002C8C  4A41                   	tst.w	d1
 5215  00002C8E  67xx                   	beq.s	.normsxy
 5216  00002C90  967C0004               	sub.w	#xadj,d3
 5217  00002C94  4843                   	swap	d3
 5218  00002C96  967C0005               	sub.w	#yadj,d3
 5219  00002C9A  4843                   	swap	d3
 5220                                   .normsxy:


                                        src/cdfront.s        Page 95      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5221  00002C9C  21430030               	move.l	d3,A2_PIXEL-A1_BASE(a0)	;src = (x,y)
 5222                                   ;
 5223  00002CA0  E648                   	lsr.w	#3,d0
 5224  00002CA2  D040                   	add.w	d0,d0
 5225                                   ;
 5226  00002CA4  36330032               	move.w	bdsty-bsrcx(a3,d0.w),d3
 5227  00002CA8  4843                   	swap	d3
 5228  00002CAA  3633002C               	move.w	bdstx-bsrcx(a3,d0.w),d3
 5229  00002CAE  4A41                   	tst.w	d1
 5230  00002CB0  67xx                   	beq.s	.normdxy
 5231  00002CB2  967C0004               	sub.w	#xadj,d3
 5232  00002CB6  4843                   	swap	d3
 5233  00002CB8  967C0005               	sub.w	#yadj,d3
 5234  00002CBC  4843                   	swap	d3
 5235                                   .normdxy:
 5236  00002CBE  2143000C               	move.l	d3,A1_PIXEL-A1_BASE(a0)	;dst = (x,y)
 5237                                   ;
 5238  00002CC2  3633003E               	move.w	bhite-bsrcx(a3,d0.w),d3
 5239  00002CC6  4843                   	swap	d3
 5240  00002CC8  36330038               	move.w	bwid-bsrcx(a3,d0.w),d3
 5241  00002CCC  4A41                   	tst.w	d1
 5242  00002CCE  67xx                   	beq.s	.normwh
 5243  00002CD0  D67C0008               	add.w	#wadj,d3
 5244  00002CD4  4843                   	swap	d3
 5245  00002CD6  D67C0009               	add.w	#hadj,d3
 5246  00002CDA  4843                   	swap	d3
 5247                                   .normwh:
 5248  00002CDC  2143003C               	move.l	d3,B_COUNT-A1_BASE(a0)	;h:xx, w:xx
 5249                                   ;
 5250  00002CE0  203C00020000           	move.l	#(2*$10000),d0
 5251  00002CE6  48C3                   	ext.l	d3
 5252  00002CE8  9083                   	sub.l	d3,d0
 5253  00002CEA  21400010               	move.l	d0,A1_STEP-A1_BASE(a0)
 5254  00002CEE  21400034               	move.l	d0,A2_STEP-A1_BASE(a0)
 5255  00002CF2  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 5256                                   ;
 5257  00002CFA  4A44                   	tst.w	d4
 5258  00002CFC  66xx                   	bne.s	appcha
 5259  00002CFE  4E75                   	rts
 5260                                   ;
 5261                                   ;  Append channel #, given in d4
 5262                                   ;
 5263                                   appcha:
 5264  00002D00  6B00xxxx               	bmi	appR		;br if we append vlm-random's "R"
 5265                                   ; 
 5266  00002D04  223C000500D2           	move.l	#(5*$10000)+butcdg+37,d1	;dst = (x,y)
 5267                                   .bwait:
 5268  00002D0A  24280038               	move.l	B_CMD-A1_BASE(a0),d2	;wait til blitter free
 5269  00002D0E  E24A                   	lsr.w	#1,d2
 5270  00002D10  64F8                   	bcc	.bwait
 5271                                   ;
 5272  00002D12  3604                   	move.w	d4,d3
 5273  00002D14  78FF                   	moveq	#-1,d4
 5274  00002D16  0C43000A               	cmpi.w	#10,d3			;>= 10?
 5275  00002D1A  65xx                   	bcs.s	.not10
 5276  00002D1C  0443000A               	subi.w	#10,d3


                                        src/cdfront.s        Page 96      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5277  00002D20  3803                   	move.w	d3,d4
 5278  00002D22  7601                   	moveq	#1,d3
 5279                                   .not10:
 5280  00002D24  C6FC0006               	mulu	#6,d3
 5281  00002D28  D67C00B9               	add.w	#185,d3
 5282  00002D2C  4843                   	swap	d3
 5283  00002D2E  363C005E               	move.w	#94,d3			;get srcy
 5284  00002D32  4843                   	swap	d3
 5285                                   ;
 5286  00002D34  21430030               	move.l	d3,A2_PIXEL-A1_BASE(a0)	;src = (x,y)
 5287  00002D38  2141000C               	move.l	d1,A1_PIXEL-A1_BASE(a0)	;dst = (x,y)
 5288  00002D3C  217C00080005003C       	move.l	#(8*$10000)+5,B_COUNT-A1_BASE(a0)	;h:xx, w:xx
 5289                                   ;
 5290  00002D44  203C0001FFFB           	move.l	#(2*$10000)-5,d0
 5291  00002D4A  21400010               	move.l	d0,A1_STEP-A1_BASE(a0)
 5292  00002D4E  21400034               	move.l	d0,A2_STEP-A1_BASE(a0)
 5293  00002D52  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 5294  00002D5A  5C81                   	addq.l	#6,d1
 5295  00002D5C  4A44                   	tst.w	d4
 5296  00002D5E  6AAA                   	bpl	.bwait
 5297  00002D60  4E75                   	rts
 5298                                   ;
 5299                                   ;  Append an "R" to the VLM message
 5300                                   ;
 5301                                   appR:
 5302                                   .bwait:
 5303  00002D62  24280038               	move.l	B_CMD-A1_BASE(a0),d2	;wait til blitter free
 5304  00002D66  E24A                   	lsr.w	#1,d2
 5305  00002D68  64F8                   	bcc	.bwait
 5306                                   ;
 5307  00002D6A  217C003A00AD0030       	move.l	#(58*$10000)+173,A2_PIXEL-A1_BASE(a0)	;src = (x,y)
 5308  00002D72  217C000500D2000C       	move.l	#(5*$10000)+butcdg+37,A1_PIXEL-A1_BASE(a0)	;dst = (x,y)
 5309  00002D7A  217C0008000A003C       	move.l	#(8*$10000)+10,B_COUNT-A1_BASE(a0)	;h:xx, w:xx
 5310                                   ;
 5311  00002D82  203C0001FFF6           	move.l	#(2*$10000)-10,d0
 5312  00002D88  21400010               	move.l	d0,A1_STEP-A1_BASE(a0)
 5313  00002D8C  21400034               	move.l	d0,A2_STEP-A1_BASE(a0)
 5314  00002D90  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 5315                                   
 5316                                   .bwaitx:
 5317  00002D98  24280038               	move.l	B_CMD-A1_BASE(a0),d2	;wait til blitter free
 5318  00002D9C  E24A                   	lsr.w	#1,d2
 5319  00002D9E  64F8                   	bcc	.bwaitx
 5320                                   ;
 5321  00002DA0  217C005700AB0030       	move.l	#((82+yadj)*$10000)+129+xadj+38,A2_PIXEL-A1_BASE(a0)	;src = (x,y)
 5322  00002DA8  217C000500DC000C       	move.l	#(5*$10000)+butcdg+47,A1_PIXEL-A1_BASE(a0)	;dst = (x,y)
 5323  00002DB0  217C00080005003C       	move.l	#(8*$10000)+5,B_COUNT-A1_BASE(a0)	;h:xx, w:xx
 5324                                   ;
 5325  00002DB8  203C0001FFFB           	move.l	#(2*$10000)-5,d0
 5326  00002DBE  21400010               	move.l	d0,A1_STEP-A1_BASE(a0)
 5327  00002DC2  21400034               	move.l	d0,A2_STEP-A1_BASE(a0)
 5328  00002DC6  217C018006090038       	move.l	#UPDA2|UPDA1|SRCEN|LFU_S|DSTEN,B_CMD-A1_BASE(a0)
 5329                                   ;
 5330  00002DCE  4E75                   	rts
 5331                                   
 5332                                   ;


                                        src/cdfront.s        Page 97      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5333                                   ;  Turn on help or turn it off
 5334                                   ;
 5335                                   onhelp:
 5336  00002DD0  7C06                   	moveq	#6,d6
 5337  00002DD2  60xx                   	bra.s	onffx
 5338                                   offhelp:
 5339  00002DD4  7CFF                   	moveq	#-1,d6
 5340                                   onffx:
 5341  00002DD6  7A01                   	moveq	#1,d5
 5342  00002DD8  BA79xxxxxxxx           	cmp.w	our_mode,d5
 5343  00002DDE  67xx                   	beq.s	onoffh
 5344  00002DE0  4E75                   	rts
 5345                                   onoffh:
 5346                                   ;	lea	cdstatus,a0
 5347                                   
 5348  00002DE2  41F9xxxxxxxx           	lea	onepage3,a0		;test
 5349                                   
 5350  00002DE8  7A00                   	moveq	#0,d5
 5351  00002DEA  3A10                   	move.w	(a0),d5
 5352  00002DEC  DA88                   	add.l	a0,d5
 5353  00002DEE  41F9001AE188           	lea	davesobj+$40,a0
 5354                                   ;
 5355  00002DF4  21450010               	move.l	d5,$10(a0)		;set new form
 5356                                   ;
 5357  00002DF8  30BC0042               	move.w	#$42,(a0)	;horz pos
 5358  00002DFC  317C00C80004           	move.w	#200,4(a0)	;vert pos
 5359                                   ;
 5360                                   ;	move.w	#28,$18(a0)	;DWIDTH
 5361                                   ;	move.w	#85,$1a(a0)	;height
 5362                                   ;
 5363  00002E02  317C00200018           	move.w	#32,$18(a0)	;DWIDTH
 5364  00002E08  317C006C001A           	move.w	#108,$1a(a0)	;height
 5365                                   
 5366  00002E0E  317C00010014           	move.w	#1,$14(a0)	;transparent
 5367  00002E14  3146000C               	move.w	d6,$c(a0)	;turn on/off
 5368  00002E18  4E75                   	rts
 5369                                   ;
 5370                                   ;----------------------------------------------------
 5371                                   ;
 5372                                   ;  Send command to DSA bus
 5373                                   ;   and receive 0,1 or multiple words in return
 5374                                   ;
 5375                                   ;	
 5376                                   ;
 5377                                   ;  entry:
 5378                                   ;    d0 = command code to send
 5379                                   ;    d1 = # of returned words expected
 5380                                   ;
 5381                                   ;    a3 -> buffer for returned words
 5382                                   ;
 5383                                   ;  exit:
 5384                                   ;    d2 = last of returned words
 5385                                   ;
 5386                                   ;
 5387                                   DSA_tx:
 5388  00002E1A  2F0B                   	move.l	a3,-(sp)


                                        src/cdfront.s        Page 98      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5389  00002E1C  47F9xxxxxxxx           	lea	return,a3
 5390  00002E22  2414                   	move.l	(a4),d2			;check receive buffer full
 5391  00002E24  0802000D               	btst.l	#13,d2
 5392  00002E28  6700xxxx               	beq	.txready		;br if receive buffer clear
 5393                                   ;
 5394  00002E2C  342C000A               	move.w	DS_DATA(a4),d2		;else, get bogus receive stuff
 5395  00002E30  4AAC0004               	tst.l	DSCNTRL(a4)		;read to clear interrupt flag
 5396                                   .txready:
 5397  00002E34  3940000A               	move.w	d0,DS_DATA(a4)		;send command word
 5398                                   .txwait:
 5399  00002E38  60xx                   	bra.s	.txcount		
 5400                                   .txwait1:
 5401  00002E3A  740F                   	moveq	#15,d2			;this delay helps
 5402                                   .txdelay0:
 5403  00002E3C  51CAFFFE               	dbra	d2,.txdelay0
 5404                                   ;
 5405  00002E40  2414                   	move.l	(a4),d2			;wait til receive buffer full
 5406  00002E42  0802000D               	btst.l	#13,d2
 5407  00002E46  67F2                   	beq	.txwait1
 5408                                   ;
 5409  00002E48  342C000A               	move.w	DS_DATA(a4),d2
 5410  00002E4C  36C2                   	move.w	d2,(a3)+		;get response, stuff in return buffer
 5411  00002E4E  4AAC0004               	tst.l	DSCNTRL(a4)		;read to clear interrupt flag
 5412                                   .txcount:
 5413  00002E52  51C9FFE6               	dbra	d1,.txwait1
 5414  00002E56  265F                   	move.l	(sp)+,a3
 5415                                   ;
 5416  00002E58  4E75                   	rts
 5417                                   ;
 5418                                   ;
 5419                                   ;  Build normal sequential track order
 5420                                   ;
 5421                                   buildseq:
 5422  00002E5A  3C39xxxxxxxx           	move.w	maxmin,d6
 5423  00002E60  3006                   	move.w	d6,d0
 5424  00002E62  E048                   	lsr.w	#8,d0			;starting track #
 5425  00002E64  024600FF               	andi.w	#$ff,d6			;max track #
 5426                                   ;
 5427  00002E68  41F9xxxxxxxx           	lea	trkseq,a0		;put in sequential track #'s
 5428  00002E6E  2648                   	move.l	a0,a3			;save for later
 5429                                   randlp:
 5430  00002E70  10C0                   	move.b	d0,(a0)+
 5431  00002E72  5240                   	addq.w	#1,d0
 5432  00002E74  B046                   	cmp.w	d6,d0
 5433  00002E76  63F8                   	bls	randlp
 5434  00002E78  4210                   	clr.b	(a0)			;put in a terminator
 5435                                   ;
 5436  00002E7A  4279xxxxxxxx           	clr.w	trksptr			;current track is 0th entry
 5437  00002E80  4E75                   	rts
 5438                                   ;
 5439                                   ;  Build normal sequential track order for user programmable sequence too
 5440                                   ;
 5441                                   bildprog:
 5442  00002E82  3C39xxxxxxxx           	move.w	maxmin,d6
 5443  00002E88  3006                   	move.w	d6,d0
 5444  00002E8A  E048                   	lsr.w	#8,d0			;starting track #


                                        src/cdfront.s        Page 99      5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5445  00002E8C  024600FF               	andi.w	#$ff,d6			;max track #
 5446                                   ;
 5447  00002E90  41F9xxxxxxxx           	lea	progseq,a0		;put in sequential track #'s
 5448  00002E96  2648                   	move.l	a0,a3			;save for later
 5449                                   proglp:
 5450  00002E98  10C0                   	move.b	d0,(a0)+
 5451  00002E9A  5240                   	addq.w	#1,d0
 5452  00002E9C  B046                   	cmp.w	d6,d0
 5453  00002E9E  63F8                   	bls	proglp
 5454  00002EA0  4210                   	clr.b	(a0)			;put in a terminator
 5455                                   ;
 5456  00002EA2  4E75                   	rts
 5457                                   ;
 5458                                   ;
 5459                                   ;   Build a shuffle track sequence from a random function
 5460                                   ;
 5461                                   ;
 5462                                   randf:
 5463  00002EA4  61B4                   	bsr	buildseq
 5464  00002EA6  4A46                   	tst.w	d6		;0 tracks are possible in extern mode
 5465  00002EA8  66xx                   	bne.s	randy
 5466  00002EAA  4E75                   	rts
 5467                                   randy:
 5468                                   ;
 5469                                   ;   now, shuffle these tracks
 5470                                   ;	
 5471                                   ;  The following random generator provides exactly the same
 5472                                   ;   results as Landon Dyer's version in the ST extended BIOS.
 5473                                   ;
 5474  00002EAC  4CFA0003xxxx           	movem.l	seed(pc),d0-d1		;get seed & constant
 5475                                   randloop:
 5476  00002EB2  7400                   	moveq	#0,d2		;clear neg flag
 5477                                   rerand:
 5478  00002EB4  4A80                   	tst.l	d0		;check seed
 5479  00002EB6  6Exx                   	bgt.s	ov		;br if pos, non-zero (seed ok)
 5480  00002EB8  66xx                   	bne.s	ovx		;br if neg, non-zero (need positive)
 5481                                   ;
 5482                                   ;  we have a zero seed--can't let this happen
 5483                                   ;
 5484  00002EBA  3039001AE4D2           	move.w	frames,d0
 5485  00002EC0  4840                   	swap	d0
 5486  00002EC2  3039001AE4D2           	move.w	frames,d0
 5487  00002EC8  4640                   	not.w	d0
 5488  00002ECA  60E8                   	bra	rerand		;guaranteed non-zero now		
 5489                                   ovx:
 5490  00002ECC  4480                   	neg.l	d0		;make positive
 5491  00002ECE  5242                   	addq	#1,d2		;set neg flag
 5492                                   ov:
 5493  00002ED0  2600                   	move.l	d0,d3
 5494  00002ED2  C6C1                   	mulu	d1,d3
 5495                                   ;
 5496  00002ED4  2800                   	move.l	d0,d4
 5497  00002ED6  4844                   	swap	d4
 5498  00002ED8  C8C1                   	mulu	d1,d4
 5499                                   ;
 5500  00002EDA  2A01                   	move.l	d1,d5


                                        src/cdfront.s        Page 100     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5501  00002EDC  4845                   	swap	d5
 5502  00002EDE  C0C5                   	mulu	d5,d0
 5503                                   ;
 5504  00002EE0  D044                   	add.w	d4,d0
 5505  00002EE2  4840                   	swap	d0
 5506  00002EE4  4240                   	clr.w	d0
 5507  00002EE6  D083                   	add.l	d3,d0
 5508  00002EE8  4A42                   	tst.w	d2
 5509  00002EEA  66xx                   	bne.s	ov1
 5510  00002EEC  4480                   	neg.l	d0
 5511                                   ov1:
 5512  00002EEE  5280                   	addq.l	#1,d0
 5513  00002EF0  2A00                   	move.l	d0,d5
 5514  00002EF2  E08D                   	lsr.l	#8,d5
 5515  00002EF4  E68D                   	lsr.l	#3,d5
 5516  00002EF6  4845                   	swap	d5
 5517  00002EF8  4245                   	clr.w	d5
 5518  00002EFA  4845                   	swap	d5
 5519                                   ;
 5520  00002EFC  8AC6                   	divu	d6,d5
 5521  00002EFE  4845                   	swap	d5
 5522  00002F00  18335000               	move.b	(a3,d5.w),d4
 5523  00002F04  17935000               	move.b	(a3),(a3,d5.w)
 5524  00002F08  16C4                   	move.b	d4,(a3)+
 5525  00002F0A  5346                   	subq.w	#1,d6
 5526  00002F0C  0C460001               	cmpi.w	#1,d6
 5527                                   ;
 5528                                   ;	bne	randloop
 5529  00002F10  62A0                   	bhi	randloop	;**29-Mar-95 because we can have 1 trk CD's
 5530                                   ;
 5531  00002F12  23C0xxxxxxxx           	move.l	d0,seed		;save seed for next time
 5532                                   ;
 5533  00002F18  7000                   	moveq	#0,d0
 5534  00002F1A  4A79xxxxxxxx           	tst.w	play		;are we playing?
 5535  00002F20  67xx                   	beq.s	trkplay		;br if not--just start at beginning
 5536                                   ;
 5537                                   ;  We're playing--we need to find track we're on in sequence
 5538                                   ;
 5539                                   ;  on exit, d2 = -1 means we can't find
 5540                                   trkptrfx:
 5541  00002F22  7000                   	moveq	#0,d0
 5542  00002F24  41F9xxxxxxxx           	lea	trkseq,a0
 5543  00002F2A  3239xxxxxxxx           	move.w	track,d1
 5544  00002F30  67xx                   	beq.s	trkplay
 5545                                   ;******added 22-Jan-95
 5546                                   ;
 5547  00002F32  3039xxxxxxxx           	move.w	trksptr,d0
 5548  00002F38  B079xxxxxxxx           	cmp.w	gridsize,d0
 5549  00002F3E  64xx                   	bcc.s	cantuse
 5550  00002F40  B2300000               	cmp.b	(a0,d0.w),d1		;was old trksptr good enuf?
 5551  00002F44  67xx                   	beq.s	trkplay			;br if so
 5552                                   cantuse:
 5553  00002F46  70FF                   	moveq	#-1,d0
 5554                                   ;*****end addition
 5555                                   ;
 5556                                   chkloop:


                                        src/cdfront.s        Page 101     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5557  00002F48  5240                   	addq.w	#1,d0
 5558  00002F4A  1418                   	move.b	(a0)+,d2
 5559  00002F4C  67xx                   	beq.s	cantf		
 5560  00002F4E  B202                   	cmp.b	d2,d1
 5561  00002F50  66F6                   	bne	chkloop
 5562                                   trkplay:
 5563  00002F52  33C0xxxxxxxx           	move.w	d0,trksptr
 5564  00002F58  4E75                   	rts
 5565                                   ;
 5566                                   cantf:
 5567  00002F5A  74FF                   	moveq	#-1,d2
 5568  00002F5C  70FF                   	moveq	#-1,d0
 5569  00002F5E  60F2                   	bra	trkplay
 5570                                   ;
 5571                                   ;  Smart track ptr fix: d2 has L or R set according to direction to look
 5572                                   ;
 5573                                   trkptrsm:
 5574  00002F60  41F9xxxxxxxx           	lea	trkseq,a0	
 5575  00002F66  3239xxxxxxxx           	move.w	track,d1
 5576  00002F6C  67E4                   	beq.s	trkplay
 5577  00002F6E  08020016               	btst.l	#Lbit,d2		;are we looking left (decrementing)?
 5578  00002F72  66xx                   	bne.s	trkdeci
 5579  00002F74  08020017               	btst.l	#Rbit,d2		;looking right (incrementing)?
 5580  00002F78  66xx                   	bne.s	trkinci
 5581  00002F7A  60A6                   	bra	trkptrfx
 5582                                   trkdeci:
 5583  00002F7C  74FF                   	moveq	#-1,d2
 5584  00002F7E  60xx                   	bra.s	trksm
 5585                                   trkinci:
 5586  00002F80  7401                   	moveq	#1,d2
 5587                                   trksm:
 5588  00002F82  3039xxxxxxxx           	move.w	trksptr,d0
 5589  00002F88  7600                   	moveq	#0,d3
 5590                                   trksmlp:
 5591  00002F8A  16300000               	move.b	(a0,d0.w),d3
 5592  00002F8E  6792                   	beq	trkptrfx
 5593  00002F90  B203                   	cmp.b	d3,d1
 5594  00002F92  67BE                   	beq.s	trkplay
 5595  00002F94  D042                   	add.w	d2,d0
 5596  00002F96  6AF2                   	bpl	trksmlp
 5597  00002F98  6088                   	bra	trkptrfx
 5598                                   ;
 5599                                   ;
 5600                                   seed:
 5601  00002F9A  33BA0359               	dc.l	$33ba0359		;seed
 5602                                   constant:
 5603  00002F9E  44BF19D3               	dc.l	$44bf19d3		;constant
 5604                                   ;
 5605                                   ;
 5606                                   ;---------------------------------------------------
 5607                                   ;
 5608                                   ;  Get random long saved in EEprom and return in d2.l
 5609                                   ;
 5610                                   RanGetEE:
 5611  00002FA2  323Cxxxx               	move.w	#((defauEEx-defauEE)/2)+2,d1
 5612  00002FA6  6100xxxx               	bsr	eeread


                                        src/cdfront.s        Page 102     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5613  00002FAA  3400                   	move.w	d0,d2
 5614  00002FAC  4842                   	swap	d2
 5615  00002FAE  5341                   	subq	#1,d1
 5616  00002FB0  6100xxxx               	bsr	eeread
 5617  00002FB4  3400                   	move.w	d0,d2
 5618  00002FB6  4E75                   	rts
 5619                                   ;
 5620                                   ;  Save random long in d2.l in EEprom
 5621                                   ;
 5622                                   RanPutEE:
 5623  00002FB8  3002                   	move.w	d2,d0
 5624  00002FBA  323Cxxxx               	move.w	#((defauEEx-defauEE)/2)+1,d1
 5625  00002FBE  6100xxxx               	bsr	eewrite
 5626  00002FC2  4842                   	swap	d2
 5627  00002FC4  3002                   	move.w	d2,d0
 5628  00002FC6  5241                   	addq	#1,d1
 5629  00002FC8  6100xxxx               	bsr	eewrite
 5630  00002FCC  4E75                   	rts
 5631                                   ;
 5632                                   ;  EEprom read/write routines
 5633                                   ;
 5634                                   ;
 5635                                   ;   Get all of the EEprom data and copy to our local ram
 5636                                   ;     If data is not valid, just use defaults & init EEprom
 5637                                   ;
 5638                                   getEE:
 5639  00002FCE  47F9xxxxxxxx           	lea	workEE,a3
 5640  00002FD4  7200                   	moveq	#0,d1			;word address to fetch
 5641  00002FD6  7400                   	moveq	#0,d2			;here is our running checksum
 5642                                   .getE:
 5643  00002FD8  6100xxxx               	bsr	eeread
 5644  00002FDC  36C0                   	move.w	d0,(a3)+
 5645  00002FDE  D440                   	add.w	d0,d2			;add to checksum
 5646  00002FE0  5241                   	addq.w	#1,d1
 5647  00002FE2  0C41xxxx               	cmpi.w	#(defauEEx-defauEE+2)/2,d1
 5648  00002FE6  65F0                   	bcs	.getE
 5649                                   ;
 5650                                   ;  we got all of the EEprom
 5651                                   ;
 5652  00002FE8  4A42                   	tst.w	d2			;good checksum?
 5653  00002FEA  66xx                   	bne.s	.resetE			;br if not (set-up as if cold init)
 5654  00002FEC  343C0071               	move.w	#serial,d2
 5655  00002FF0  B479xxxxxxxx           	cmp.w	vers,d2
 5656  00002FF6  66xx                   	bne.s	.resetE
 5657  00002FF8  4E75                   	rts
 5658                                   ;
 5659                                   ;
 5660                                   .resetE:
 5661  00002FFA  47F9xxxxxxxx           	lea	workEE,a3
 5662  00003000  43F9xxxxxxxx           	lea	defauEE,a1
 5663  00003006  72xx                   	moveq	#(defauEEx-defauEE)/2-1,d1
 5664  00003008  7000                   	moveq	#0,d0			;checksum
 5665                                   .setE:
 5666  0000300A  3419                   	move.w	(a1)+,d2
 5667  0000300C  36C2                   	move.w	d2,(a3)+
 5668  0000300E  D042                   	add.w	d2,d0


                                        src/cdfront.s        Page 103     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5669  00003010  51C9FFF8               	dbra	d1,.setE
 5670                                   ;
 5671  00003014  4440                   	neg.w	d0
 5672  00003016  36C0                   	move.w	d0,(a3)+
 5673                                   ;
 5674                                   ;   Now, copy to EEprom (include computed checksum)
 5675                                   ;
 5676  00003018  47F9xxxxxxxx           	lea	workEE,a3
 5677  0000301E  7200                   	moveq	#0,d1
 5678  00003020  74xx                   	moveq	#(defauEEx-defauEE+2)/2-1,d2
 5679                                   .settE:
 5680  00003022  301B                   	move.w	(a3)+,d0
 5681  00003024  6100xxxx               	bsr	eewrite
 5682  00003028  66xx                   	bne.s	.errwr			;give-up if time-out
 5683  0000302A  5241                   	addq.w	#1,d1			;next word-address
 5684  0000302C  51CAFFF4               	dbra	d2,.settE
 5685                                   .errwr:	
 5686  00003030  4E75                   	rts
 5687                                   ;
 5688                                   ;
 5689                                   ;---------------------------------------------------
 5690                                   ;
 5691                                   ;   Set EEprom data specified by d1.w to current working value
 5692                                   ;    and adjust checksum accordingly 
 5693                                   ;
 5694                                   ;
 5695                                   ;  example:
 5696                                   ;     To update value for seqmode, call setEE with #(seqmode-workEE) in d1.w
 5697                                   ;
 5698                                   setEE:
 5699  00003032  41F9xxxxxxxx           	lea	workEE,a0
 5700  00003038  34301000               	move.w	(a0,d1.w),d2		;get data to refresh
 5701  0000303C  E249                   	lsr.w	#1,d1			;form word-address in EEprom
 5702  0000303E  6100xxxx               	bsr	eeread			;see if it has changed
 5703  00003042  B440                   	cmp.w	d0,d2
 5704  00003044  6700xxxx               	beq	.setEx			;br to exit if no change
 5705                                   ;
 5706  00003048  3002                   	move.w	d2,d0
 5707  0000304A  6100xxxx               	bsr	eewrite
 5708  0000304E  66xx                   	bne.s	.setEx			;exit if time-out (nothing we can do)
 5709                                   ;
 5710                                   ;  re-compute checksum
 5711                                   ;
 5712  00003050  72xx                   	moveq	#(defauEEx-defauEE)/2-1,d1
 5713  00003052  7000                   	moveq	#0,d0			;checksum
 5714                                   .setE:
 5715  00003054  D058                   	add.w	(a0)+,d0
 5716  00003056  51C9FFFC               	dbra	d1,.setE
 5717                                   ;
 5718  0000305A  4440                   	neg.w	d0
 5719  0000305C  3080                   	move.w	d0,(a0)
 5720                                   ;
 5721  0000305E  72xx                   	moveq	#(defauEEx-defauEE)/2,d1
 5722  00003060  6100xxxx               	bsr	eewrite
 5723                                   .setEx:
 5724  00003064  4E75                   	rts


                                        src/cdfront.s        Page 104     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5725                                   ;
 5726                                   ;	
 5727                                   ;
 5728                                   ;  The BUTCH interface for the CD-ROM module is a long-word register,
 5729                                   ;   where only the least signifigant 4 bits are used
 5730                                   ;
 5731           =00DFFF2C               eeprom	equ	$DFFF2c			;interface to CD-eeprom
 5732                                   ;
 5733                                   ;  bit3 - busy if 0 after write cmd, or Data In after read cmd 
 5734                                   ;  bit2 - Data Out
 5735                                   ;  bit1 - clock
 5736                                   ;  bit0 - Chip Select (CS)
 5737                                   ;
 5738                                   ;
 5739                                   ;   Commands specific to the National Semiconductor NM93C14
 5740                                   ;
 5741                                   ;
 5742                                   ;  9-bit commands..
 5743                                   ;		 876543210
 5744           =00000180               eREAD	equ	%110000000		;read from EEPROM
 5745           =00000130               eEWEN	equ	%100110000		;Erase/write Enable
 5746           =000001C0               eERASE	equ	%111000000		;Erase selected register
 5747           =00000140               eWRITE	equ	%101000000		;Write selected register
 5748           =00000120               eERAL	equ	%100100000		;Erase all registers
 5749           =00000110               eWRAL	equ	%100010000		;Writes all registers
 5750           =00000100               eEWDS	equ	%100000000		;Erase/Write disable (default)
 5751                                   ;
 5752                                   ;
 5753                                   ;*****************************************************************
 5754                                   ;
 5755                                   ;  Write a word to EEPROM
 5756                                   ;
 5757                                   ;  entry: d0.w = data to be written
 5758                                   ;	  d1.w = least signifigant 6 bits specify write address (0-63)  
 5759                                   ;
 5760                                   ;   exit: d0 = 0 for successful write, -1 for time-out error
 5761                                   ;              all other registers preserved
 5762                                   ;	
 5763                                   ;
 5764                                   ;
 5765                                   eewrite:
 5766  00003066  48E77E80               	movem.l	a0/d1-d6,-(sp)
 5767  0000306A  41F900DFFF2C           	lea	eeprom,a0	;set ptr to EEPROM i/o address
 5768                                   ;
 5769  00003070  343C0130               	move.w	#eEWEN,d2
 5770  00003074  6100xxxx               	bsr	out9bits	;enable write
 5771                                   ;
 5772  00003078  0241003F               	andi.w	#$3f,d1		;force write addr to be legit (0-63)
 5773  0000307C  343C0140               	move.w	#eWRITE,d2
 5774  00003080  8441                   	or.w	d1,d2
 5775  00003082  6100xxxx               	bsr	out9bits	;issue WRITE command with write address
 5776                                   ;
 5777  00003086  3400                   	move.w	d0,d2
 5778  00003088  6100xxxx               	bsr	out16bit
 5779                                   ;
 5780                                   ;  strobe Chip Select (before check of busy)


                                        src/cdfront.s        Page 105     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5781                                   ;
 5782  0000308C  7601                   	moveq	#1,d3
 5783  0000308E  7800                   	moveq	#0,d4
 5784  00003090  2084                   	move.l	d4,(a0)		;CS=0
 5785  00003092  2083                   	move.l	d3,(a0)		;CS=1
 5786  00003094  2084                   	move.l	d4,(a0)		;CS=0
 5787                                   ;
 5788  00003096  7808                   	moveq	#8,d4
 5789                                   ;
 5790                                   ;	move.w	#1000,d5	;this time-out is hairy edge on lite system
 5791  00003098  3A3C8000               	move.w	#$8000,d5
 5792                                   busywait:
 5793  0000309C  2410                   	move.l	(a0),d2		;check busy
 5794  0000309E  C444                   	and.w	d4,d2
 5795  000030A0  66xx                   	bne.s	eewrfin
 5796  000030A2  51CDFFF8               	dbra	d5,busywait
 5797                                   ;
 5798                                   ;  time-out on write, set indicator & exit
 5799                                   ;
 5800  000030A6  70FF                   	moveq	#-1,d0		;indicate time out
 5801  000030A8  60xx                   	bra.s	eewrx	
 5802                                   eewrfin:
 5803  000030AA  343C0100               	move.w	#eEWDS,d2	;get erase/write disable command
 5804  000030AE  6100xxxx               	bsr	out9bits	;send it
 5805                                   ;
 5806  000030B2  7000                   	moveq	#0,d0		;indicate no timeout
 5807                                   eewrx:
 5808  000030B4  4CDF017E               	movem.l	(sp)+,a0/d1-d6
 5809  000030B8  4A80                   	tst.l	d0
 5810  000030BA  4E75                   	rts			;we're done
 5811                                   ;
 5812                                   ;
 5813                                   ;
 5814                                   ;******************************************************
 5815                                   ;
 5816                                   ;
 5817                                   ;  Read a word from EEPROM
 5818                                   ;
 5819                                   ;  entry:  d1.w = least signif 6 bits specify read address (0-63)  
 5820                                   ;
 5821                                   ;   exit:  d0.w = data as read from EEPROM
 5822                                   ;		  all other registers preserved
 5823                                   ;
 5824                                   eeread:
 5825  000030BC  48E77880               	movem.l	a0/d1-d4,-(sp)
 5826  000030C0  41F900DFFF2C           	lea	eeprom,a0	;set ptr to EEPROM i/o address
 5827                                   ;
 5828  000030C6  0241003F               	andi.w	#$3f,d1		;force legit read addr
 5829  000030CA  343C0180               	move.w	#eREAD,d2
 5830  000030CE  8441                   	or.w	d1,d2
 5831  000030D0  6100xxxx               	bsr	out9bits
 5832                                   ;
 5833  000030D4  7000                   	moveq	#0,d0
 5834  000030D6  760F                   	moveq	#15,d3		;pick up 16 bits
 5835  000030D8  7800                   	moveq	#0,d4
 5836  000030DA  7A02                   	moveq	#2,d5


                                        src/cdfront.s        Page 106     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5837                                   inlp:
 5838  000030DC  2084                   	move.l	d4,(a0)		;Clk=0
 5839  000030DE  2085                   	move.l	d5,(a0)		;Clk=1
 5840  000030E0  2084                   	move.l	d4,(a0)		;Clk=0
 5841                                   ;
 5842  000030E2  2210                   	move.l	(a0),d1
 5843  000030E4  E849                   	lsr.w	#4,d1
 5844  000030E6  D140                   	addx.w	d0,d0
 5845  000030E8  51CBFFF2               	dbra	d3,inlp
 5846                                   ;
 5847  000030EC  4CDF011E               	movem.l	(sp)+,a0/d1-d4
 5848  000030F0  4E75                   	rts
 5849                                   ;
 5850                                   ;**************************************************************
 5851                                   ;
 5852                                   ;  Serial data sent to device is written to DI, bit2 of $DFFF2C
 5853                                   ;
 5854                                   ; entry:
 5855                                   ;  a0 -> eeprom ($DFFF2C)
 5856                                   ;  d2.w = 16-bit data word to write
 5857                                   ;
 5858                                   ; exit:
 5859                                   ;  d2.w, d3.l-d6.l destroyed
 5860                                   ;
 5861                                   out16bit:
 5862  000030F2  E75A                   	rol.w	#3,d2		;align MSbit to data bit position (bit2)
 5863  000030F4  7C0F                   	moveq	#15,d6		;send 15
 5864  000030F6  60xx                   	bra.s	outxb
 5865                                   ;
 5866                                   ; entry:
 5867                                   ;  a0 -> eeprom ($DFFF2C)
 5868                                   ;  d2.w = 9-bit command to write
 5869                                   ;
 5870                                   out9bits:
 5871                                   ;
 5872                                   ;  strobe Chip Select (always needed for command)
 5873                                   ;
 5874  000030F8  7601                   	moveq	#1,d3
 5875  000030FA  7800                   	moveq	#0,d4
 5876                                   ;
 5877  000030FC  2084                   	move.l	d4,(a0)		;CS=0
 5878  000030FE  2083                   	move.l	d3,(a0)		;CS=1
 5879  00003100  2084                   	move.l	d4,(a0)		;CS=0
 5880                                   ;
 5881  00003102  EC5A                   	ror.w	#6,d2		;align MSbit to data bit position (bit2)
 5882  00003104  7C08                   	moveq	#8,d6		;send 9
 5883                                   ;
 5884                                   ;
 5885                                   ;
 5886                                   outxb:
 5887  00003106  7604                   	moveq	#4,d3		;mask for data bit
 5888  00003108  7802                   	moveq	#2,d4		;clock bit
 5889                                   ;
 5890                                   bitloop:
 5891  0000310A  3A02                   	move.w	d2,d5
 5892  0000310C  CA83                   	and.l	d3,d5


                                        src/cdfront.s        Page 107     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5893                                   ;
 5894  0000310E  2085                   	move.l	d5,(a0)		;data is ready, CLK=0
 5895  00003110  B945                   	eor.w	d4,d5
 5896  00003112  2085                   	move.l	d5,(a0)		;same data, CLK=1
 5897  00003114  B945                   	eor.w	d4,d5
 5898  00003116  2085                   	move.l	d5,(a0)		;CLK=0
 5899  00003118  E35A                   	rol.w	#1,d2
 5900  0000311A  51CEFFEE               	dbra	d6,bitloop
 5901                                   ;
 5902                                   ;
 5903  0000311E  4E75                   	rts	
 5904                                   ;
 5905                                   ;
 5906                                   ;  Our v-blank irq routine
 5907                                   ;
 5908                                   ;
 5909                                   Dframe:
 5910                                   ;	ori.l	#4,G_CTRL		;do GPU interrupt
 5911  00003120  23FC0000000500F02114   	move.l	#5,G_CTRL		;****1-Aug-95
 5912                                   ;
 5913  0000312A  33FC010100F000E0       	move.w	#$0101,INT1		;clear interrupt
 5914  00003132  33FC000000F000E2       	move.w	#0,INT2
 5915  0000313A  4E73                   	rte
 5916                                   ;
 5917                                   ;
 5918                                   	.if	0
 5919                                 - 	movem.l	d0/a0-a1,-(a7)
 5920                                 - ;
 5921                                 - 	lea	davelist,a0
 5922                                 - 	movea.l	dlist,a1
 5923                                 - ;
 5924                                 - 	move.l	(a0)+,(a1)+		;put up full CD+G 8-bit/pixel screen
 5925                                 - 	move.l	(a0)+,(a1)+
 5926                                 - 	move.l	(a0)+,(a1)+
 5927                                 - 	move.l	(a0)+,(a1)+
 5928                                 - ;
 5929                                 - 	adda.w	#$50,a1
 5930                                 - ;
 5931                                 - 	movea.l	blist,a0		;now do rest of Jeff's stuff
 5932                                 - 	adda.w	#$60,a0
 5933                                 - ;
 5934                                 - 	moveq	#$10,d0
 5935                                 - ;
 5936                                 - 	move.l	(a0)+,(a1)+		;daves obj #0
 5937                                 - 	move.l	(a0)+,(a1)+
 5938                                 - 	move.l	(a0)+,(a1)+
 5939                                 - 	move.l	(a0)+,(a1)+
 5940                                 - ;
 5941                                 - 	adda.w	d0,a0
 5942                                 - 	adda.w	d0,a1
 5943                                 - ;
 5944                                 - 	move.l	(a0)+,(a1)+		;daves obj #1
 5945                                 - 	move.l	(a0)+,(a1)+
 5946                                 - 	move.l	(a0)+,(a1)+
 5947                                 - 	move.l	(a0)+,(a1)+
 5948                                 - ;


                                        src/cdfront.s        Page 108     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 5949                                 - 	adda.w	d0,a0
 5950                                 - 	adda.w	d0,a1
 5951                                 - ;
 5952                                 - 	move.l	(a0)+,(a1)+		;daves obj #2
 5953                                 - 	move.l	(a0)+,(a1)+
 5954                                 - 	move.l	(a0)+,(a1)+
 5955                                 - 	move.l	(a0)+,(a1)+
 5956                                 - ;
 5957                                 - 	adda.w	d0,a0
 5958                                 - 	adda.w	d0,a1
 5959                                 - ;
 5960                                 - 	move.l	(a0)+,(a1)+
 5961                                 - 	move.l	(a0)+,(a1)+
 5962                                 - 	move.l	(a0)+,(a1)+
 5963                                 - 	move.l	(a0)+,(a1)+
 5964                                 - ;
 5965                                 - ;	.endif
 5966                                 - ;
 5967                                 - ;	addi.w	#$1,frames		;advance frame count
 5968                                 - 	clr.w	Pradip			;tell Pradip he can blit to display
 5969                                 - notv:
 5970                                 - 	movem.l	(a7)+,d0/a0-a1
 5971                                 - ;	move.w	#$0101,INT1		;clear interrupt
 5972                                 - ;	move.w	#0,INT2
 5973                                 - 
 5974                                 - 	move.w	#$0101,INT1		;clear interrupt
 5975                                 - 	move.w	#0,INT2
 5976                                 - 	rte
 5977                                 - 	.endif
 5978                                   ;
 5979                                   ;
 5980                                   ;  Every time display congfiguration changes, we may need to RunBeast
 5981                                   ;
 5982                                   chngdisp:
 5983  0000313C  4A79xxxxxxxx           	tst.w	cdgmode
 5984  00003142  67xx                   	beq.s	.norun
 5985  00003144  48E7FFFE               	movem.l	a0-a6/d0-d7,-(sp)
 5986  00003148  4EB900195B4C           	jsr	RunBeast
 5987  0000314E  4CDF7FFF               	movem.l	(sp)+,a0-a6/d0-d7
 5988                                   .norun:
 5989  00003152  4E75                   	rts
 5990                                   ;
 5991                                   ;
 5992                                   ;
 5993  00003154  00000000               	dc.l	0	;space to back-up if we need to achieve long alignment
 5994                                   ;
 5995                                   davelist:
 5996                                   ;
 5997                                   ;
 5998                                   ;
 5999                                   ;  Object type (Bits 0-2 in 1st 64-bit phrase of object)
 6000                                   ; 
 6001           =00000000               BMAPTYP		equ	0	;Bit-Map object
 6002           =00000001               SCALTYP		equ	1	;Scaled Bit-Map object
 6003           =00000002               GPUTYP		equ	2	;Graphics Processor interrupt Object
 6004           =00000003               BRTYP		equ	3	;Branch Object


                                        src/cdfront.s        Page 109     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 6005           =00000004               STOPTYP		equ	4	;Stop Object
 6006                                   ;
 6007                                   ;
 6008           =00000000               OBJTYPE		set	BMAPTYP	;1st object is a Scaled Bit-Map object
 6009           =00000180               HEIGHT		set	192*2	;fill the screen
 6010           =00000033               YPOS		set	25*2+1	;from the top
 6011           =00000023               XPOS		set	35	;from the left edge
 6012           =00000000               FIRSTPIX	set	0	;no left edge clipping
 6013           =00000000               RELEASE		set	0	;release bus between image data fetches
 6014           =00000000               TRANSPAR	set	0	;make logical color 0 transparent
 6015           =00000000               RMW		set	0	;no read-modify-write
 6016           =00000000               REFLECT		set	0	;no horizontal reflect
 6017           =00000000               INDEX		set	0	;palette offset if 1-4 bits/pix
 6018           =00000024               IWIDTH		set	36	;36 phrases in displayed image
 6019           =00000028               DWIDTH		set	40	;40 phrases in source form
 6020           =00000001               PITCH		set	1	;increment by 1 phrase for next fetch
 6021           =00000003               DEPTH		set	3	;8 bits/pixel (256 color)
 6022                                   ;
 6023                                   ;  1st Object is a vanilla Bit-map, so it needs a 2 phrase header
 6024                                   ;
 6025                                   ;  1st phrase
 6026  00003158  00000000                dc.l	0
 6027  0000315C  00300198                dc.l	(HEIGHT << 13) + (YPOS << 3) + OBJTYPE 
 6028                                   ;
 6029                                   ;  2nd phrase
 6030  00003160  0000                    dc.w (FIRSTPIX << 1) + RELEASE
 6031  00003162  0002                    dc.w (TRANSPAR << 15) + (RMW << 14) + (REFLECT <<13) + (INDEX << 6) + (IWIDTH >> 4)
 6032  00003164  40A0                    dc.w ((IWIDTH & $0F) << 12) + (DWIDTH << 2) + (PITCH & $06)
 6033  00003166  B023                    dc.w ((PITCH & 1) << 15) + (DEPTH << 12) + XPOS
 6034                                   ;
 6035  00003168  00000000000000040000    dc.l	0,STOPTYP,0,STOPTYP
       00003172  000000000004           
 6036                                   ;
 6037                                   ;
 6038                                   ;	
 6039                                   ;
 6040                                   ;   Default EEprom data
 6041                                   ;
 6042                                   ; This is the setting copied into EEprom if no valid data is found there
 6043                                   ;
 6044                                   ;
 6045                                   ;
 6046                                   defauEE:
 6047                                   defVOL:
 6048  00003178  0024                   	dc.w	36	;+0 default volume control ptr (0..64)
 6049                                   ;defseqm:
 6050                                   ;	dc.w	1	;+2 default sequence mode (normal=1)
 6051                                   ;defreptm:
 6052                                   ;	dc.w	1	;+4 default repeat mode (no repeat=1)
 6053                                   ;defcdgm:
 6054                                   ;	dc.w	0	;+6 default cd+g mode (vlm = 0)
 6055                                   defBnkE:
 6056  0000317A  0004                   	dc.w	$04	;+8 default bank(-1)/effect
 6057                                   defVnbr:
 6058  0000317C  0071                   	dc.w	serial	;+A default version number
 6059                                   defauEEx:


                                        src/cdfront.s        Page 110     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 6060                                   ;	dc.w	0	;+C checksum (computed)
 6061                                   ;
 6062                                   ;
 6063                                   ;
 6064                                   ;
 6065                                   ;
 6066                                   ;  End eeprom data
 6067                                   ;
 6068                                   ;
 6069                                   ;
 6070                                   defseqm:
 6071  0000317E  0001                   	dc.w	1	;+2 default sequence mode (normal=1)
 6072                                   defreptm:
 6073  00003180  0001                   	dc.w	1	;+4 default repeat mode (no repeat=1)
 6074                                   defcdgm:
 6075  00003182  0000                   	dc.w	0	;+6 default cd+g mode (vlm = 0)
 6076                                   ;
 6077                                   ;
 6078                                   ;
 6079                                   voltab:
 6080  00003184  0000                   	dc.w	0	;this is off
 6081                                   ;
 6082                                   ;  Exponential Volume Table (courtesy of Tim Dunn)
 6083                                   ;
 6084                                   ;	
 6085  00003186  0020                   	dc.w      32
 6086  00003188  0024                   	dc.w      36
 6087  0000318A  0028                   	dc.w      40
 6088  0000318C  002D                   	dc.w      45
 6089  0000318E  0032                   	dc.w      50
 6090  00003190  0037                   	dc.w      55
 6091  00003192  003E                   	dc.w      62
 6092  00003194  0045                   	dc.w      69
 6093  00003196  004D                   	dc.w      77
 6094  00003198  0056                   	dc.w      86
 6095  0000319A  0060                   	dc.w      96
 6096  0000319C  006B                   	dc.w     107
 6097  0000319E  0078                   	dc.w     120
 6098  000031A0  0086                   	dc.w     134
 6099  000031A2  0095                   	dc.w     149
 6100  000031A4  00A7                   	dc.w     167
 6101  000031A6  00BA                   	dc.w     186
 6102  000031A8  00D0                   	dc.w     208
 6103  000031AA  00E8                   	dc.w     232
 6104  000031AC  0103                   	dc.w     259
 6105  000031AE  0121                   	dc.w     289
 6106  000031B0  0143                   	dc.w     323
 6107  000031B2  0168                   	dc.w     360
 6108  000031B4  0192                   	dc.w     402
 6109  000031B6  01C1                   	dc.w     449
 6110  000031B8  01F5                   	dc.w     501
 6111  000031BA  022F                   	dc.w     559
 6112  000031BC  0270                   	dc.w     624
 6113  000031BE  02B9                   	dc.w     697
 6114  000031C0  030A                   	dc.w     778
 6115  000031C2  0364                   	dc.w     868


                                        src/cdfront.s        Page 111     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 6116  000031C4  03C9                   	dc.w     969
 6117  000031C6  043A                   	dc.w    1082
 6118  000031C8  04B8                   	dc.w    1208
 6119  000031CA  0544                   	dc.w    1348
 6120  000031CC  05E1                   	dc.w    1505
 6121  000031CE  0690                   	dc.w    1680
 6122  000031D0  0753                   	dc.w    1875
 6123  000031D2  082E                   	dc.w    2094
 6124  000031D4  0921                   	dc.w    2337
 6125  000031D6  0A31                   	dc.w    2609
 6126  000031D8  0B60                   	dc.w    2912
 6127  000031DA  0CB3                   	dc.w    3251
 6128  000031DC  0E2D                   	dc.w    3629
 6129  000031DE  0FD3                   	dc.w    4051
 6130  000031E0  11AA                   	dc.w    4522
 6131  000031E2  13B8                   	dc.w    5048
 6132  000031E4  1603                   	dc.w    5635
 6133  000031E6  1893                   	dc.w    6291
 6134  000031E8  1B6E                   	dc.w    7022
 6135  000031EA  1E9F                   	dc.w    7839
 6136  000031EC  222F                   	dc.w    8751
 6137  000031EE  2629                   	dc.w    9769
 6138  000031F0  2A99                   	dc.w   10905
 6139  000031F2  2F8D                   	dc.w   12173
 6140  000031F4  3515                   	dc.w   13589
 6141  000031F6  3B41                   	dc.w   15169
 6142  000031F8  4225                   	dc.w   16933
 6143  000031FA  49D7                   	dc.w   18903
 6144  000031FC  526D                   	dc.w   21101
 6145  000031FE  5C03                   	dc.w   23555
 6146  00003200  66B7                   	dc.w   26295
 6147  00003202  72A9                   	dc.w   29353
 6148  00003204  7FFF                   	dc.w   32767
 6149                                   ;
 6150                                   vlmdk:
 6151                                   	.include	"vlmdark.s"
    1  00003206  0000F173F173F173F173   	dc.l	$0000F173,$F173F173,$F173F173,$F173F173
       00003210  F173F173F173           
    2  00003216  F173F173000000007F64   	dc.l	$F173F173,$00000000,$7F647F64,$7F647F64
       00003220  7F647F647F64           
    3  00003226  7F640000000000000000   	dc.l	$7F640000,$00000000,$00002375,$23752375
       00003230  237523752375           
    4  00003236  00000000000000000000   	dc.l	$00000000,$00000000,$00002375,$23752375
       00003240  237523752375           
    5  00003246  00000000F032F032F032   	dc.l	$00000000,$F032F032,$F032F032,$F032F032
       00003250  F032F032F032           
    6  00003256  F032F173000000007F32   	dc.l	$F032F173,$00000000,$7F327F32,$7F327F32
       00003260  7F327F327F32           
    7  00003266  7F640000000000000000   	dc.l	$7F640000,$00000000,$00000000,$003E0033
       00003270  0000003E0033           
    8  00003276  23750000000000002375   	dc.l	$23750000,$00000000,$23750033,$003E2375
       00003280  0033003E2375           
    9  00003286  00000000F027F027F027   	dc.l	$00000000,$F027F027,$F027F027,$F027F027
       00003290  F027F027F027           
   10  00003296  F027F173000000007F28   	dc.l	$F027F173,$00000000,$7F287F28,$7F287F28
       000032A0  7F287F287F28           


                                        vlmdark.s            Page 112     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   11  000032A6  7F640000000000000000   	dc.l	$7F640000,$00000000,$00000000,$00330033
       000032B0  000000330033           
   12  000032B6  00272375000023750027   	dc.l	$00272375,$00002375,$00270033,$00332375
       000032C0  003300332375           
   13  000032C6  00000000F012F01CF01C   	dc.l	$00000000,$F012F01C,$F01CF01C,$F01CF01C
       000032D0  F01CF01CF01C           
   14  000032D6  F012F173000000007F1E   	dc.l	$F012F173,$00000000,$7F1E7F1E,$7F1E7F1E
       000032E0  7F1E7F1E7F1E           
   15  000032E6  7F640000000000000000   	dc.l	$7F640000,$00000000,$00000000,$00270027
       000032F0  000000270027           
   16  000032F6  0027001B2375001B0027   	dc.l	$0027001B,$2375001B,$00270027,$00272375
       00003300  002700272375           
   17  00003306  000000000000F007F012   	dc.l	$00000000,$0000F007,$F012F012,$F012F007
       00003310  F012F012F007           
   18  00003316  F06F0000000000007F14   	dc.l	$F06F0000,$00000000,$7F147F14,$7F147F14
       00003320  7F147F147F14           
   19  00003326  7F640000000000000000   	dc.l	$7F640000,$00000000,$00000000,$001B001B
       00003330  0000001B001B           
   20  00003336  001B001B001B001B001B   	dc.l	$001B001B,$001B001B,$001B001B,$001B2375
       00003340  001B001B2375           
   21  00003346  0000000000000000F007   	dc.l	$00000000,$00000000,$F007F007,$F0070000
       00003350  F007F0070000           
   22  00003356  F1730000000000007F0A   	dc.l	$F1730000,$00000000,$7F0A7F0A,$7F0A7F0A
       00003360  7F0A7F0A7F0A           
   23  00003366  7F647F647F647F640000   	dc.l	$7F647F64,$7F647F64,$00000000,$00100010
       00003370  000000100010           
   24  00003376  00100010001000100010   	dc.l	$00100010,$00100010,$00100010,$00102375
       00003380  001000102375           
   25  00003386  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$0000F06F
       00003390  00000000F06F           
   26  00003396  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$00000000
       000033A0  000000000000           
   27  000033A6  0000000000007F640000   	dc.l	$00000000,$00007F64,$00000000,$00040004
       000033B0  000000040004           
   28  000033B6  00040004000400040004   	dc.l	$00040004,$00040004,$00040004,$00042375
       000033C0  000400042375           
   29  000033C6  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$0000F173
       000033D0  00000000F173           
   30  000033D6  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$00000000
       000033E0  000000000000           
   31  000033E6  0000000000007F640000   	dc.l	$00000000,$00007F64,$00000000,$00000000
       000033F0  000000000000           
   32  000033F6  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$00002375
       00003400  000000002375           
   33  00003406  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$F1730000
       00003410  0000F1730000           
   34  00003416  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$00000000
       00003420  000000000000           
   35  00003426  0000000000007F640000   	dc.l	$00000000,$00007F64,$00000000,$00000000
       00003430  000000000000           
   36  00003436  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$00002375
       00003440  000000002375           
   37  00003446  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$00000000
       00003450  000000000000           
   38  00003456  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$00000000
       00003460  000000000000           


                                        vlmdark.s            Page 113     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   39  00003466  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$00000000
       00003470  000000000000           
   40  00003476  00000000000000000000   	dc.l	$00000000,$00000000,$00000000,$00000000
       00003480  000000000000           
 6152                                   ;
 6153  00003486                         	.bss
 6154                                   ;
 6155                                   ;
 6156                                   ;
 6157                                   ;  The following block is copied from EEprom
 6158                                   ;    and any changes are maintained in the EEprom
 6159                                   ;
 6160                                   ;
 6161                                   workEE:
 6162                                   volptr:
 6163  00000000 =00000001               	ds.w	1	;+0 init position of volume (1..64)
 6164                                   ;seqmode:
 6165                                   ;	ds.w	1	;+2 sequence mode (program-0, normal-1, random-2)
 6166                                   ;reptmode:
 6167                                   ;	ds.w	1	;+4 repeat mode (repeat track-0, no repeat-1) 
 6168                                   ;cdgmode:
 6169                                   ;	ds.w	1	;+6 cd+g mode (vlm-0 , cd+g-1)
 6170                                   Sbankeff:
 6171  00000002 =00000001               	ds.w	1	;+8 bank/effect to start-up with
 6172                                   vers:
 6173  00000004 =00000001               	ds.w	1	;+A version #
 6174                                   chksum:
 6175  00000006 =00000001               	ds.w	1	;+C checksum of above block
 6176                                   ;
 6177                                   ;
 6178                                   ;
 6179                                   ;  These aren't saved so keep them outside EEprom block
 6180                                   ;
 6181                                   seqmode:
 6182  00000008 =00000001               	ds.w	1	;+2 sequence mode (program-0, normal-1, random-2)
 6183                                   reptmode:
 6184  0000000A =00000001               	ds.w	1	;+4 repeat mode (repeat track-0, no repeat-1) 
 6185                                   cdgmode:
 6186  0000000C =00000001               	ds.w	1	;+6 cd+g mode (vlm-0 , cd+g-1)
 6187                                   ;
 6188                                   reframe:
 6189  0000000E =00000001               	ds.w	1	;copy of frame counter when re-initing vlm
 6190                                   ;
 6191                                   ;
 6192                                   getTram:
 6193                                   play:
 6194  00000010 =00000001               	ds.w	1	;0 = stopped, ff = play
 6195                                   scan:
 6196  00000012 =00000001               	ds.w	1	;b1,0: 00-off, 01-wait min hold, 10-scan up, 11-scan down 
 6197                                   pause:
 6198  00000014 =00000001               	ds.w	1	;0 if not paused, else paused
 6199                                   scanfcnt:
 6200  00000016 =00000001               	ds.w	1	;frame count when joy R,L first pressed
 6201                                   scantime:
 6202  00000018 =00000001               	ds.l	1	;Amin,Asec,Aframe of last goto time command
 6203                                   scancnt:


                                        src/cdfront.s        Page 114     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 6204  0000001C =00000001               	ds.w	1	;# of times gototime command has been issued,this scan
 6205                                   track:
 6206  0000001E =00000001               	ds.w	1	;real track (hex)
 6207                                   maxmin:
 6208  00000020 =00000001               	ds.w	1	;hex min, max track #
 6209                                   SubCode:
 6210  00000022 =00000010               	ds.b	16	;12 q-subcode bytes (16-bytes allocated)
 6211                                   ;
 6212                                   ;
 6213                                   ;	 0 - Control/Addr
 6214                                   ;	 1 - TNO (track number)
 6215                                   ;	 2 - Index (point, pause between track indicator 0=minus, 1=plus)
 6216                                   ;	 3 - Min
 6217                                   ;	 4 - Sec
 6218                                   ;	 5 - Frame
 6219                                   ;	 6 - Zero
 6220                                   ;	 7 - AMin
 6221                                   ;	 8 - ASec
 6222                                   ;	 9 - AFrame
 6223                                   ;	10 - CRC1 (validated by DSP)
 6224                                   ;	11 - CRC2 (validated by DSP)
 6225                                   ;
 6226                                   ;
 6227                                   ;
 6228                                   dave_pad:
 6229  00000032 =00000001               	ds.l	1	;copy of pad_now for modes 1&2
 6230                                   joyprev:
 6231  00000036 =00000001               	ds.l	1	;previous dave_pad from last service call
 6232                                   m3prev:
 6233  0000003A =00000001               	ds.l	1	;previous pad_now when in mode3
 6234                                   m3col:
 6235  0000003E =00000001               	ds.w	1	;current mode 3 column selection
 6236                                   m3row:
 6237  00000040 =00000001               	ds.w	1	;current mode 3 row selection
 6238                                   m3opt:
 6239  00000042 =00000001               	ds.w	1	;mode 3 option (=0 normal func, <>0 rows 1,3,4)
 6240                                   blinkon:
 6241  00000044 =00000001               	ds.w	1	;blink off/on
 6242                                   ourreg:
 6243  00000046 =00000002               	ds.l	2	;here's where we keep a1=subcode/a4=BUTCH
 6244                                   oneshot:
 6245  0000004E =00000001               	ds.w	1	;=0 if no init, else do one time init on service call
 6246                                   return:
 6247  00000050 =00000100               	ds.w	256	;data returned from a DSA_tx call
 6248                                   ;
 6249                                   origEND:
 6250  00000250 =00000001               	ds.l	1	;ABS time End of CD    BCD (Am:As:Af:00)
 6251                                   fineEND:
 6252  00000254 =00000001               	ds.l	1	;ABS time End of CD binary (00:Am:As:Af)
 6253                                   retcode:
 6254  00000258 =00000100               	ds.w	256	;return code from DSA call, high byte is index here
 6255                                   hexbcd:
 6256  00000458 =00000080               	ds.b	128	;quick hex to BCD conversion table
 6257                                   scanrel:
 6258  000004D8 =00000001               	ds.w	1	;update rel codes during scan if <>0
 6259                                   our_mode:


                                        src/cdfront.s        Page 115     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 6260  000004DA =00000001               	ds.w	1	;our pseudo vlm_mode (0..3)
 6261                                   modecnt:
 6262  000004DC =00000001               	ds.w	1	;our layer of indirection on our_mode (for RM seq)
 6263                                   audvlm:
 6264  000004DE =00000001               	ds.w	1	;=0 for audio mode, -1 for vlm mode
 6265                                   boxleft:
 6266  000004E0 =00000001               	ds.w	1	;=0 if norm, -1 if on volume bar in mode 3
 6267                                   vlmrand:
 6268  000004E2 =00000001               	ds.w	1	;0=normal vlm mode, -1 = random vlm mode
 6269                                   vlmrfrm:
 6270  000004E4 =00000001               	ds.w	1	;frmcount when next change is to be made
 6271                                   cancelC:
 6272  000004E6 =00000001               	ds.w	1	;=0 if norm, -1 if cancel "C" button once
 6273                                   offrame:
 6274  000004E8 =00000001               	ds.w	1	;frame count when mode change has taken effect
 6275                                   volfcnt:
 6276  000004EA =00000001               	ds.w	1	;repeat volume frame counter (else 0)
 6277                                   voltimr:
 6278  000004EC =00000001               	ds.w	1	;frame count when we shut-off vol ind (else 0)
 6279                                   locbank:
 6280  000004EE =00000001               	ds.w	1	;local copy of imatrix (to refresh when changed)
 6281                                   loceff:
 6282  000004F0 =00000001               	ds.w	1	;local copy of skid (to refresh when changed)
 6283                                   disbank:
 6284  000004F2 =00000001               	ds.w	1	;display copy of imatrix
 6285                                   diseff:
 6286  000004F4 =00000001               	ds.w	1	;display copy of skid
 6287                                   distrack:
 6288  000004F6 =00000001               	ds.w	1	;partial track # entered via keypad
 6289                                   keytime:
 6290  000004F8 =00000001               	ds.w	1	;timer for key entries
 6291                                   trksptr:
 6292  000004FA =00000001               	ds.w	1	;offset to current track in sequence (-1 if not on seq)
 6293                                   trksptrp:
 6294  000004FC =00000001               	ds.w	1	;trksptr when we left program mode (to be restored)
 6295                                   trkseq:
 6296  000004FE =000000C8               	ds.b	200	;track sequence in use (may be randomized)
 6297                                   progseq:
 6298  000005C6 =000000C8               	ds.b	200	;user programmable sequence
 6299                                   gridoff:
 6300  0000068E =00000001               	ds.w	1	;offset into trkseq currently displaying on trk grid
 6301                                   progenty:
 6302  00000690 =00000001               	ds.w	1	;0=norm, -1=program mode data entry on trk grid
 6303                                   gridsize:
 6304  00000692 =00000001               	ds.w	1	;# of tracks for trk grid purposes
 6305                                   holeptr:
 6306  00000694 =00000001               	ds.l	1	;when program insert active, -> insert in trkseq
 6307                                   Pradip:
 6308  00000698 =00000001               	ds.w	1
 6309                                   vlmrdcnt:
 6310  0000069A =00000001               	ds.w	1	;vlm random counter (for bank switch time)
 6311                                   ;
 6312                                   objcopi:
 6313  0000069C =000000C0               	ds.b	3*$40
 6314                                   arrowfrm:
 6315  0000075C =00000001               	ds.l	1	;ptr to arrow form


                                        src/cdfront.s        Page 116     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 6316  00000760 =00000002               	ds.l	2
 6317  00000768 =00000070               	ds.b	16*7	;7 lines high (up arrow)
 6318  000007D8 =00000070               	ds.b	16*7	;7 lines high (down arrow)


                                        src/cdfront.s        Page 117     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)
Symbol Table

            .adjop 0000000000001C14  t            .ninpla 000000000000197A  t           .shortwr 0000000000000EA8  t              BORD2 0000000000F0002C  a 
           .adjopx 0000000000001C22  t               .nm3 000000000000069A  t             .singe 000000000000173E  t              BRTYP 0000000000000003  a 
           .advtrk 00000000000016FC  t               .nm3 000000000000075A  t           .skipdwn 00000000000023AE  t              BUSHI 0000000020000000  a 
           .blnklp 0000000000002438  t            .noarad 000000000000176E  t             .skipr 0000000000000AF8  t              BUTCH 0000000000DFFF00  a 
            .blone 000000000000262C  t            .noarad 0000000000001C04  t             .skipr 000000000000100E  t              B_CMD 0000000000F02238  a 
           .blwait 00000000000029D8  t            .noarad 0000000000001D36  t           .skipwrp 0000000000001C18  t         B_COMPLETE 0000000000000000  a 
           .blwait 0000000000000BCE  t             .nodec 000000000000224E  t             .stand 0000000000001774  t            B_COUNT 0000000000F0223C  a 
           .botrow 000000000000244C  t             .noinc 0000000000001802  t            .starts 000000000000102E  t             B_DSTD 0000000000F02248  a 
          .boxleft 000000000000229E  t             .noinc 0000000000001F66  t          .stillgrd 0000000000001BEE  t             B_DSTZ 0000000000F02250  a 
            .bwait 00000000000012DE  t             .nokey 0000000000001AC0  t             .tgrid 000000000000266A  t               B_I0 0000000000F02288  a 
            .bwait 0000000000001334  t            .nongri 0000000000001D46  t           .twochar 00000000000018B6  t               B_I1 0000000000F02284  a 
            .bwait 0000000000001390  t           .nongrii 0000000000001D42  t           .txcount 0000000000002E52  t               B_I2 0000000000F02280  a 
            .bwait 0000000000002474  t            .nopadj 00000000000005FC  t          .txdelay0 0000000000002E3C  t               B_I3 0000000000F0227C  a 
            .bwait 000000000000257A  t            .nopala 0000000000000394  t           .txready 0000000000002E34  t             B_IINC 0000000000F02270  a 
            .bwait 0000000000002614  t           .normdxy 0000000000002CBE  t            .txwait 0000000000002E38  t             B_PATD 0000000000F02268  a 
            .bwait 0000000000002AB2  t           .normsxy 0000000000002C9C  t           .txwait1 0000000000002E3A  t             B_SRCD 0000000000F02240  a 
            .bwait 0000000000002B78  t            .normwh 0000000000002CDC  t            .unJeff 0000000000001916  t            B_SRCZ1 0000000000F02258  a 
            .bwait 0000000000002C56  t             .norun 0000000000003152  t            .unZero 0000000000001924  t            B_SRCZ2 0000000000F02260  a 
            .bwait 0000000000002D0A  t              .not0 00000000000016D4  t            .unchar 00000000000018C0  t             B_STOP 0000000000F02278  a 
            .bwait 0000000000002D62  t             .not10 0000000000002D24  t            .upmove 0000000000001BD6  t               B_Z0 0000000000F02298  a 
           .bwait1 00000000000025D4  t            .notdof 0000000000001856  t              .uppr 0000000000002662  t               B_Z1 0000000000F02294  a 
           .bwait1 000000000000270C  t            .notdof 0000000000001BA4  t            .vlines 0000000000002360  t               B_Z2 0000000000F02290  a 
           .bwait1 0000000000002AEE  t            .notdof 0000000000001D42  t            .volset 000000000000041E  t               B_Z3 0000000000F0228C  a 
           .bwait2 0000000000002738  t            .notdof 0000000000001DBA  t           .waiteff 0000000000001910  t             B_ZINC 0000000000F02274  a 
           .bwait3 0000000000002770  t            .notext 000000000000008A  t           .waitset 0000000000000E1C  t               Bbit 0000000000000019  a 
           .bwaitx 0000000000002D98  t            .notfnd 0000000000001954  t           .yevlmst 00000000000017A0  t             CD_ack 000000000000300C  a 
           .cankey 0000000000001A9C  t           .notforb 0000000000001D7E  t            A1_BASE 0000000000F02200  a           CD_getoc 000000000000305A  a 
            .cdgav 0000000000001648  t           .notfore 0000000000000146  t            A1_CLIP 0000000000F02208  a            CD_init 0000000000003000  a 
             .chkp 0000000000002094  t           .notgrid 0000000000001CFA  t            A1_FINC 0000000000F02220  a           CD_initf 0000000000003066  a 
             .chkp 000000000000219A  t            .notprg 0000000000001BCE  t           A1_FLAGS 0000000000F02204  a           CD_initm 0000000000003060  a 
           .coprog 0000000000001F7A  t           .novlmst 000000000000179A  t          A1_FPIXEL 0000000000F02218  a            CD_jeri 0000000000003012  a 
           .coprog 0000000000001FAA  t            .nproge 0000000000000746  t           A1_FSTEP 0000000000F02214  a            CD_mode 0000000000003006  a 
           .decptr 0000000000002246  t           .nrandup 0000000000000B3C  t             A1_INC 0000000000F0221C  a            CD_mute 0000000000003024  a 
           .dobout 00000000000018E8  t           .onechar 000000000000189C  t           A1_PIXEL 0000000000F0220C  a           CD_osamp 0000000000003054  a 
           .doplay 000000000000194E  t            .onlist 0000000000001F5A  t            A1_STEP 0000000000F02210  a            CD_paus 0000000000003030  a 
          .doseeky 000000000000187C  t            .onlist 0000000000001802  t            A2_BASE 0000000000F02224  a             CD_ptr 000000000000304E  a 
           .endgam 0000000000001726  t            .openho 000000000000172E  t           A2_FLAGS 0000000000F02228  a            CD_read 000000000000303C  a 
            .errwr 0000000000003030  t              .radb 0000000000002C4E  t            A2_MASK 0000000000F0222C  a           CD_setup 0000000000003048  a 
           .fliplp 00000000000012C6  t             .radbx 0000000000002C46  t           A2_PIXEL 0000000000F02230  a            CD_spin 0000000000003018  a 
          .fullpal 000000000000208A  t           .rannwrp 0000000000001BA6  t            A2_STEP 0000000000F02234  a            CD_stop 000000000000301E  a 
          .fullpal 0000000000002190  t           .repalle 000000000000207A  t            ADDDSEL 0000000000020000  a          CD_switch 000000000000306C  a 
             .getE 0000000000002FD8  t           .repalle 0000000000002180  t             ASICLK 0000000000F10034  a             CD_toc 0000000000002C00  a 
          .gotdown 000000000000185A  t            .rering 0000000000000FCA  t            ASICTRL 0000000000F10032  a           CD_umute 000000000000302A  a 
          .gotrite 0000000000001864  t            .resetE 0000000000002FFA  t            ASIDATA 0000000000F10030  a           CD_upaus 0000000000003036  a 
          .gpuwait 0000000000002046  t             .ring0 00000000000025F0  t            ASISTAT 0000000000F10032  a           CD_uread 0000000000003042  a 
          .gpuwait 00000000000020CC  t             .ringo 00000000000025EE  t               Abit 000000000000001D  a           CHRO_CLK 0000000000F10014  a 
              .grf 00000000000028C6  t            .rownup 000000000000229A  t             Amindo 0000000000000A44  t            CLIP_A1 0000000000000040  a 
           .hlines 000000000000237E  t             .rowup 0000000000002294  t             Asecdo 0000000000000A2E  t               CLK1 0000000000F10010  a 
           .jusdis 000000000000195C  t            .scroff 0000000000001C0C  t               BASE 0000000000F00000  a               CLK2 0000000000F10012  a 
              .loc 0000000000001C9E  t            .selbox 000000000000265A  t            BCDdone 0000000000000258  t               CLUT 0000000000F00400  a 
             .loca 0000000000001CAA  t           .selboxy 0000000000002670  t            BCOMPEN 0000000004000000  a             CMPDST 0000000002000000  a 
            .loop0 0000000000000132  t              .setE 000000000000300A  t                 BG 0000000000F00058  a               Cbit 000000000000000D  a 
            .loop1 0000000000000134  t              .setE 0000000000003054  t           BIOS_VER 0000000000003004  a              Crels 000000000000108E  t 
            .loop2 0000000000000138  t             .setEx 0000000000003064  t            BKGWREN 0000000010000000  a               DAC1 0000000000F1A140  a 
            .m3txx 0000000000001966  t            .setmid 0000000000001CB0  t            BMAPTYP 0000000000000000  a               DAC2 0000000000F1A144  a 
          .negtrkp 0000000000002226  t             .settE 0000000000003022  t              BORD1 0000000000F0002A  a            DCOMPEN 0000000008000000  a 


                                        src/cdfront.s        Page 118     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)
Symbol Table

             DEPTH 0000000000000003  a                 HS 0000000000F00034  a                OLP 0000000000F00020  a             TOPBEN 0000000000004000  a 
            DSA_tx 0000000000002E1A  t                HVS 0000000000F00036  a            ObTypes 0000000000196AA8  a             TOPNEN 0000000000008000  a 
           DSCNTRL 0000000000000004  a            I2CNTRL 0000000000000010  a               Obit 0000000000000009  a           TRANSPAR 0000000000000000  a 
          DSPqcode 0000000000002800  a            I2SDAT2 0000000000000028  a            PATDSEL 0000000000010000  a                Tdo 0000000000000B48  t 
             DSTA2 0000000000000800  a              INDEX 0000000000000000  a               PIT0 0000000000F00050  a           TvChnlAv external  ax
             DSTEN 0000000000000008  a               INT1 0000000000F000E0  a               PIT1 0000000000F00052  a           TvChnlNo external  ax
            DSTENZ 0000000000000010  a               INT2 0000000000F000E2  a              PITCH 0000000000000001  a              UPDA1 0000000000000200  a 
            DSTWRZ 0000000000000020  a             IWIDTH 0000000000000024  a             PITCH1 0000000000000000  a             UPDA1F 0000000000000100  a 
             DSTXW 000000000000268A  t               JOY1 0000000000F14000  a             PITCH2 0000000000000001  a              UPDA2 0000000000000400  a 
             DSTYH 00000000000026D6  t               JOY2 0000000000F14002  a             PITCH4 0000000000000002  a               Ubit 0000000000000014  a 
           DS_DATA 000000000000000A  a              JPIT1 0000000000F10000  a             PITCH8 0000000000000003  a                VBB 0000000000F00040  a 
            DWIDTH 0000000000000028  a              JPIT2 0000000000F10002  a             PIXEL1 0000000000000000  a                VBE 0000000000F00042  a 
            D_CTRL 0000000000F1A114  a              JPIT3 0000000000F10004  a            PIXEL16 0000000000000020  a                 VC 0000000000F00006  a 
         D_DIVCTRL 0000000000F1A11C  a              JPIT4 0000000000F10006  a             PIXEL2 0000000000000008  a                VDB 0000000000F00046  a 
             D_END 0000000000F1A10C  a              J_INT 0000000000F10020  a            PIXEL32 0000000000000028  a                VDE 0000000000F00048  a 
          D_ENDRAM 0000000000F1D000  a              LBUFA 0000000000F00800  a             PIXEL4 0000000000000010  a                VEB 0000000000F0004A  a 
           D_FLAGS 0000000000F1A100  a              LBUFB 0000000000F01000  a             PIXEL8 0000000000000018  a                VEE 0000000000F0004C  a 
          D_HIDATA 0000000000F1A118  a              LBUFC 0000000000F01800  a               Pbit 000000000000001C  a                 VI 0000000000F0004E  a 
            D_MTXA 0000000000F1A108  a              LFU_A 0000000001000000  a             Pradip 0000000000000698  b              VMODE 0000000000F00028  a 
            D_MTXC 0000000000F1A104  a             LFU_AN 0000000000800000  a            REFLECT 0000000000000000  a             VOLUME 0000000000F1BE04  a 
              D_PC 0000000000F1A110  a          LFU_CLEAR 0000000000000000  a            RELEASE 0000000000000000  a             VOLbar 0000000000012000  a 
             D_RAM 0000000000F1B000  a              LFU_D 0000000001400000  a                RMW 0000000000000000  a              VOLlp 000000000000016A  t 
          D_REMAIN 0000000000F1A11C  a             LFU_NA 0000000000400000  a         ROM_AMSINE 0000000000F1D400  a             VOLlp1 00000000000001A2  t 
              Dbit 0000000000000015  a            LFU_NAN 0000000000200000  a        ROM_CHIRP16 0000000000F1D800  a                 VP 0000000000F0003E  a 
            Dframe 0000000000003120  t           LFU_NOTD 0000000000A00000  a          ROM_DELTA 0000000000F1DC00  a                 VS 0000000000F00044  a 
           FIFODAT 0000000000000024  a           LFU_NOTS 0000000000600000  a          ROM_NOISE 0000000000F1DE00  a              WID10 0000000000001A00  a 
          FIRSTPIX 0000000000000000  a           LFU_NSAD 0000000000400000  a           ROM_NTRI 0000000000F1DA00  a            WID1024 0000000000005000  a 
             Frame 0000000000194C90  a          LFU_NSAND 0000000000200000  a           ROM_SINE 0000000000F1D200  a             WID112 0000000000003600  a 
             GOURD 0000000000001000  a          LFU_NSORD 0000000001600000  a        ROM_SINE12W 0000000000F1D600  a              WID12 0000000000001C00  a 
            GPIO_0 0000000000F14800  a         LFU_NSORND 0000000000E00000  a          ROM_TABLE 0000000000F1D000  a             WID128 0000000000003800  a 
            GPIO_1 0000000000F15000  a        LFU_N_SXORD 0000000000C00000  a            ROM_TRI 0000000000F1D000  a            WID1280 0000000000005200  a 
            GPIO_2 0000000000F16000  a            LFU_ONE 0000000001E00000  a               RRXD 0000000000F1A14C  a              WID14 0000000000001E00  a 
            GPIO_3 0000000000F17000  a        LFU_REPLACE 0000000001800000  a               RTXD 0000000000F1A14C  a            WID1536 0000000000005400  a 
            GPIO_4 0000000000F17800  a              LFU_S 0000000001800000  a           RanGetEE 0000000000002FA2  t              WID16 0000000000002000  a 
            GPIO_5 0000000000F17C00  a            LFU_SAD 0000000001000000  a           RanPutEE 0000000000002FB8  t             WID160 0000000000003A00  a 
            GPUTYP 0000000000000002  a           LFU_SAND 0000000000800000  a               Rbit 0000000000000017  a            WID1792 0000000000005600  a 
            G_CTRL 0000000000F02114  a           LFU_SORD 0000000001C00000  a             Rmindo 0000000000000A78  t             WID192 0000000000003C00  a 
         G_DIVCTRL 0000000000F0211C  a          LFU_SORND 0000000001A00000  a             Rsecdo 0000000000000A62  t               WID2 0000000000000800  a 
             G_END 0000000000F0210C  a          LFU_SXORD 0000000001200000  a           RunBeast 0000000000195B4C  a              WID20 0000000000002200  a 
          G_ENDRAM 0000000000F04000  a            LFU_XOR 0000000001200000  a            SBCNTRL 0000000000000014  a            WID2048 0000000000005800  a 
           G_FLAGS 0000000000F02100  a           LFU_ZERO 0000000000000000  a            SB_TIME 0000000000000020  a             WID224 0000000000003E00  a 
          G_HIDATA 0000000000F02118  a                LPH 0000000000F00008  a            SCALTYP 0000000000000001  a              WID24 0000000000002400  a 
            G_MTXA 0000000000F02108  a                LPV 0000000000F0000A  a               SCLK 0000000000F1A150  a             WID256 0000000000004000  a 
            G_MTXC 0000000000F02104  a               LRXD 0000000000F1A148  a              SMODE 0000000000F1A154  a            WID2560 0000000000005A00  a 
              G_PC 0000000000F02110  a               LTXD 0000000000F1A148  a              SRCEN 0000000000000001  a              WID28 0000000000002600  a 
             G_RAM 0000000000F03000  a               Lbit 0000000000000016  a             SRCENX 0000000000000004  a            WID3072 0000000000005C00  a 
          G_REMAIN 0000000000F0211C  a            MEMCON1 0000000000F00000  a             SRCENZ 0000000000000002  a              WID32 0000000000002800  a 
               HBB 0000000000F00030  a            MEMCON2 0000000000F00002  a           SRCSHADE 0000000040000000  a             WID320 0000000000004200  a 
               HBE 0000000000F00032  a               NOGO 0000000000000080  a              SSTAT 0000000000F1A150  a            WID3584 0000000000005E00  a 
                HC 0000000000F00004  a                OB0 0000000000F00010  a            STOPTYP 0000000000000004  a             WID384 0000000000004400  a 
              HDB1 0000000000F00038  a                OB1 0000000000F00012  a            SUBDATA 0000000000000018  a               WID4 0000000000001000  a 
              HDB2 0000000000F0003A  a                OB2 0000000000F00014  a            SUBDATB 000000000000001C  a              WID40 0000000000002A00  a 
               HDE 0000000000F0003C  a                OB3 0000000000F00016  a           Sbankeff 0000000000000002  b             WID448 0000000000004600  a 
            HEIGHT 0000000000000180  a                OBF 0000000000F00026  a             Sbitdo 0000000000000B7A  t              WID48 0000000000002C00  a 
               HEQ 0000000000F00054  a            OBJTYPE 0000000000000000  a            SubCode 0000000000000022  b             WID512 0000000000004800  a 
                HP 0000000000F0002E  a                ODP 0000000000F00024  a              TEST1 0000000000F00056  a              WID56 0000000000002E00  a 


                                        src/cdfront.s        Page 119     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)
Symbol Table

              WID6 0000000000001400  a              bdstx 0000000000002C10  t              cursx 00000000001AE520  a            fillbox 000000000000246C  t 
             WID64 0000000000003000  a              bdsty 0000000000002C16  t              cursy 00000000001AE522  a            fineEND 0000000000000254  b 
            WID640 0000000000004A00  a           beasties 00000000001AE048  a           dave_pad 0000000000000032  b            fireBtr 0000000000000F4A  t 
            WID768 0000000000004C00  a              bhite 0000000000002C22  t           davelist 0000000000003158  t             fireBx 0000000000000F64  t 
              WID8 0000000000001800  a           bigfront 00000000000006E8  t            daveloc 000000000000202C  t            fireCtr 0000000000000F70  t 
             WID80 0000000000003200  a           bildprog 0000000000002E82  t           daveloc1 0000000000002074  t           fliplogo 00000000000012B6  t 
            WID896 0000000000004E00  a            bit2pix 000000000000011E  t           daveonce 00000000000021C2  t             formdo 000000000000008A  t 
             WID96 0000000000003400  a            bitloop 000000000000310A  t           davesobj 00000000001AE148  a           formloop 000000000000008E  t 
             XADD0 0000000000020000  a            blinkon 0000000000000044  b           davesres 000000000000205C  t           formover 00000000000000F8  t 
           XADDINC 0000000000030000  a              blist 00000000001AEC7C  a           davesvec 0000000000199994  a            formxit 00000000000000FA  t 
           XADDPHR 0000000000000000  a             blnumb 00000000000028E6  t            defBnkE 000000000000317A  t             frames 00000000001AE4D2  a 
           XADDPIX 0000000000010000  a            blnumbb 00000000000028EC  t             defVOL 0000000000003178  t               free 0000000000192018  a 
              XPOS 0000000000000023  a            bltloop 000000000000295A  t            defVnbr 000000000000317C  t            freerun 0000000000198CAC  a 
          XSIGNADD 0000000000000000  a             blwait 0000000000002A4E  t            defauEE 0000000000003178  t           frntbase 0000000000004000  a 
          XSIGNSUB 0000000000080000  a              board 00000000001B00F8  a           defauEEx 000000000000317E  t           frnthite 000000000000003F  a 
             YADD0 0000000000000000  a            boxleft 00000000000004E0  b            defcdgm 0000000000003182  t               frok 0000000000000DB2  t 
             YADD1 0000000000040000  a              boxon 0000000000001ADA  t           defreptm 0000000000003180  t              frokx 0000000000000DE6  t 
              YPOS 0000000000000033  a              bsrcx 0000000000002BE4  t            defseqm 000000000000317E  t            frontup 00000000000012D2  t 
          YSIGNADD 0000000000000000  a              bsrcy 0000000000002BFA  t           depresok 0000000000002B50  t             frsync 000000000000200A  t 
          YSIGNSUB 0000000000100000  a           btrantab 0000000000001E56  t           depressd 0000000000002B42  t            fullpal 000000000000010A  t 
             ZBUFF 0000000000002000  a             buildf 0000000000000264  t            disbank 00000000000004F2  b              fwait 00000000000002F4  t 
           ZMODEEQ 0000000000080000  a           buildseq 0000000000002E5A  t             diseff 00000000000004F4  b              getEE 0000000000002FCE  t 
           ZMODEGT 0000000000100000  a           busywait 000000000000309C  t            dispsub external  ax           getTram 0000000000000010  b 
           ZMODELT 0000000000040000  a           butbuild 00000000000013D4  t           distrack 00000000000004F6  b                 gm 0000000000196814  a 
            ZOFFS0 0000000000000000  a             butcdg 00000000000000AD  a              dlist 00000000001AEC80  a               goag 000000000019207A  a 
            ZOFFS1 0000000000000040  a            butedge 0000000000000E54  t               do99 000000000000024E  t             gopall 0000000000001454  t 
            ZOFFS2 0000000000000080  a             butlop 0000000000001390  t             doAchg 00000000000009CE  t             gotolp 0000000000000E1C  t 
            ZOFFS3 00000000000000C0  a            butrept 0000000000000056  a              docdg 0000000000001FF0  t             gotone 000000000000122A  t 
            ZOFFS4 0000000000000100  a             butseq 0000000000000011  a               dom3 000000000000198A  t             grafup 00000000000000EC  t 
            ZOFFS5 0000000000000140  a               bwid 0000000000002C1C  t             dom33z 0000000000001A5E  t            grafup0 00000000000000EA  t 
            ZOFFS6 0000000000000180  a             bxlist 0000000000002B28  t              dom3z 0000000000001A0C  t            grafupi 00000000000000EE  t 
            ZOFFS7 00000000000001C0  a            cancelC 00000000000004E6  b             dom3zz 0000000000001A52  t           gridbase 0000000000007F00  a 
            action 00000000001AE524  a              cantf 0000000000002F5A  t            dopoint 0000000000000E12  t           gridigit 000000000000289E  t 
          allforms 00000000000000BE  t            cantuse 0000000000002F46  t             doring 00000000000019FA  t            gridoff 000000000000068E  b 
              appR 0000000000002D62  t           cdg_scrn 0000000000100000  a             dostop 0000000000000F9A  t           gridsize 0000000000000692  b 
            appcha 0000000000002D00  t           cdgavail 0000000000001628  t            dostopx 0000000000000F88  t              gridv 00000000000022CC  t 
            arbtab 00000000000014B2  t             cdgbcd 0000000000002878  t             dscrep 0000000000000AFE  t               hadj 0000000000000009  a 
           arcollp 00000000000024DE  t              cdgdo 00000000000020B4  t            dwidtab 0000000000000626  t           hangfire 000000000000109A  t 
            arowlp 00000000000024E4  t           cdgflags external  ax             eERAL 0000000000000120  a               here 00000000000001B2  t 
          arrbuild 00000000000024C0  t              cdglp 0000000000001618  t             eERASE 00000000000001C0  a            hex2bcd 00000000000012A2  t 
            arrcol 0000000000002512  t             cdglp0 000000000000161A  t              eEWDS 0000000000000100  a             hexbcd 0000000000000458  b 
          arrowfrm 000000000000075C  b            cdgmode 000000000000000C  b              eEWEN 0000000000000130  a           hexbuild 0000000000000052  t 
              arup 0000000000002500  t           checkjoy 0000000000000C26  t              eREAD 0000000000000180  a              hitab 000000000000062C  t 
            audfok 0000000000000D92  t           checkvol 0000000000000C4A  t              eWRAL 0000000000000110  a            holeptr 0000000000000694  b 
             audio 000000000019203E  a             chgcol 0000000000001CDC  t             eWRITE 0000000000000140  a            horztab 0000000000000608  t 
            audvlm 00000000000004DE  b             chgrow 0000000000001B2C  t             eeprom 0000000000DFFF2C  a           iansdoit 00000000001AC1A0  a 
          backhome 0000000000000480  t            chkloop 0000000000002F48  t             eeread 00000000000030BC  t             ignkey 0000000000001600  t 
             baefx 00000000000007F8  t               chkp 0000000000000114  t            eewrfin 00000000000030AA  t            ignkeyx 0000000000001652  t 
           bankneg 00000000000029B8  t             chksum 0000000000000006  b            eewrite 0000000000003066  t            imatrix 00000000001AF068  a 
          bankneg0 00000000000029C8  t           chngdisp 000000000000313C  t              eewrx 00000000000030B4  t            initcdg external  ax
             banko 000000000000287E  t            cnumber external  ax            endseq 0000000000000B0A  t            initgpu external  ax
           bankout 0000000000002844  t             colona 00000000000000E1  a             entbox 0000000000001E22  t               inlp 00000000000030DC  t 
           bcd2hex 000000000000127C  t             colons 0000000000002A32  t           err_flag 0000000000003E00  a             intchk 000000000000046E  t 
            bcdbad 000000000000129E  t             colzok 00000000000006CE  t           exitplay 000000000000104E  t            islongw 0000000000002152  t 
            bclear 0000000000001E5E  t           constant 0000000000002F9E  t           fastrate 0000000000000D74  t             itsBCD 0000000000000250  t 
            bd2clr 0000000000001E5C  t            cursimg 0000000000199A18  a              filby 0000000000002544  t           itspanin 0000000000002B5C  t 


                                        src/cdfront.s        Page 120     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)
Symbol Table

           jabanks 00000000000004C4  t            nodwnar 00000000000023BA  t            outbndz 0000000000000E04  t             reblit 0000000000002910  t 
            jaeffs 00000000000004AA  t            nofireA 000000000000107A  t           outuptrk 0000000000002428  t              rectv 000000000000001B  a 
            jeffgo 0000000000000594  t              nojoy 0000000000001220  t              outxb 0000000000003106  t            reframe 000000000000000E  b 
            jeffoh 000000000000059C  t            nom3chg 0000000000001A38  t                 ov 0000000000002ED0  t           relpause 0000000000000F08  t 
           joyprev 0000000000000036  b            nom3sel 0000000000001E26  t                ov1 0000000000002EEE  t           repaller 00000000000000FA  t 
             just1 00000000000007AE  t            nomwrap 0000000000001B36  t            ovbttab 00000000000013F4  t           reptmode 000000000000000A  b 
           justhel 00000000000007AA  t           nomwrap1 0000000000001C24  t            ovrmseq 0000000000000EBA  t             rerand 0000000000002EB4  t 
           keychk0 00000000000015EE  t           nomwrap2 0000000000001DBE  t             ovstop 000000000000078C  t              restn 0000000000002B18  t 
            keygot 00000000000016AC  t           nomwrap3 0000000000001D54  t             ovtabz 0000000000000638  t            retcode 0000000000000258  b 
           keygot1 00000000000016AA  t           nomwrapx 0000000000001DC4  t            ovtabzz 0000000000000662  t            retrack 000000000000092C  t 
             keylp 0000000000001684  t            nonBset 0000000000001E66  t            ovtbtab 000000000000138A  t             return 0000000000000050  b 
            keylp1 0000000000001692  t           nonBsetx 0000000000001E8E  t            ovwaits 0000000000000E2C  t             retvlm 0000000000001250  t 
            keynoe 00000000000019CC  t             noprel 00000000000011B4  t                ovx 0000000000002ECC  t              revlm 0000000000002004  t 
            keytab 000000000000169E  t             noseqm 0000000000001FE8  t             owdata 00000000000026EA  t             rgbpal external  ax
           keytime 00000000000004F8  b             nosubd 0000000000000BA8  t            pad_now 00000000001AE00C  a              ring1 000000000000260E  t 
          listins1 0000000000001F3A  t            nosubdx 00000000000009F2  t                pal 00000000001FD426  a             ringit 00000000000025E2  t 
          listinst 0000000000001F32  t            nosubdz 00000000000009C6  t            palindx 0000000000000620  t            rltimok 00000000000011D8  t 
           locbank 00000000000004EE  b             not2hi 0000000000002814  t             paller 0000000000001434  t              rmseq 0000000000000EB6  t 
            loceff 00000000000004F0  b            not2ndr 0000000000002424  t            pallerx 0000000000001446  t             rmwtab 000000000000061A  t 
            lrelez 00000000000010EE  t           notJedit 0000000000000518  t            palmove 00000000000000C6  t              rowan 0000000000001AEE  t 
            lsetez 0000000000001208  t             notdep 0000000000001404  t            palmovi 00000000000000C8  t            samRLDU 00000000000015B2  t 
             m3col 000000000000003E  b           notextrn 000000000000036C  t            palsize 00000000000000B6  t             samebf 0000000000001C36  t 
             m3opt 0000000000000042  b              notm3 000000000000167A  t             panwid 0000000000002B38  t            samesam 0000000000001C70  t 
            m3prev 000000000000003A  b            notpaws 0000000000001414  t               panx 0000000000002B2E  t             samode 00000000000007CC  t 
             m3row 0000000000000040  b           notrbank 00000000000004A2  t              pause 0000000000000014  b            savekey 0000000000001682  t 
           m3trans 000000000000145C  t             notrgb 0000000000001428  t               paws 0000000000000F40  t             sbasex 0000000000000000  a 
              m3tx 0000000000001674  t            notvlmr 00000000000004E6  t            pixdtab 0000000000000632  t            scammin 0000000000000D14  t 
             m3txx 000000000000166E  t             notvol 000000000000043E  t           planoffd 0000000000002532  t               scan 0000000000000012  b 
           maxcolx 0000000000001D4E  t            novauto 0000000000000C7C  t           planoffu 000000000000253C  t            scanbeg 00000000000011BE  t 
            maxmin 0000000000000020  b            novobar 0000000000001DEC  t              plant 000000000000256E  t           scanbeg1 00000000000011F6  t 
           maxmodz 0000000000001E90  t             nowind 0000000000001E14  t           plantard 000000000000255C  t            scancnt 000000000000001C  b 
             mbcdg 0000000000001278  t             nrmbox 0000000000001B08  t           plantaru 0000000000002568  t           scanfcnt 0000000000000016  b 
             mcolx 0000000000002608  t            ntrkrep 0000000000000AB0  t               play 0000000000000010  b            scanrel 00000000000004D8  b 
            midtab 0000000000001CD8  t           nvlmkill 00000000000021B4  t             playno 0000000000001152  t           scantime 0000000000000018  b 
           modecnt 00000000000004DC  b            objcopi 000000000000069C  b               pout 000000000000295A  t           scanundr 0000000000000DDA  t 
             moseq 0000000000000894  t            offgrid 0000000000001C7A  t                pox 00000000000028D8  t              scdgm 0000000000001EE2  t 
            multar 00000000000025A6  t            offhelp 0000000000002DD4  t              print 000000000019483A  a             scdgmx 0000000000001EE6  t 
          mustbcdg 000000000000125A  t            offline 000000000000293A  t           printout 00000000000028CA  t             scgmlp 0000000000001ED2  t 
            myFont 0000000000198CB0  a            offrame 00000000000004E8  b             printx 00000000000029B2  t           screnclr 0000000000002AA8  t 
           nOption 0000000000000E92  t               offv 0000000000000426  t              prinx 00000000000028FC  t            secnkey 00000000000017A6  t 
            negadj 0000000000000A58  t             offvol 00000000000010C2  t           progenty 0000000000000690  b              secok 0000000000000DC6  t 
          newtrkgd 0000000000001176  t            offwait 000000000000056C  t             proglp 0000000000002E98  t             secokx 0000000000000DF6  t 
           nextBCD 0000000000000234  t           offwait1 000000000000057E  t            progseq 00000000000005C6  b               seed 0000000000002F9A  t 
            nfAtrx 0000000000000ED2  t                oit 0000000000001984  t           progseqm 0000000000001F6C  t             seeker 00000000000017B6  t 
          nfireAtr 0000000000000EDC  t           onepage3 external  ax            progup 00000000000022D0  t            seqmode 0000000000000008  b 
            noAmin 00000000000008F8  t            oneshot 000000000000004E  b             radiob 0000000000002BD8  t           seqnoevl 000000000000075A  t 
           noAmind 0000000000000A4A  t            onetime 00000000000003F4  t             radiok 0000000000002C28  t             serial 0000000000000071  a 
            noAsec 00000000000008E4  t              onffx 0000000000002DD6  t              randf 0000000000002EA4  t            service 0000000000000302  t 
           noAsecd 0000000000000A34  t             onhelp 0000000000002DD0  t           randloop 0000000000002EB2  t               set0 000000000000103E  t 
           noRmind 0000000000000A7E  t              only1 000000000000211C  t             randlp 0000000000002E70  t            set3col 0000000000001AF8  t 
           noRsecd 0000000000000A68  t             onoffh 0000000000002DE2  t            randrow 0000000000001B5C  t              setEE 0000000000003032  t 
            noSbit 0000000000000B8A  t            origEND 0000000000000250  b            randtrk 0000000000002950  t           setcolin 0000000000000774  t 
             noTdo 0000000000000B6A  t           our_mode 00000000000004DA  b              randy 0000000000002EAC  t            setdefs 0000000000000034  t 
           no_ksel 0000000000194F66  a             ourreg 0000000000000046  b               rate 0000000000000D90  t              setlo 00000000000019DE  t 
           nobaefx 0000000000000844  t           out16bit 00000000000030F2  t            readpad 0000000000196446  a            setnorm 0000000000001F9E  t 
          nochkend 00000000000008A4  t           out9bits 00000000000030F8  t            realTOC 0000000000002C00  a           setnormx 0000000000001FE2  t 


                                        src/cdfront.s        Page 121     5:03:02 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)
Symbol Table

          setpause 0000000000000F24  t            trksptr 00000000000004FA  b 
           setscan 0000000000000CC6  t           trksptrp 00000000000004FC  b 
           settrkp 0000000000001FD6  t             trucku 000000000000116E  t 
           setvlmm 00000000000005AE  t            truckup 000000000000115C  t 
           setvlmx 00000000000005C0  t             trucky 000000000000116C  t 
             shite 0000000000000011  a             turnon 000000000000078C  t 
              skid 00000000001AF05E  a                ud1 00000000000027F0  t 
            skidoo 0000000000195076  a              udset 00000000000011EA  t 
          skiphelp 00000000000005E0  t            unpawzd 0000000000000FE0  t 
           skipvol 00000000000010DC  t            unscand 0000000000001120  t 
          slowrate 0000000000000D58  t            uparrow 0000000000002516  t 
           srcxtab 0000000000002924  t           updownon 00000000000011CA  t 
          starplay 0000000000000FF6  t           uprantrk 00000000000023C4  t 
             start 000000000000000C  t            uptrker 00000000000023E4  t 
           staytop 0000000000001DBC  t             uptrkr 000000000000240E  t 
          stilldwn 0000000000000C86  t             uptrkx 000000000000242A  t 
           stopcdg external  ax            uptrxx 00000000000023F4  t 
           stopout 00000000000027AE  t            verptab 0000000000000614  t 
            string 0000000000002AFC  t               vers 0000000000000004  b 
           stringb 0000000000002B0C  t             vertab 000000000000060E  t 
           stringx 0000000000002B24  t            vertdig 0000000000000016  a 
          stuffvlm 0000000000000E78  t           vlm_mode 00000000001AE02A  a 
           subcode external  ax             vlmdk 0000000000003206  t 
           suboffs 00000000000009FA  t            vlmlogo 000000000019ADD0  a 
           suboffz 0000000000000B84  t             vlmnoe 0000000000001476  t 
            subqlp 0000000000000B8C  t            vlmrand 00000000000004E2  b 
          subtbwid 00000000000000AC  a           vlmrdcnt 000000000000069A  b 
            subupd 0000000000000A00  t            vlmrfrm 00000000000004E4  b 
           subupd0 0000000000000A12  t             vlmtim 00000000001AF06E  a 
           subupdx 00000000000009D6  t            volfcnt 00000000000004EA  b 
           subupdz 00000000000009AE  t             volptr 0000000000000000  b 
              swid 000000000000000A  a             voltab 0000000000003184  t 
             swidx 000000000000000A  a            voltimr 00000000000004EC  b 
            tablop 0000000000001334  t           volupdwn 00000000000027E0  t 
           tabuild 0000000000001378  t              volux 0000000000001AD0  t 
            timeok 00000000000010D0  t               wadj 0000000000000008  a 
             track 000000000000001E  b             wedele 00000000000021C4  t 
          transtab 0000000000001DEA  t             werow1 0000000000001E94  t 
           trkback 0000000000002256  t            werow1x 0000000000001EE8  t 
           trkdeci 0000000000002F7C  t             werowB 00000000000021C8  t 
            trkfni 00000000000021FE  t            werowBi 00000000000021CA  t 
           trkfnlp 00000000000021F8  t               weup 000000000000280C  t 
          trkfnlp1 000000000000222C  t             workEE 0000000000000000  b 
            trkfnx 00000000000022CA  t               xadj 0000000000000004  a 
           trkgood 000000000000095A  t               yadj 0000000000000005  a 
             trkhi 000000000000094C  t           yeavauto 0000000000000C68  t 
           trkinci 0000000000002F80  t 
           trknfol 00000000000022A4  t 
           trkplay 0000000000002F52  t 
          trkptrfx 0000000000002F22  t 
          trkptrsm 0000000000002F60  t 
           trksame 000000000000097C  t 
            trksec 000000000000098C  t 
            trkseq 00000000000004FE  b 
             trksm 0000000000002F82  t 
           trksmlp 0000000000002F8A  t 

