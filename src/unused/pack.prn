
                                        src/pack.s           Page 1       4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


    1                                   ;************************************************************************
    2                                   ;* TITLE	: PACK.S						*
    3                                   ;* Function	: CD+G processing routines				*
    4                                   ;*									*
    5                                   ;* Project #	: JAGUAR CD+G						*
    6                                   ;* Programmer	: Pradip K Fatehpuria	09/22/94			*
    7                                   ;*									*
    8                                   ;* COPYRIGHT(c) 1992,1993 Atari Computer Corporation			*
    9                                   ;* UNATHORIZED REPRODUCTION, ADAPTATION, DISTRIBUTION, PERFORMANCE OR	*
   10                                   ;* DISPLAY OF THIS COMPUTER PROGRAM OR THE ASSOCIATED AUDIOVISUAL WORK	*
   11                                   ;* IS STRICTLY PROHIBITED.						*
   12                                   ;* ALL RIGHTS RESERVED.							*
   13                                   ;************************************************************************
   14                                   ;*									*
   15                                   ;* INSTRUCTIONS FOR INTEGRATION 					*
   16                                   ;*									*
   17                                   ;*======================================================================*
   18                                   ;*									*
   19                                   ;* initgpu()	: should be called before the audio playback starts	*
   20                                   ;*									*
   21                                   ;* initcdg()	: should be called to initialise the CD+G valrables	*
   22                                   ;*		  and interrupts					*
   23                                   ;*									*
   24                                   ;* stopcdg()	: stops the GPU program and disables CD+G		*
   25                                   ;*									*
   26                                   ;* subcode()	: reads subcode data from GPU memory and processes them	*
   27                                   ;*									*
   28                                   ;* dispsub()	: updates the screen for CD+G, CLUT and border color,	*
   29                                   ;*		  needed.  This routine should	be called once for	*
   30                                   ;*		  each video frame					*
   31                                   ;*									*
   32                                   ;*======================================================================*
   33                                   ;*									*
   34                                   ;* TvChnlAv(.w)	: the TV channel numbers available.  bit set means	*
   35                                   ;*		  the particular channel is available.			*
   36                                   ;*									*
   37                                   ;* TvChnlNo(.b) : the current CD+G channel to be displayed.  User	*
   38                                   ;*		  should be allowed to change this value (0-15).	*
   39                                   ;*									*
   40                                   ;* cdgflags(.b)	: set/clear bit 0 in this byte variable to start	*
   41                                   ;*		  processing for subcode or skipping subcode data	*
   42                                   ;*									*
   43                                   ;************************************************************************
   44                                   
   45                                   	.title	"PROCESS CD+G PACKS"
   46                                   
   47                                   ;*======================================================================*
   48                                   ;* HEADER FILES								*
   49                                   ;*======================================================================*
   50                                   
   51                                   	.include 'jaguar.inc'
    1                                   ;****************************************************************************
    2                                   ;
    3                                   ;	JAGUAR.INC  Hardware Equates for JAGUAR System
    4                                   ;
    5                                   ;			COPYRIGHT 1994 Atari Computer Corporation


PROCESS CD+G PACKS                      jaguar.inc           Page 2       4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


    6                                   ;          UNATHORIZED REPRODUCTION, ADAPTATION, DISTRIBUTION,   
    7                                   ;          PERFORMANCE OR DISPLAY OF THIS COMPUTER PROGRAM OR    
    8                                   ;        THE ASSOCIATED AUDIOVISUAL WORK IS STRICTLY PROHIBITED. 
    9                                   ;                            ALL RIGHTS RESERVED.		
   10                                   ;
   11                                   ;****************************************************************************
   12                                   ;
   13                                   ;
   14                                   ;	JAGUAR REGISTERS
   15                                   ;
   16           =00F00000               BASE		equ	$F00000	;TOM Internal Register Base
   17                                   ;
   18                                   ;
   19                                   ;			       size R/W description
   20           =00F00000               MEMCON1		equ	$F00000	;w RW Memory Configuration Register One
   21           =00F00002               MEMCON2		equ	$F00002	;w RW Memory Configuration Register Two
   22                                   ;
   23           =00F00004               HC		equ	$F00004	;w RW Horizontal Count
   24           =00F00006               VC		equ	$F00006	;w RW Vertical Count
   25                                   ;
   26           =00F00008               LPH		equ	$F00008	;w RO Horizontal Lightpen
   27           =00F0000A               LPV		equ	$F0000A	;w RO Vertical Lightpen
   28                                   ;
   29                                   ;		equ	$F0000C	;w (unused)
   30                                   ;		equ	$F0000E	;w (unused)
   31                                   ;
   32                                   ;
   33           =00F00010               OB0		equ	$F00010	;w RO Current Object Phrase
   34           =00F00012               OB1		equ	$F00012	;w RO
   35           =00F00014               OB2		equ	$F00014	;w RO 
   36           =00F00016               OB3		equ	$F00016	;w RO
   37                                   ;
   38                                   ;	$F00018-$F0001E	(reserved)
   39                                   ;
   40           =00F00020               OLP		equ	$F00020	;l WO Object List Pointer (little endian)
   41           =00F00024               ODP		equ	$F00024	;w    Object Data Pointer
   42           =00F00026               OBF		equ	$F00026	;w WO Object Processor Flag
   43                                   ;
   44           =00F00028               VMODE		equ	$F00028	;w WO Video Mode
   45                                   ;
   46           =00F0002A               BORD1		equ	$F0002A	;w WO Border Color (Red & Green)
   47           =00F0002C               BORD2		equ	$F0002C	;w WO Border Color (Blue)
   48                                   ;
   49           =00F0002E               HP		equ	$F0002E	;w WO Horizontal Period
   50           =00F00030               HBB		equ	$F00030	;w WO Horizontal Blanking Begin
   51           =00F00032               HBE		equ	$F00032	;w WO Horizontal Blanking End
   52           =00F00034               HS		equ	$F00034	;w WO Horizontal Sync
   53           =00F00036               HVS		equ	$F00036	;w WO Horizontal Vertical Sync
   54           =00F00038               HDB1		equ	$F00038	;w WO Horizontal Display Begin One
   55           =00F0003A               HDB2		equ	$F0003A	;w WO Horizontal Display Begin Two
   56           =00F0003C               HDE		equ	$F0003C	;w WO Horizontal Display End
   57           =00F0003E               VP		equ	$F0003E	;w WO Vertical Period
   58           =00F00040               VBB		equ	$F00040	;w WO Vertical Blanking Begin
   59           =00F00042               VBE		equ	$F00042	;w WO Vertical Blanking End
   60           =00F00044               VS		equ	$F00044	;w WO Vertical Sync
   61           =00F00046               VDB		equ	$F00046	;w WO Vertical Display Begin


PROCESS CD+G PACKS                      jaguar.inc           Page 3       4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   62           =00F00048               VDE		equ	$F00048	;w WO Vertical Display End
   63           =00F0004A               VEB		equ	$F0004A	;w WO Vertical equalization Begin
   64           =00F0004C               VEE		equ	$F0004C	;w WO Vertical equalization End
   65           =00F0004E               VI		equ	$F0004E	;w WO Vertical Interrupt
   66           =00F00050               PIT0		equ	$F00050	;w WO Programmable Interrupt Timer (Lo)
   67           =00F00052               PIT1		equ	$F00052	;w WO Programmable Interrupt Timer (Hi)
   68           =00F00054               HEQ		equ	$F00054	;w WO Horizontal equalization End
   69           =00F00056               TEST1		equ	$F00056	;w    Undocumented Register - DO NOT USE
   70           =00F00058               BG		equ	$F00058	;w WO Background Color
   71                                   ;
   72                                   ;	$F0005A-$F000DE  (reserved)
   73                                   ;
   74           =00F000E0               INT1		equ	$F000E0	;w RW CPU Interrupt Control Register
   75           =00F000E2               INT2		equ	$F000E2	;w WO CPU Interrupt Resume Register
   76                                   ;
   77                                   ;	$F000E4-$F003FE  (reserved)
   78                                   ;
   79           =00F00400               CLUT		equ	$F00400	;w RW -$F005FE Color Lookup Table (A)
   80                                   ;				;w RW -$F007FE Color Lookup Table (B)
   81           =00F00800               LBUFA		equ	$F00800	;w RW -$F00D9E Line Buffer A
   82                                   ;	$F00DA0-$F00FFE  (reserved)
   83           =00F01000               LBUFB		equ	$F01000	;w RW -$F0159E Line Buffer B
   84                                   ;	$F015A0-$F017FE  (reserved)
   85           =00F01800               LBUFC		equ	$F01800	;w RW -$F01D9E Line Buffer Current
   86                                   ;
   87                                   ;	$F01DA0-$F01FFE  (reserved)
   88                                   ;
   89                                   ;	$F02000-$F020FE  (reserved)
   90                                   ;
   91                                   ;	GPU REGISTERS
   92                                   ;
   93           =00F02100               G_FLAGS 	equ	$F02100	;l RW GPU Flags
   94           =00F02104               G_MTXC		equ	$F02104	;l WO GPU Matrix Control
   95           =00F02108               G_MTXA		equ	$F02108	;l WO GPU Matrix Address
   96           =00F0210C               G_END		equ	$F0210C	;l WO GPU Data Organization
   97           =00F02110               G_PC		equ	$F02110	;l RW GPU Program Counter
   98           =00F02114               G_CTRL		equ	$F02114	;l RW GPU Operation Control/Status
   99           =00F02118               G_HIDATA 	equ	$F02118	;l RW GPU Bus Interface high data
  100           =00F0211C               G_REMAIN 	equ	$F0211C	;l RO GPU Division Remainder
  101           =00F0211C               G_DIVCTRL 	equ	$F0211C	;l WO DSP Divider control
  102                                   ;
  103                                   ;	$F02120-$F021FE  (reserved)
  104                                   ;
  105                                   ;	BLTTER REGISTERS
  106                                   ;
  107           =00F02200               A1_BASE 	equ	$F02200	;l WO A1 Base Address
  108           =00F02204               A1_FLAGS	equ	$F02204	;l WO A1 Control Flags
  109           =00F02208               A1_CLIP		equ	$F02208	;l WO A1 Clipping Size
  110           =00F0220C               A1_PIXEL	equ	$F0220C	;l RW A1 Pixel Pointer
  111           =00F02210               A1_STEP		equ	$F02210	;l WO A1 Step (Integer Part)
  112           =00F02214               A1_FSTEP	equ	$F02214	;l WO A1 Step (Fractional Part)
  113           =00F02218               A1_FPIXEL	equ	$F02218	;l RW A1 Pixel Pointer (Fractional)
  114           =00F0221C               A1_INC		equ	$F0221C	;l WO A1 Increment (Integer Part)
  115           =00F02220               A1_FINC		equ	$F02220	;l WO A1 Increment (Fractional Part)
  116           =00F02224               A2_BASE		equ	$F02224	;l WO A2 Base Address
  117           =00F02228               A2_FLAGS	equ	$F02228	;l WO A2 Control Flags


PROCESS CD+G PACKS                      jaguar.inc           Page 4       4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  118           =00F0222C               A2_MASK		equ	$F0222C	;l WO A2 Address Mask
  119           =00F02230               A2_PIXEL	equ	$F02230	;l RW A2 PIXEL
  120           =00F02234               A2_STEP		equ	$F02234	;l WO A2 Step (Integer)
  121                                   ;
  122           =00F02238               B_CMD		equ	$F02238	;l WO Command
  123                                   				;l RO Status
  124                                   ;
  125           =00F0223C               B_COUNT		equ	$F0223C	;l WO Counters
  126           =00F02240               B_SRCD		equ	$F02240	;2xl WO Source Data
  127           =00F02248               B_DSTD		equ	$F02248	;2xl WO Destination Data
  128           =00F02250               B_DSTZ		equ	$F02250	;2xl WO Destination Z
  129           =00F02258               B_SRCZ1		equ	$F02258	;2xl WO Source Z (Integer)
  130           =00F02260               B_SRCZ2		equ	$F02260	;2xl WO Source Z (Fractional)
  131           =00F02268               B_PATD		equ	$F02268	;2xl WO Pattern Data
  132           =00F02270               B_IINC		equ	$F02270	;l WO Intensity Increment
  133           =00F02274               B_ZINC		equ	$F02274	;l WO Z Increment
  134           =00F02278               B_STOP		equ	$F02278	;l WO Collision stop control
  135                                   ;
  136           =00F0227C               B_I3		equ	$F0227C	;l WO Blitter Intensity 3
  137           =00F02280               B_I2		equ	$F02280	;l WO Blitter Intensity 2
  138           =00F02284               B_I1		equ	$F02284	;l WO Blitter Intensity 1
  139           =00F02288               B_I0		equ	$F02288	;l WO Blitter Intensity 0
  140                                   ;
  141           =00F0228C               B_Z3		equ	$F0228C	;l WO Blitter Z 3
  142           =00F02290               B_Z2		equ	$F02290	;l WO Blitter Z 2
  143           =00F02294               B_Z1		equ	$F02294	;l WO Blitter Z 1
  144           =00F02298               B_Z0		equ	$F02298	;l WO Blitter Z 0
  145                                   ;
  146                                   ;	$F0229C-$F02FFC  (reserved)
  147                                   ;
  148                                   ;
  149           =00F03000               G_RAM		equ	$F03000	;l RW GPU Internal sRAM
  150           =00F04000               G_ENDRAM	equ	$F04000	;  end GPU internal sRAM (+1), 4K bytes
  151                                   ;
  152                                   ;	$F04000-$F09FFC (reserved)
  153                                   ;
  154                                   ;	$F0A000-$F0A0FC (reserved)
  155                                   ;
  156                                   ;
  157                                   ;	$F0A100-$F0BFFC (hi speed WO access of $F02100-$F03FFC, longwords only)	
  158                                   ;
  159                                   ;
  160                                   ;	$F0C000-$F0FFFC (reserved)
  161                                   ;
  162                                   ;	JERRY TIMERS
  163                                   ;
  164           =00F10000               JPIT1		equ	$F10000	;w WO Timer 1 Pre-Scaler
  165           =00F10002               JPIT2		equ	$F10002	;w WO Timer 1 Divider
  166           =00F10004               JPIT3		equ	$F10004	;w WO Timer 2 Pre-Scaler
  167           =00F10006               JPIT4		equ	$F10006	;w WO Timer 2 Divider
  168                                   ;
  169                                   ;	$F10008-$F1000E  (reserved)
  170                                   ;
  171           =00F10010               CLK1		equ	$F10010	;w WO Processor Clock Frequency
  172           =00F10012               CLK2		equ	$F10012	;w WO Video Clock Frequency
  173           =00F10014               CHRO_CLK	equ	$F10014	;w WO Chroma clock control


PROCESS CD+G PACKS                      jaguar.inc           Page 5       4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  174                                   ;
  175                                   ;	$F10016-$F1001E  (reserved)
  176                                   ;
  177           =00F10020               J_INT		equ	$F10020	;w RW Jerry's Interrupt control Register
  178                                   ;
  179                                   ;	$F10022-$F1002E  (reserved)
  180                                   ;
  181           =00F10030               ASIDATA		equ	$F10030	;w RW Asynchronous Serial Data
  182           =00F10032               ASICTRL		equ	$F10032	;w WO Asynchronous Serial Control
  183           =00F10032               ASISTAT		equ	$F10032	;w RO Asynchronous Serial Status
  184           =00F10034               ASICLK		equ	$F10034	;w RW Asynchronous Serial Interface Clock
  185                                   ;
  186                                   ;
  187                                   ;	JERRY TIMERS READ ACCESS
  188                                   ;
  189                                   ;			$F10036	;w RO Timer 1 Pre-Scaler
  190                                   ;			$F10038	;w RO Timer 1 Divider
  191                                   ;			$F1003A	;w RO Timer 2 Pre-Scaler
  192                                   ;			$F1003C	;w RO Timer 2 Divider
  193                                   ;
  194                                   ;	$F10040-$F13FFC  (reserved)
  195                                   ;
  196           =00F14000               JOY1		equ	$F14000	;w RW Joystick register 
  197           =00F14002               JOY2		equ	$F14002	;w RW Button register 
  198                                   ;
  199                                   ;	$F14004-$F147FC  (reserved)
  200                                   ;
  201                                   ;
  202                                   ;	General Purpose IO
  203                                   ;
  204           =00F14800               GPIO_0		equ	$F14800	;w -$F14FFE Used by EEPROM code
  205           =00F15000               GPIO_1		equ	$F15000	;w -$F15FFE
  206           =00F16000               GPIO_2		equ	$F16000	;w -$F16FFE
  207           =00F17000               GPIO_3		equ	$F17000	;w -$F177FE
  208           =00F17800               GPIO_4		equ	$F17800	;w -$F17BFE
  209           =00F17C00               GPIO_5		equ	$F17C00	;w -$F17FFE
  210                                   ;
  211                                   ;	$F18000-$F1A0FC  (reserved)
  212                                   ;
  213                                   ;
  214                                   ;	JERRY Registers (DSP)
  215                                   ;
  216           =00F1A100               D_FLAGS		equ	$F1A100	;l RW DSP Flags
  217           =00F1A104               D_MTXC		equ	$F1A104	;l WO DSP Matrix Control
  218           =00F1A108               D_MTXA		equ	$F1A108	;l WO DSP Matrix Address
  219           =00F1A10C               D_END		equ	$F1A10C	;l WO DSP Data Organization
  220           =00F1A110               D_PC		equ	$F1A110	;l RW DSP Program Counter
  221           =00F1A114               D_CTRL		equ	$F1A114	;l RW DSP Operation Control/Status
  222           =00F1A118               D_HIDATA 	equ	$F1A118	;l WO DSP Bus Interface high data
  223           =00F1A11C               D_REMAIN 	equ	$F1A11C	;l RO DSP Division Remainder
  224           =00F1A11C               D_DIVCTRL 	equ	$F1A11C	;l WO DSP Divider control
  225                                   ;
  226                                   ;
  227                                   ;	$F1A120-$F1A13C  (reserved)
  228                                   ;
  229                                   ;	PULSE WIDTH MODULATION DACs


PROCESS CD+G PACKS                      jaguar.inc           Page 6       4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  230                                   ;
  231           =00F1A140               DAC1		equ	$F1A140	;l WO Left 14-bit DAC
  232           =00F1A144               DAC2		equ	$F1A144	;l WO Right 14-bit DAC
  233                                   ;
  234                                   ;	I2S transmit/receive data
  235           =00F1A148               LTXD		equ	$F1A148	;l WO Left 16-bit transmit data 
  236           =00F1A148               LRXD		equ	$F1A148	;l RO Left 16-bit receive data 
  237                                   ;
  238           =00F1A14C               RTXD		equ	$F1A14C	;l WO Right 16-bit transmit data 
  239           =00F1A14C               RRXD		equ	$F1A14C	;l RO Right 16-bit receive data 
  240                                   ;
  241                                   ;
  242                                   ;	$F1A148-$F1A14C  (reserved)
  243                                   ;
  244                                   ;
  245           =00F1A150               SCLK		equ	$F1A150	;l WO SSI Clock Frequency
  246           =00F1A150               SSTAT		equ	$F1A150	;l RO Serial Status
  247           =00F1A154               SMODE		equ	$F1A154	;l WO SSI Control
  248                                   ;
  249                                   ;
  250                                   ;	$F1A158-$F1AFFC  (reserved)
  251                                   ;
  252           =00F1B000               D_RAM		equ	$F1B000	; DSP Internal RAM
  253           =00F1D000               D_ENDRAM	equ	$F1D000	; End of sRAM (+1) 8K bytes
  254                                   ;
  255                                   ;
  256                                   ;	ROM Tables built into Jerry 128 samples
  257                                   ;	16 bit samples sign extended to 32
  258                                   ;
  259           =00F1D000               ROM_TABLE   	equ	$F1D000	; Base of tables
  260                                   ;
  261                                   ; These are NEW CHANGED DIFFERENT equates they should cause less confusion
  262                                   ;
  263           =00F1D000               ROM_TRI     	equ	$F1D000	; A triangle wave
  264           =00F1D200               ROM_SINE    	equ	$F1D200	; Full amplitude SINE
  265           =00F1D400               ROM_AMSINE  	equ	$F1D400	; Linear (?) ramp SINE
  266           =00F1D600               ROM_SINE12W 	equ	$F1D600	; SINE(X)+SINE(2*X)
  267           =00F1D800               ROM_CHIRP16 	equ	$F1D800	; SHORT SWEEP
  268           =00F1DA00               ROM_NTRI    	equ	$F1DA00	; Triangle w/NOISE
  269           =00F1DC00               ROM_DELTA   	equ	$F1DC00	; Positive spike
  270           =00F1DE00               ROM_NOISE   	equ	$F1DE00	; Guess
   52                                   	.include 'blitter.inc'
    1                                   ;*======================================================================*
    2                                   ;* TITLE	: BLIT.INC						*
    3                                   ;* Function	: Blitter Definitions					*
    4                                   ;*									*
    5                                   ;* Project #	: JAGUAR						*
    6                                   ;* Programmer	: Leonard Tramiel					*
    7                                   ;*		  ROB Zdybel						*
    8                                   ;*		  Andrew J. Burgess					*
    9                                   ;*									*
   10                                   ;* MODIFIED	: Pradip K Fatehpuria	10/27/93			*
   11                                   ;*									*
   12                                   ;* COPYRIGHT(c) 1992,1993 Atari Computer Corporation			*
   13                                   ;* UNATHORIZED REPRODUCTION, ADAPTATION, DISTRIBUTION, PERFORMANCE OR	*
   14                                   ;* DISPLAY OF THIS COMPUTER PROGRAM OR THE ASSOCIATED AUDIOVISUAL WORK	*


PROCESS CD+G PACKS                      blitter.inc          Page 7       4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   15                                   ;* IS STRICTLY PROHIBITED.						*
   16                                   ;* ALL RIGHTS RESERVED.							*
   17                                   ;*									*
   18                                   ;*======================================================================*
   19                                   
   20                                   ;*======================================================================*
   21                                   ;*	ADDRESS REGISTERS - SEE JAGUAR.INC				*
   22                                   ;*======================================================================*
   23                                   
   24                                   ;*======================================================================*
   25                                   ;*	BLITTER COMMAND REGISTER EQUATES				*
   26                                   ;*======================================================================*
   27                                   
   28           =00000001               SRCEN		EQU	$00000001	; d00	 : source data read (inner loop)
   29           =00000002               SRCENZ		EQU	$00000002	; d01	 : source Z read (inner loop)
   30           =00000004               SRCENX		EQU	$00000004	; d02	 : source data read (realign)
   31           =00000008               DSTEN		EQU	$00000008	; d03	 : destination data read (inner loop)
   32           =00000010               DSTENZ		EQU	$00000010	; d04	 : destination Z read (inner loop)
   33           =00000020               DSTWRZ		EQU	$00000020	; d05	 : destination Z write (inner loop)
   34           =00000040               CLIP_A1		EQU	$00000040	; d06	 : A1 clipping enable
   35           =00000080               NOGO		EQU	$00000080	; d07	 : diagnostic
   36           =00000100               UPDA1F		EQU	$00000100	; d08	 : A1 update step fraction
   37           =00000200               UPDA1		EQU	$00000200	; d09	 : A1 update step
   38           =00000400               UPDA2		EQU	$00000400	; d10	 : A2 update step
   39           =00000800               DSTA2		EQU	$00000800	; d11	 : reverse usage of A1 and A2
   40           =00001000               GOURD		EQU	$00001000	; d12	 : enable Gouraud shading
   41           =00002000               ZBUFF		EQU	$00002000	; d13	 : polygon Z data updates
   42           =00004000               TOPBEN		EQU	$00004000	; d14	 : intensity carry into byte
   43           =00008000               TOPNEN		EQU	$00008000	; d15	 : intensity carry into nibble
   44           =00010000               PATDSEL		EQU	$00010000	; d16	 : Select pattern data
   45           =00020000               ADDDSEL		EQU	$00020000	; d17	 : diagnostic
   46                                   					; d18-d20: Z comparator inhibit
   47           =00040000               ZMODELT		EQU	$00040000	;		source < destination
   48           =00080000               ZMODEEQ		EQU	$00080000	;		source = destination
   49           =00100000               ZMODEGT		EQU	$00100000	;		source > destination
   50                                   					; d21-d24: Logic function control
   51           =00200000               LFU_NAN		EQU	$00200000	;		!source & !destination
   52           =00400000               LFU_NA		EQU	$00400000	;		!source &  destination
   53           =00800000               LFU_AN		EQU	$00800000	;		 source & !destination
   54           =01000000               LFU_A		EQU	$01000000	;		 source &  destination
   55                                   
   56                                   ;*======================================================================*
   57                                   ;*	THESE ARE ALL 16 POSSIBLE LOGICAL OPERATIONS OF THE LFUs	*
   58                                   ;*======================================================================*
   59                                   
   60           =00000000               LFU_ZERO	EQU	$00000000	; All Zeros
   61           =00200000               LFU_NSAND	EQU	$00200000	; NOT Source AND NOT Destination
   62           =00400000               LFU_NSAD	EQU	$00400000	; NOT Source AND Destination
   63           =00600000               LFU_NOTS	EQU	$00600000	; NOT Source
   64           =00800000               LFU_SAND	EQU	$00800000	; Source AND NOT Destination
   65           =00A00000               LFU_NOTD	EQU	$00A00000	; NOT Destination
   66           =00C00000               LFU_N_SXORD	EQU	$00C00000	; NOT (Source XOR Destination)
   67           =00E00000               LFU_NSORND	EQU	$00E00000	; NOT Source OR NOT Destination
   68           =01000000               LFU_SAD		EQU	$01000000	; Source AND Destination
   69           =01200000               LFU_SXORD	EQU	$01200000	; Source XOR Destination
   70           =01400000               LFU_D		EQU	$01400000	; Destination


PROCESS CD+G PACKS                      blitter.inc          Page 8       4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   71           =01600000               LFU_NSORD	EQU	$01600000	; NOT Source OR Destination
   72           =01800000               LFU_S		EQU	$01800000	; Source
   73           =01A00000               LFU_SORND	EQU	$01A00000	; Source OR NOT Destination
   74           =01C00000               LFU_SORD	EQU	$01C00000	; Source OR Destination
   75           =01E00000               LFU_ONE		EQU	$01E00000	; All Ones
   76                                   
   77                                   ;*======================================================================*
   78                                   ;*	THESE ARE SOME COMMON COMBINATIONS WITH LESS BOOLEAN NAMES	*
   79                                   ;*======================================================================*
   80                                   
   81           =01800000               LFU_REPLACE	EQU	$01800000	; Source REPLACEs destination
   82           =01200000               LFU_XOR		EQU	$01200000	; Source XOR with destination
   83           =00000000               LFU_CLEAR	EQU	$00000000	; CLEAR destination
   84                                   
   85           =02000000               CMPDST		EQU	$02000000	; d25 : pixel compare pattern & dest
   86           =04000000               BCOMPEN		EQU	$04000000	; d26 : bit compare write inhibit
   87           =08000000               DCOMPEN		EQU	$08000000	; d27 : data compare write inhibit
   88           =10000000               BKGWREN		EQU	$10000000	; d28 : data write back
   89           =20000000               BUSHI		EQU	$20000000	; d29 : priority
   90           =40000000               SRCSHADE	EQU	$40000000	; d30 : flat shading
   91                                   
   92                                   ;*======================================================================*
   93                                   ;*	BLITTER FLAGS (A1 OR A2) REGISTER EQUATES			*
   94                                   ;*======================================================================*
   95                                   
   96                                   ;***	Pitch d00-d01
   97                                   ;***	distance between pixel phrases
   98                                   
   99           =00000000               PITCH1		EQU	$00000000	; 0 phrase gap
  100           =00000001               PITCH2		EQU	$00000001	; 1 phrase gap
  101           =00000002               PITCH4		EQU	$00000002	; 3 phrase gap
  102           =00000003               PITCH8		EQU	$00000003	; 7 phrase gap
  103                                   
  104                                   ;***	Unused d02
  105                                   
  106                                   ;***	Pixel d03-d05
  107                                   ;***	bit depth (2^n)
  108                                   
  109           =00000000               PIXEL1		EQU	$00000000	; n = 0	0 color
  110           =00000008               PIXEL2		EQU	$00000008	; n = 1	2 colors
  111           =00000010               PIXEL4		EQU	$00000010	; n = 2	4 colors 
  112           =00000018               PIXEL8		EQU	$00000018	; n = 3	8 colors
  113           =00000020               PIXEL16		EQU	$00000020	; n = 4	16 colors
  114           =00000028               PIXEL32		EQU	$00000028	; n = 5	32 colors
  115                                   
  116                                   ;***	Z offset d06-d08
  117                                   ;***	offset from phrase of pixel data from its corresponding
  118                                   ;***	Z data phrases
  119                                   
  120           =00000000               ZOFFS0		EQU	$00000000	; offset = 0	UNUSED
  121           =00000040               ZOFFS1		EQU	$00000040	; offset = 1
  122           =00000080               ZOFFS2		EQU	$00000080	; offset = 2
  123           =000000C0               ZOFFS3		EQU	$000000C0	; offset = 3
  124           =00000100               ZOFFS4		EQU	$00000100	; offset = 4
  125           =00000140               ZOFFS5		EQU	$00000140	; offset = 5
  126           =00000180               ZOFFS6		EQU	$00000180	; offset = 6


PROCESS CD+G PACKS                      blitter.inc          Page 9       4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  127           =000001C0               ZOFFS7		EQU	$000001C0	; offset = 7	UNUSED
  128                                   
  129                                   ;***	Width d09-d14
  130                                   ;***	width used for address generation
  131                                   ;***	This is a 6-bit floating point value in pixels
  132                                   ;***	4-bit unsigned exponent
  133                                   ;***	2-bit mantissa with implied 3rd bit of 1
  134                                   
  135           =00000800               WID2		EQU	$00000800	; 1.00 X 2^1  ( 4<<9)
  136           =00001000               WID4 		EQU	$00001000	; 1.00 X 2^2  ( 8<<9)
  137           =00001400               WID6		EQU	$00001400	; 1.10 X 2^2  (10<<9)
  138           =00001800               WID8		EQU	$00001800	; 1.00 x 2^3  (12<<9)
  139           =00001A00               WID10		EQU	$00001A00	; 1.01 X 2^3  (13<<9)
  140           =00001C00               WID12		EQU	$00001C00	; 1.10 X 2^3  (14<<9)
  141           =00001E00               WID14		EQU	$00001E00	; 1.11 X 2^3  (15<<9)
  142           =00002000               WID16		EQU	$00002000	; 1.00 X 2^4  (16<<9)
  143           =00002200               WID20		EQU	$00002200	; 1.01 X 2^4  (17<<9)
  144           =00002400               WID24		EQU	$00002400	; 1.10 X 2^4  (18<<9)
  145           =00002600               WID28		EQU	$00002600	; 1.11 X 2^4  (19<<9)
  146           =00002800               WID32		EQU	$00002800	; 1.00 X 2^5  (20<<9)
  147           =00002A00               WID40		EQU	$00002A00	; 1.01 X 2^5  (21<<9)
  148           =00002C00               WID48		EQU	$00002C00	; 1.10 X 2^5  (22<<9)
  149           =00002E00               WID56		EQU	$00002E00	; 1.11 X 2^5  (23<<9)
  150           =00003000               WID64		EQU	$00003000	; 1.00 X 2^6  (24<<9)
  151           =00003200               WID80		EQU	$00003200	; 1.01 X 2^6  (25<<9)
  152           =00003400               WID96		EQU	$00003400	; 1.10 X 2^6  (26<<9)
  153           =00003600               WID112		EQU	$00003600	; 1.11 X 2^6  (27<<9)
  154           =00003800               WID128		EQU	$00003800	; 1.00 X 2^7  (28<<9)
  155           =00003A00               WID160		EQU	$00003A00	; 1.01 X 2^7  (29<<9)
  156           =00003C00               WID192		EQU	$00003C00	; 1.10 X 2^7  (30<<9)
  157           =00003E00               WID224		EQU	$00003E00	; 1.11 X 2^7  (31<<9)
  158           =00004000               WID256		EQU	$00004000	; 1.00 X 2^8  (32<<9)
  159           =00004200               WID320		EQU	$00004200	; 1.01 X 2^8  (33<<9)
  160           =00004400               WID384		EQU	$00004400	; 1.10 X 2^8  (34<<9)
  161           =00004600               WID448		EQU	$00004600	; 1.11 X 2^8  (35<<9)
  162           =00004800               WID512		EQU	$00004800	; 1.00 X 2^9  (36<<9)
  163           =00004A00               WID640		EQU	$00004A00	; 1.01 X 2^9  (37<<9)
  164           =00004C00               WID768		EQU	$00004C00	; 1.10 X 2^9  (38<<9)
  165           =00004E00               WID896		EQU	$00004E00	; 1.11 X 2^9  (39<<9)
  166           =00005000               WID1024		EQU	$00005000	; 1.00 X 2^10 (40<<9)
  167           =00005200               WID1280		EQU	$00005200	; 1.01 X 2^10 (41<<9)
  168           =00005400               WID1536		EQU	$00005400	; 1.10 X 2^10 (42<<9)
  169           =00005600               WID1792		EQU	$00005600	; 1.11 X 2^10 (43<<9)
  170           =00005800               WID2048		EQU	$00005800	; 1.00 X 2^11 (44<<9)
  171           =00005A00               WID2560		EQU	$00005A00	; 1.01 X 2^11 (45<<9)
  172           =00005C00               WID3072		EQU	$00005C00	; 1.10 X 2^11 (46<<9)
  173           =00005E00               WID3584		EQU	$00005E00	; 1.11 X 2^11 (47<<9)
  174                                   
  175                                   ;***	Unused d15
  176                                   
  177                                   ;***	X add control d16-d17
  178                                   ;***	controls the update of the X pointer on each pass
  179                                   ;***	round the inner loop
  180                                   
  181           =00000000               XADDPHR		EQU	$00000000	; 00 - add phrase width and truncate
  182           =00010000               XADDPIX		EQU	$00010000	; 01 - add pixel size (add 1)	


PROCESS CD+G PACKS                      blitter.inc          Page 10      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  183           =00020000               XADD0		EQU	$00020000	; 10 - add zero
  184           =00030000               XADDINC		EQU	$00030000	; 11 - add the increment
  185                                   
  186                                   ;***	Y add control	d18
  187                                   ;***	controls the update of the Y pointer within the inner loop.
  188                                   ;***	it is overridden by the X add control if they are in add increment
  189                                   
  190           =00000000               YADD0		EQU	$00000000	; 00 - add zero
  191           =00040000               YADD1		EQU	$00040000	; 01 - add 1
  192                                   
  193                                   ;***	X sign d19
  194                                   ;***	add or subtract pixel size if X add control = 01 (XADDPIX)
  195                                   
  196           =00000000               XSIGNADD	EQU	$00000000	; 0 - add pixel size
  197           =00080000               XSIGNSUB	EQU	$00080000	; 1 - subtract pixel size
  198                                   
  199                                   ;***	X sign d20
  200                                   ;***	add or subtract pixel size if X add control = 01 (YADD1)
  201                                   
  202           =00000000               YSIGNADD	EQU	$00000000	; 0 - add 1
  203           =00100000               YSIGNSUB	EQU	$00100000	; 1 - sub 1
  204                                   
  205                                   ;*======================================================================*
  206                                   ;*	ADDITIONAL BLITTER VALUES					*
  207                                   ;*======================================================================*
  208                                   
  209           =00000000               B_COMPLETE	EQU	$0
  210                                   
  211                                   ;*======================================================================*
  212                                   ;* EOF									*
  213                                   ;*======================================================================*
   53                                   	.include 'objlist.inc'
    1                                   ;*======================================================================*
    2                                   ;* TITLE	: OBJLIST.INC						*
    3                                   ;* Function	: Hardware Equates for OBJECT list			*
    4                                   ;*									*
    5                                   ;* Project #	: JAGUAR						*
    6                                   ;*									*
    7                                   ;* MODIFIED	: Pradip K Fatehpuria	10/27/93			*
    8                                   ;*									*
    9                                   ;* COPYRIGHT(c) 1992,1993 Atari Computer Corporation			*
   10                                   ;* UNATHORIZED REPRODUCTION, ADAPTATION, DISTRIBUTION, PERFORMANCE OR	*
   11                                   ;* DISPLAY OF THIS COMPUTER PROGRAM OR THE ASSOCIATED AUDIOVISUAL WORK	*
   12                                   ;* IS STRICTLY PROHIBITED.						*
   13                                   ;* ALL RIGHTS RESERVED.							*
   14                                   ;*									*
   15                                   ;*======================================================================*
   16                                   
   17           =0000000A               MAXOBJS		EQU	10
   18                                   
   19                                   ;*======================================================================*
   20                                   ;*	OFFSETS FOR EACH OBJECT IN THE USER OBJECT LIST			*
   21                                   ;*======================================================================*
   22                                   
   23           =00000000               O_XPOS		EQU	0		; word	object xpos
   24           =00000002               O_YPOS		EQU	O_XPOS+2	; word	object ypos in half lines


PROCESS CD+G PACKS                      objlist.inc          Page 11      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   25           =00000004               O_DATA		EQU	O_YPOS+2	; long	phrase aligned RAM address of object data
   26           =00000008               O_HEIGHT	EQU	O_DATA+4	; word	height of object in pixels
   27           =0000000A               O_DWIDTH	EQU	O_HEIGHT+2	; word	phrases per line of data in object (bytes per line / 8)
   28           =0000000C               O_IWIDTH	EQU	O_DWIDTH+2	; word	phrases per line (bytes per line / 8)
   29                                   					;	this is how many phrases of data to draw per line
   30                                   					;	this should be the same as O_DWIDTH to draw the whole object
   31           =0000000E               O_FLAGS		EQU	O_IWIDTH+2	; byte	flags for reflect, RMW, transparent, release
   32                                   					;	settings for bits in O_FLAGS byte
   33                                   
   34           =00000000               	HFLIP_OFF	EQU	0
   35           =00000001               	HFLIP_ON	EQU	1	; bit 0 = horizontal flip (reflect)
   36           =00000000               	RMW_OFF		EQU	0
   37           =00000002               	RMW_ON		EQU	2	; bit 1 = RMW flag
   38           =00000000               	TRANS_OFF	EQU	0
   39           =00000004               	TRANS_ON	EQU	4	; bit 2 = transparent flag
   40           =00000000               	RELEASE_OFF	EQU	0
   41           =00000008               	RELEASE_ON	EQU	8	; bit 3 = release
   42                                   
   43           =0000000F               O_FIRSTPIX	EQU	O_FLAGS+1	; byte	first pixel to be displayed in one line of an object
   44                                   					;	pixels to skip = O_FIRSTPIX / bits per pixel
   45           =00000010               O_TYPE		EQU	O_FIRSTPIX+1	; byte	object type
   46                                   					;	0 = bit mapped object
   47                                   					;	1 = scaled bit mapped object
   48                                   					;	2 = graphics processor object
   49                                   					;	3 = branch object
   50                                   					;	4 = stop object
   51           =00000080               	DELETE_OBJ	EQU	$80	; if negative bit is set in O_TYPE
   52                                   					;	object is not included in the final object list
   53                                   
   54           =00000011               O_DEPTH		EQU	O_TYPE+1	; byte	pixel depth
   55                                   					;	0 = 1 bit per pixel
   56                                   					;	1 = 2 bits per pixel
   57                                   					;	2 = 4 bits per pixel
   58                                   					;	3 = 8 bits per pixel
   59                                   					;	4 = 16 bits per pixel (CRY)
   60                                   					;	5 = 24 bits per pixel
   61           =00000012               O_PITCH		EQU	O_DEPTH+1	; byte	pitch
   62                                   					;	how many phrases to skip each time a new phrase is fetched
   63                                   					;	0 = repeat the same phrase
   64                                   					;	1 = contiguous data
   65                                   					;	2 = get every other phrase
   66                                   					;	3 = get every third phrase, etc.
   67           =00000013               O_INDEX		EQU	O_PITCH+1	; byte	palette index
   68                                   					;	4 bits per pixel objects can use 0 - 120 (multiples of 8 only)
   69                                   					;	2 bits per pixel objects can use 0 - 126 (multiples of 2 only)
   70                                   					;	1 bit  per pixel objects can use 0 - 127
   71                                   					; starting color number will be index * 2
   72           =00000014               O_DESC		EQU	O_INDEX+1	; word	object description (can be set to anything by user - this is not used by object list builder)
   73           =00000016               O_SCALE		EQU	O_DESC+2	; long	scaling information to write in 2nd long of phrase 3
   74                                   					;	1st byte is unused
   75           =00000017               O_REMAINDER	EQU	O_SCALE+1	; 2nd byte is remainder, same as vscale
   76           =00000018               O_VSCALE	EQU	O_REMAINDER+1	; 3rd byte is vscale, 3 bits + 5 bit fraction
   77           =00000019               O_HSCALE	EQU	O_VSCALE+1	; 4th byte is hscale, 3 bits + 5 bit fraction
   78                                   
   79           =0000001A               O_ROM		EQU	O_SCALE+4	; ROM address of object image
   80           =0000001E               O_MODE		EQU	O_ROM+4		; Object flags


PROCESS CD+G PACKS                      objlist.inc          Page 12      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   81           =00000022               OBJSIZE		EQU	O_MODE+4	; total bytes used for one object
   82                                   
   83                                   
   84                                   ;*======================================================================*
   85                                   ;*	MODE VALUES							*
   86                                   ;*======================================================================*
   87                                   
   88           =00000000               M_EMPTY		EQU	$00000000	; inactive or empty Object
   89           =00000001               M_ACTIVE	EQU	$00000001	; Active Object
   90           =00000002               M_UNUSED1	EQU	$00000002	; Moveable Object
   91           =00000004               M_UNUSED2	EQU	$00000004	; Seperatable Object action
   92           =00000008               M_UNUSED3	EQU	$00000008	; left-hand piece (special case)
   93           =00000010               M_UNUSED4	EQU	$00000010	; unused
   94           =00000020               M_UNUSED5	EQU	$00000020	; unused
   95           =00000040               M_UNUSED6	EQU	$00000040	; unused
   96           =00000080               M_UNUSED7	EQU	$00000080	; unused
   97           =00000100               M_UNUSED8	EQU	$00000100	; unused
   98           =00000200               M_UNUSED9	EQU	$00000200	; unused
   99           =00000400               M_UNUSED10	EQU	$00000400	; unused
  100           =00000800               M_UNUSED11	EQU	$00000800	; unused
  101           =00001000               M_UNUSED12	EQU	$00001000	; unused
  102           =00002000               M_UNUSED13	EQU	$00002000	; unused
  103           =00004000               M_UNUSED14	EQU	$00004000	; unused
  104           =00008000               M_UNUSED15	EQU	$00008000	; unused
  105           =00010000               M_UNUSED16	EQU	$00010000	; unused
  106           =00020000               M_UNUSED17	EQU	$00020000	; unused
  107           =00040000               M_UNUSED18	EQU	$00040000	; unused
  108           =00080000               M_UNUSED19	EQU	$00080000	; unused
  109           =00100000               M_UNUSED20	EQU	$00100000	; unused
  110           =00200000               M_UNUSED21	EQU	$00200000	; unused
  111           =00400000               M_UNUSED22	EQU	$00400000	; unused
  112           =00800000               M_UNUSED23	EQU	$00800000	; unused
  113           =01000000               M_UNUSED24	EQU	$01000000	; unused
  114           =02000000               M_UNUSED25	EQU	$02000000	; unused
  115           =04000000               M_UNUSED26	EQU	$04000000	; unused
  116           =08000000               M_UNUSED27	EQU	$08000000	; unused
  117           =10000000               M_UNUSED28	EQU	$10000000	; unused
  118           =20000000               M_UNUSED29	EQU	$20000000	; unused
  119           =40000000               M_UNUSED30	EQU	$40000000	; unused
  120           =80000000               M_UNUSED31	EQU	$80000000	; unused
  121                                   
  122                                   ;*======================================================================*
  123                                   ;*	OBJECT IDs and OFFSETS						*
  124                                   ;*======================================================================*
  125                                   
  126           =00000000               BITOBJ		EQU	0
  127           =00000001               SCBITOBJ	EQU	1
  128           =00000002               GPUOBJ		EQU	2
  129           =00000003               BRANCHOBJ	EQU	3
  130           =00000004               STOPOBJ		EQU	4
  131                                   
  132           =00000002               BITSIZE		EQU	(16>>3)		; phrase offset
  133           =00000004               SCBITSIZE	EQU	(32>>3)
  134           =00000001               GPUSIZE		EQU	(8>>3)
  135           =00000001               BRANCHSIZE	EQU	(8>>3)
  136           =00000001               STOPSIZE	EQU	(8>>3)


PROCESS CD+G PACKS                      objlist.inc          Page 13      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  137                                   
  138                                   ;*======================================================================*
  139                                   ;* EOF									*
  140                                   ;*======================================================================*
   54                                   	.include 'defs.inc'
    1                                   ;*======================================================================*
    2                                   ;* TITLE	: DEFS.INC						*
    3                                   ;* Function	: Common Definitions					*
    4                                   ;*									*
    5                                   ;* Project #	: JAGUAR						*
    6                                   ;* Programmer	: Andrew J. Burgess					*
    7                                   ;*									*
    8                                   ;* MODIFIED	: Pradip K Fatehpuria	10/27/93			*
    9                                   ;*									*
   10                                   ;* COPYRIGHT(c) 1992,1993 Atari Computer Corporation			*
   11                                   ;* UNATHORIZED REPRODUCTION, ADAPTATION, DISTRIBUTION, PERFORMANCE OR	*
   12                                   ;* DISPLAY OF THIS COMPUTER PROGRAM OR THE ASSOCIATED AUDIOVISUAL WORK	*
   13                                   ;* IS STRICTLY PROHIBITED.						*
   14                                   ;* ALL RIGHTS RESERVED.							*
   15                                   ;*									*
   16                                   ;*======================================================================*
   17                                   
   18                                   ;*======================================================================*
   19                                   ;*	GLOBAL DEFINES							*
   20                                   ;*======================================================================*
   21                                   
   22           =00000000               OFF		EQU	0
   23           =00000001               ON		EQU	1
   24                                   
   25           =00000000               FALSE		EQU	0
   26           =00000001               TRUE		EQU	1
   27                                   
   28                                   ;*======================================================================*
   29                                   
   30           =00000000               DRAM		EQU	$000000		; start of system RAM
   31           =00200000               ENDRAM		EQU	$200000		; end of system RAM
   32           =00004FFC               STACK		EQU	DRAM+$5000-$4	; start of system stack
   33                                   
   34           =00000006               NUMFACE		EQU	$6		; offset into model pointer for
   35                                   					; number of faces data
   36                                   
   37           =00000010               FACELIST	EQU	$10		; offset into model pointer for
   38                                   					; facelist address
   39                                   
   40           =00025800               BUFFERSIZE	EQU	(320*240*2)	; screen 320x240 in 16.16 color mode
   41                                   
   42           =00001000               RAMSIZE		EQU	$1000		; 4K bytes
   43                                   
   44           =00F03FFC               INPUT6		EQU	G_ENDRAM-$4	; pointer to parameter 6 for GPU
   45           =00F03FF8               INPUT5		EQU	INPUT6-$4	; pointer to parameter 5 for GPU
   46           =00F03FF4               INPUT4		EQU	INPUT5-$4	; pointer to parameter 4 for GPU
   47           =00F03FF0               INPUT3		EQU	INPUT4-$4	; pointer to parameter 3 for GPU
   48           =00F03FEC               INPUT2		EQU	INPUT3-$4	; pointer to parameter 2 for GPU
   49           =00F03FE8               INPUT1		EQU	INPUT2-$4	; pointer to parameter 1 for GPU
   50                                   
   51           =00F03FFC               VDI27		EQU	G_ENDRAM-$4


PROCESS CD+G PACKS                      defs.inc             Page 14      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   52           =00F03FF8               VDI26		EQU	VDI27-$4
   53           =00F03FF4               VDI25		EQU	VDI26-$4
   54           =00F03FF0               VDI24		EQU	VDI25-$4
   55           =00F03FEC               VDI23		EQU	VDI24-$4
   56           =00F03FE8               VDI22		EQU	VDI23-$4
   57           =00F03FE4               VDI21		EQU	VDI22-$4
   58           =00F03FE0               VDI20		EQU	VDI21-$4
   59           =00F03FDC               VDI19		EQU	VDI20-$4
   60           =00F03FD8               VDI18		EQU	VDI19-$4
   61           =00F03FD4               VDI17		EQU	VDI18-$4
   62           =00F03FD0               VDI16		EQU	VDI17-$4
   63           =00F03FCC               VDI15		EQU	VDI16-$4
   64           =00F03FC8               VDI14		EQU	VDI15-$4
   65           =00F03FC4               VDI13		EQU	VDI14-$4
   66           =00F03FC0               VDI12		EQU	VDI13-$4
   67           =00F03FBC               VDI11		EQU	VDI12-$4
   68           =00F03FB8               VDI10		EQU	VDI11-$4
   69           =00F03FB4               VDI9		EQU	VDI10-$4
   70           =00F03FB0               VDI8		EQU	VDI9-$4
   71           =00F03FAC               VDI7		EQU	VDI8-$4
   72           =00F03FA8               VDI6		EQU	VDI7-$4
   73           =00F03FA4               VDI5		EQU	VDI6-$4
   74           =00F03FA0               VDI4		EQU	VDI5-$4
   75           =00F03F9C               VDI3		EQU	VDI4-$4
   76           =00F03F98               VDI2		EQU	VDI3-$4
   77           =00F03F94               VDI1		EQU	VDI2-$4
   78                                   
   79                                   ;*======================================================================*
   80                                   ;*	RGB COLORS	 GGRRXXBB					*
   81                                   ;*======================================================================*
   82                                   
   83           =00000000               RGB_BLACK	EQU	$00000000
   84           =000000FF               RGB_BLUE	EQU	$000000FF
   85           =FF000000               RGB_GREEN	EQU	$FF000000
   86           =00FF0000               RGB_RED 	EQU	$00FF0000
   87           =FF0000FF               RGB_CYAN	EQU	$FF0000FF
   88           =FFFF0000               RGB_YELLOW	EQU	$FFFF0000
   89           =00FF00FF               RGB_MAGENTA 	EQU	$00FF00FF
   90           =FFFF00FF               RGB_WHITE	EQU	$FFFF00FF
   91                                   
   92           =80000080               RGB_AQUA	EQU	$80000080
   93           =00800000               RGB_RUST	EQU	$00800000
   94           =00800080               RGB_VIOLET	EQU	$00800080
   95           =50800000               RGB_BROWN	EQU	$50800000
   96           =80FF0000               RGB_ORANGE	EQU	$80FF0000
   97           =30080000               RGB_DKGREEN	EQU	$30080000
   98           =FFB000B0               RGB_LTGREEN	EQU	$FFB000B0
   99           =B0B000B0               RGB_LTGREY	EQU	$B0B000B0
  100           =80800080               RGB_GREY	EQU	$80800080
  101           =50500050               RGB_DKGREY	EQU	$50500050
  102                                   
  103                                   ;*======================================================================*
  104                                   
  105           =00000001               R60Hz		EQU	1
  106           =00000002               R30Hz		EQU	2
  107           =00000003               R20Hz		EQU	3


PROCESS CD+G PACKS                      defs.inc             Page 15      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  108           =00000004               R10Hz		Equ	4
  109                                   
  110                                   ;*======================================================================*
  111                                   ;*	GENERIC DEFINES							*
  112                                   ;*======================================================================*
  113                                   
  114           =000004C1               SCRNORM		EQU	$4C1		; 320x200 normal pixels
  115           =000006C1               SCROVER		EQU	$6C1		; 320x200 overscan square pixels
  116                                   
  117                                   ;*======================================================================*
  118                                   ;*	CPU INTERRUPT LOCATIONS						*
  119                                   ;*======================================================================*
  120                                   
  121           =00000068               LEVEL2		EQU	4*26		; 68000 Level2 Autovector ($68)
  122           =00000100               LEVEL0		EQU	$100		; 68000 Level0 Autovector (9*26)
  123                                   
  124                                   ;*======================================================================*
  125                                   ;*	MACROS								*
  126                                   ;*======================================================================*
  127                                   
  128                                   .macro	TIMEBAR		color
  129                                 . .if	BAR_ON != 0
  130                                 . 	move.l	#\color,BORD1
  131                                 . .endif
  132                                 . .endm
  133                                   
  134                                   .macro	LONGALIGN	addr
  135                                 . 	addq.l	#3,\addr		; make sure the address will
  136                                 . 	andi.l	#$FFFFFFFC,\addr	; remain within the buffer area
  137                                 . .endm
  138                                   
  139                                   
  140                                   ;*======================================================================*
  141                                   ;* EOF									*
  142                                   ;*======================================================================*
   55                                   
   56                                   ;*======================================================================*
   57                                   ;* LOCAL EQUATES							*
   58                                   ;*======================================================================*
   59                                   
   60           =00000000               SYMB00		equ	$00			; 00
   61           =00000042               SYMB01		equ	$42			; 01
   62           =0000007D               SYMB02		equ	$7D			; 02
   63           =000000BF               SYMB03		equ	$BF			; 03
   64           =00000064               SYMB04		equ	$64			; 04
   65           =00000032               SYMB05		equ	$32			; 05
   66           =00000096               SYMB06		equ	$96			; 06
   67           =000000AF               SYMB07		equ	$AF			; 07
   68           =00000008               SYMB08		equ	$08			; 08
   69           =00000021               SYMB09		equ	$21			; 09
   70           =0000003A               SYMB10		equ	$3A			; 0A
   71           =00000053               SYMB11		equ	$53			; 0B
   72           =0000006C               SYMB12		equ	$6C			; 0C
   73           =00000085               SYMB13		equ	$85			; 0D
   74           =0000009E               SYMB14		equ	$9E			; 0E
   75           =000000B7               SYMB15		equ	$B7			; 0F


PROCESS CD+G PACKS                      src/pack.s           Page 16      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   76           =00000010               SYMB16		equ	$10			; 10
   77           =00000029               SYMB17		equ	$29			; 11
   78           =00000019               SYMB18		equ	$19			; 12
   79           =0000005B               SYMB19		equ	$5B			; 13
   80           =00000074               SYMB20		equ	$74			; 14
   81           =0000008D               SYMB21		equ	$8D			; 15
   82           =000000A6               SYMB22		equ	$A6			; 16
   83           =0000004B               SYMB23		equ	$4B			; 17
   84                                   
   85                                   ;*==============================================*
   86                                   ;*==============================================*
   87                                   
   88                                   ;J_INT		equ	$F10020			; JERRY interrupt control register
   89                                   
   90           =00DFFF00               BUTCH		equ	$DFFF00			; BASE OF BUTCH - interrupt control register, R/W
   91           =00DFFF14               SBCNTRL		equ	BUTCH+$14		; BUTCH - CD subcode control register, R/W
   92                                   
   93                                   ;*==============================================*
   94                                   ;*==============================================*
   95                                   
   96           =00F03500               GPU_stop	equ	$F03500			; stop-GPU semaphore from M68K
   97                                   
   98           =00F03504               Haf_flg		equ	$F03504			; buffer half flag
   99           =00F03508               Ful_flg		equ	$F03508			; buffer full flag
  100                                   
  101           =00F03600               Buf_ptr		equ	$F03600			; subcode buffer in GPU memory
  102           =00F03660               Mid_ptr		equ	$F03660			; midway pointer in subcode buffer
  103                                   
  104                                   ;*==============================================*
  105                                   ;*==============================================*
  106                                   
  107           =00100000               tvdspmem	equ	$100000			; graphics memory for TV-Graphics
  108           =0010F000               tvgrfmm1	equ	tvdspmem+(320*192)	; graphics memory for TV-Graphics
  109           =00121C00               tvgrfmm2	equ	tvgrfmm1+(320*240)	; graphics memory for TV-Graphics
  110           =00134800               CDGwords	equ	tvgrfmm2+(320*240)	; subcode data (288 bytes)
  111           =00134920               fontdata	equ	CDGwords+(288*1)	; memory for font data (72 words)
  112           =001349B0               fontblit	equ	fontdata+(144*1)	; font data for bit to pixel expansion (12 bytes)
  113           =001349C0               cdgmmend	equ	fontblit+(16*1)		; end of buffer used by CD+G stuff
  114                                   
  115                                   ;*==============================================*
  116                                   ;*==============================================*
  117                                   
  118           =00000000               CDG_DISP	equ	0			; should the subcodes be processed
  119           =00000001               TVDSPFLG	equ	1			; should the TV-graphics display be updated
  120           =00000002               TVCOLFLG	equ	2			; should the colour table be updated
  121           =00000003               BRCOLFLG	equ	3			; border colour flag
  122                                   
  123                                   ;*==============================================*
  124                                   ;*==============================================*
  125                                   
  126           =000000E0               TVCOLOFF	equ	$00E0			; starting offset in CLUT
  127                                   
  128                                   ;*======================================================================*
  129                                   ;* EXTERNAL DATA							*
  130                                   ;*======================================================================*
  131                                   


PROCESS CD+G PACKS                      src/pack.s           Page 17      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  132                                   	.extern	gpuend				; GPU code and data
  133                                   
  134                                   ;*======================================================================*
  135                                   ;* PUBLIC ROUTINES							*
  136                                   ;*======================================================================*
  137                                   
  138                                   	.globl	initgpu
  139                                   	.globl	initcdg
  140                                   	.globl	stopcdg
  141                                   	.globl	subcode
  142                                   	.globl	dispsub
  143                                   
  144                                   ;*======================================================================*
  145                                   ;* PUBLIC DATA								*
  146                                   ;*======================================================================*
  147                                   
  148                                   	.globl	TvChnlAv
  149                                   	.globl	TvChnlNo
  150                                   	.globl	cdgflags
  151                                   
  152                                   ;************************************************************************
  153                                   ;* SUBROUTINES AREA							*
  154                                   ;************************************************************************
  155                                   
  156                                   	.text
  157                                   
  158                                   ;************************************************************************
  159                                   ;************************************************************************
  160                                   
  161                                   ;*======================================================================*
  162                                   ;* load and run GPU program						*
  163                                   ;*======================================================================*
  164                                   
  165                                   initgpu:
  166  00000000  48E7C0C0               	movem.l	d0-d1/a0-a1,-(sp)	; save registers
  167                                   
  168  00000004  23FC0000000000F03500   	move.l	#0,GPU_stop		; semaphore to tell GPU to stop itself
  169                                   .lodgpu:
  170  0000000E  207Cxxxxxxxx           	move.l	#gpuend,a0		; a0 = ptr to DSP code and data
  171  00000014  2018                   	move.l	(a0)+,d0		; d0 = final location of GPU code
  172  00000016  2240                   	move.l	d0,a1			; a1 = final location of GPU code
  173  00000018  2200                   	move.l	d0,d1			; d1 = save the start of the GPU code
  174  0000001A  2018                   	move.l	(a0)+,d0		; d0 = size in bytes
  175  0000001C  E480                   	asr.l	#2,d0			; d0 = size in longs
  176  0000001E  22D8                   .xferg:	move.l	(a0)+,(a1)+		; copy data to GPU internal RAM
  177  00000020  51C8FFFC               	dbra	d0,.xferg		; loop until copy finished
  178                                   .rungpu:				; initialize & run GPU program
  179                                   ;*Dave	move.l	d1,G_PC			; set GPU PC to start of code in SRAM
  180  00000024  23FC00F0303400F02110   	move.l	#$f03034,G_PC		; set GPU PC to start of code in SRAM
  181                                   ;*Dave	move.l	#1,G_CTRL		; set GPU GO bit to start running
  182                                   
  183  0000002E  4CDF0303               .ret:	movem.l	(sp)+,d0-d1/a0-a1	; restore registers
  184  00000032  4E75                   	rts
  185                                   
  186                                   ;*======================================================================*
  187                                   ;* initcdg	: initialise a CDG track player				*


PROCESS CD+G PACKS                      src/pack.s           Page 18      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  188                                   ;*======================================================================*
  189                                   
  190                                   initcdg:
  191  00000034  48E7C0F0               	movem.l	d0-d1/a0-a3,-(sp)	; save registers
  192                                   
  193                                   .iniflgs:
  194                                   ;	move.w	#$0003,TvChnlAv		; channel 0 and 1 are always available
  195  00000038  33FC0000xxxxxxxx       	move.w	#$0000,TvChnlNo		; channel number zero to be displayed
  196                                   
  197  00000040  13FC0000xxxxxxxx       	move.b	#0,cdgflags		; initialise the CD+G flag
  198  00000048  08F90000xxxxxxxx       	bset.b	#CDG_DISP,cdgflags
  199                                   ;;;	bclr.b	#TVDSPFLG,cdgflags
  200                                   ;;;	bclr.b	#TVCOLFLG,cdgflags
  201                                   ;;;	bclr.b	#BRCOLFLG,cdgflags
  202                                   
  203                                   .iniptrs:
  204  00000050  23FC0010F000xxxxxxxx   	move.l	#tvgrfmm1,tvgrfmem	; init ptr to TV graphics memory
  205  0000005A  23FC00121C00xxxxxxxx   	move.l	#tvgrfmm2,tvotherm	; init ptr to alternate TV graphics memory
  206  00000064  23FC00000000xxxxxxxx   	move.l	#0,subcount		; subcode count in buffer
  207                                   
  208                                   .clrscrs:
  209  0000006E  323C0000               	move.w	#$0000,d1		; set the color to BLUE
  210  00000072  6100xxxx               	bsr	clrtvdsp		; clear TV-Graphics Display memory
  211  00000076  6100xxxx               	bsr	clrtvgrf		; clear TV-Graphics memory
  212                                   
  213                                   .inicolr:				; initialise color tables
  214  0000007A  4280                   	clr.l	d0
  215  0000007C  207Cxxxxxxxx           	move.l	#TvColRed,a0		; primary memory - red component
  216  00000082  227Cxxxxxxxx           	move.l	#TvColGrn,a1		; primary memory - green component
  217  00000088  247Cxxxxxxxx           	move.l	#TvColBlu,a2		; primary memory - blue component
  218  0000008E  267Cxxxxxxxx           	move.l	#TransFac,a3		; transparency factor
  219  00000094  323C0004               	move.w	#4,d1			; total of 16 colors
  220                                   .colloop:
  221  00000098  20C0                   	move.l	d0,(a0)+		; primary - red component
  222  0000009A  22C0                   	move.l	d0,(a1)+		; primary - green component
  223  0000009C  24C0                   	move.l	d0,(a2)+		; primary - blue component
  224  0000009E  26C0                   	move.l	d0,(a3)+		; transparency factor
  225  000000A0  51C9FFF6               	dbra	d1,.colloop
  226                                   
  227                                   .brdcolr:
  228  000000A4  23C0xxxxxxxx           	move.l	d0,BrdColNo		; border color  number
  229                                   
  230                                   .tvscrol:
  231  000000AA  33C0xxxxxxxx           	move.w	d0,tvPH			; scroll factors for TV graphics
  232  000000B0  33C0xxxxxxxx           	move.w	d0,tvPV
  233  000000B6  33C0xxxxxxxx           	move.w	d0,tvCOPH
  234  000000BC  33C0xxxxxxxx           	move.w	d0,tvCOPV
  235                                   
  236                                   .cdginit:
  237                                   ;	move.l	#%100000,G_FLAGS	; allow DSP interrupts to TOM
  238  000000C2  33FC000100F10020       	move.w	#1,J_INT		; tell JERRY to pass them to TOM
  239  000000CA  223900DFFF14           	move.l	SBCNTRL,d1		; read to clear int flag
  240                                   
  241  000000D0  203900DFFF00           	move.l	BUTCH,d0		;do it this way
  242  000000D6  008000000009           	ori.l	#%1001,d0
  243  000000DC  23C000DFFF00           	move.l	d0,BUTCH


PROCESS CD+G PACKS                      src/pack.s           Page 19      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  244                                   
  245                                   ;	move.l	#%1001,BUTCH		; BUTCH enable 
  246                                   
  247  000000E2  4CDF0F03               .ret:	movem.l	(sp)+,d0-d1/a0-a3	; restore registers
  248  000000E6  4E75                   	rts
  249                                   
  250                                   ;*======================================================================*
  251                                   ;* stop CDG application							*
  252                                   ;*======================================================================*
  253                                   
  254                                   stopcdg:
  255  000000E8  23FC0000000100F03500   	move.l	#1,GPU_stop		; semaphore to tell GPU to stop itself
  256  000000F2  23FC0000000000F02100   	move.l	#0,G_FLAGS		; clear GPU interrupt mask register
  257  000000FC  33FC000000F10020       	move.w	#0,J_INT		; stop interrupt from Jerry to Tom
  258                                   ;	move.l	#0,BUTCH		; BUTCH disable
  259                                   
  260  00000104  203900DFFF00           	move.l	BUTCH,d0
  261  0000010A  0280FFFFFFF6           	andi.l	#~%1001,d0		; BUTCH disable
  262  00000110  23C000DFFF00           	move.l	d0,BUTCH
  263                                   
  264                                   .ret:
  265  00000116  4E75                   	rts
  266                                   
  267                                   ;*======================================================================*
  268                                   ;* Fill up a DRAM block with CD subcode					*
  269                                   ;*======================================================================*
  270                                   
  271                                   subcode:
  272  00000118  48E7FFFE               	movem.l	d0-d7/a0-a6,-(sp)	; save registers
  273                                   
  274                                   .gpustop:
  275                                   ;	move.l	GPU_stop,d0		; get GPU stop semaphore
  276                                   ;	beq.s	.ishaf			; GPU is still running - get data
  277                                   ;
  278                                   ;	bsr	stopcdg			; stop the GPU and DSP
  279                                   ;	move.l	#$DEADC0DE,d7		; error on half flag
  280                                   ;	illegal				; and bail out to db
  281                                   ;
  282  0000011C  267C00F03504           .ishaf:	move.l	#Haf_flg,a3		; pointer to half buffer flag in DSP
  283  00000122  4A93                   	tst.l	(a3)			; check half buffer flag
  284  00000124  67xx                   	beq.s	.isful
  285  00000126  227C00F03600           	move.l	#Buf_ptr,a1		; pointer to start of buffer in DSP
  286  0000012C  60xx                   	bra.s	.getdata
  287                                   
  288  0000012E  267C00F03508           .isful:	move.l	#Ful_flg,a3		; pointer to full buffer flag in DSP
  289  00000134  4A93                   	tst.l	(a3)			; check full buffer flag
  290  00000136  6700xxxx               	beq	.ret
  291  0000013A  227C00F03660           	move.l	#Mid_ptr,a1		; pointer to mid way pointer in DSP
  292                                   
  293                                   .getdata:
  294  00000140  207C00134800           	move.l	#CDGwords,a0		; pointer to symbol list
  295  00000146  D1F9xxxxxxxx           	add.l	subcount,a0		; position in subcode buffer
  296                                   
  297  0000014C  7E0B                   	move.l	#11,d7			; get 12 * 8 symbols
  298                                   
  299                                   .descrmb:


PROCESS CD+G PACKS                      src/pack.s           Page 20      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  300  0000014E  2F07                   	move.l	d7,-(sp)		; save d7
  301                                   
  302  00000150  2019                   	move.l	(a1)+,d0		; d0 = SRQx
  303  00000152  2419                   	move.l	(a1)+,d2		; d2 = WVUT
  304                                   
  305  00000154  2200                   	move.l	d0,d1			; d0 = Srxx	- Used for S
  306  00000156  4841                   	swap	d1			; d1 = xxsR	- Used for R
  307  00000158  2602                   	move.l	d2,d3			; d2 = Wvut	- Used for W
  308  0000015A  4843                   	swap	d3			; d3 = utwV	- Used for V
  309  0000015C  2802                   	move.l	d2,d4			; d4 = wvUt	- Used for U
  310  0000015E  2A02                   	move.l	d2,d5			; d5 = wvuT	- Used for T
  311                                   
  312  00000160  3E3C0007               	move.w	#7,d7			; 8 symbols per subcode read
  313                                   .subsmbl:
  314  00000164  4246                   	clr.w	d6			; make symbol in d6
  315  00000166  E311                   	roxl.b	#1,d1			; get the R bit
  316  00000168  E316                   	roxl.b	#1,d6			; result = 0000000r
  317  0000016A  E390                   	roxl.l	#1,d0			; get the S bit
  318  0000016C  E316                   	roxl.b	#1,d6			; result = 000000rs
  319  0000016E  E315                   	roxl.b	#1,d5			; get the T bit
  320  00000170  E316                   	roxl.b	#1,d6			; result = 00000rst
  321  00000172  E354                   	roxl.w	#1,d4			; get the U bit
  322  00000174  E316                   	roxl.b	#1,d6			; result = 0000rstu
  323  00000176  E313                   	roxl.b	#1,d3			; get the V bit
  324  00000178  E316                   	roxl.b	#1,d6			; result = 000rstuv
  325  0000017A  E392                   	roxl.l	#1,d2			; get the W bit
  326  0000017C  E316                   	roxl.b	#1,d6			; result = 00rstuvw
  327  0000017E  10C6                   	move.b	d6,(a0)+		; save it in buffer
  328  00000180  51CFFFE2               	dbra	d7,.subsmbl		; get next symbol
  329                                   
  330                                   .subnext:
  331  00000184  2E1F                   	move.l	(sp)+,d7		; restore d7
  332  00000186  51CFFFC6               	dbra	d7,.descrmb		; wait for next subcode
  333                                   
  334                                   .clrflgs:
  335  0000018A  26BC00000000           	move.l	#0,(a3)			; clear the half/full buffer flag in DSP
  336  00000190  06B900000060xxxxxxxx   	add.l	#96,subcount		; 4 more packs (96 more symbols)
  337                                   .subproc:
  338  0000019A  0CB900000120xxxxxxxx   	cmp.l	#96*3,subcount		; do we have enough subcodes
  339  000001A4  66xx                   	bne.s	.ret			; no, so quit
  340                                   
  341  000001A6  4EB9xxxxxxxx           	jsr	procsub			; process the subcodes
  342  000001AC  04B900000060xxxxxxxx   	sub.l	#96,subcount		; 96 less symbols left in buffer
  343                                   
  344  000001B6  203900F02238           .wait:	move.l	B_CMD,d0		; wait for
  345  000001BC  E248                   	lsr.w	#1,d0			;  blitter to
  346  000001BE  64F6                   .loop:	bcc	.wait			;  stop
  347                                   
  348  000001C0  23FC0013480000F02200   .blit:	move.l	#CDGwords,A1_BASE
  349  000001CA  23FC0013486000F02224   	move.l	#CDGwords+96,A2_BASE
  350  000001D4  23FC0000000000F0220C   	move.l	#0,A1_PIXEL
  351  000001DE  23FC0000000000F02230   	move.l	#0,A2_PIXEL
  352  000001E8  23FC0000402800F02204   	move.l	#(PITCH1|PIXEL32|WID256|XADDPHR),A1_FLAGS
  353  000001F2  23FC0000402800F02228   	move.l	#(PITCH1|PIXEL32|WID256|XADDPHR),A2_FLAGS
  354  000001FC  23FC0001003000F0223C   	move.l	#$00010030,B_COUNT	; h = 1, w = 48
  355  00000206  23FC2180000100F02238   	move.l	#(SRCEN|LFU_AN|LFU_A|BUSHI),B_CMD


PROCESS CD+G PACKS                      src/pack.s           Page 21      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  356                                   
  357  00000210  4CDF7FFF               .ret:	movem.l	(sp)+,d0-d7/a0-a6	; restore registers
  358  00000214  4E75                   	rts
  359                                   
  360                                   ;************************************************************************
  361                                   ;************************************************************************
  362                                   
  363                                   ;*======================================================================*
  364                                   ;* process the four packets collected from the CD			*
  365                                   ;*======================================================================*
  366                                   
  367                                   procsub:
  368  00000216  08390000xxxxxxxx       	btst.b	#CDG_DISP,cdgflags	; should we process CD+G data
  369  0000021E  67xx                   	beq.s	.ret			; no, so quit
  370                                   
  371  00000220  2C7C00134800           .pack1:	move.l	#CDGwords+$00,a6	; a6 = pointer to 1st pack
  372  00000226  61xx                   	bsr.s	procpack		; process it
  373                                   
  374  00000228  2C7C00134818           .pack2:	move.l	#CDGwords+$18,a6	; a6 = pointer to 2nd pack
  375  0000022E  61xx                   	bsr.s	procpack		; process it
  376                                   
  377  00000230  2C7C00134830           .pack3:	move.l	#CDGwords+$30,a6	; a6 = pointer to 3rd pack
  378  00000236  61xx                   	bsr.s	procpack		; process it
  379                                   
  380  00000238  2C7C00134848           .pack4:	move.l	#CDGwords+$48,a6	; a6 = pointer to 4th pack
  381  0000023E  61xx                   	bsr.s	procpack		; process it
  382                                   
  383  00000240  4E75                   .ret:	rts
  384                                   
  385                                   ;*======================================================================*
  386                                   ;* process the given pack						*
  387                                   ;*======================================================================*
  388                                   
  389                                   procpack:
  390  00000242  0C2E00090000           	cmp.b	#$09,SYMB00(a6)		; is it TV-graphics pack
  391  00000248  66xx                   	bne.s	.ret			; no, quit
  392                                   
  393  0000024A  207Cxxxxxxxx           .proc:	move.l	#proctabl,a0		; pointer to jump table
  394  00000250  102E0042               	move.b	SYMB01(a6),d0		; d0 = instruction type
  395  00000254  C07C003F               	and.w	#$3F,d0			; mask off unnecessary bits
  396  00000258  E548                   	lsl.w	#$02,d0			; d0 = byte offset in jump table
  397  0000025A  20300000               	move.l	(a0,d0),d0		; pointer to the required function
  398  0000025E  67xx                   	beq.s	.ret			; quit, if function is NULL
  399                                   
  400  00000260  2040                   	move.l	d0,a0			; jump to the required function
  401  00000262  4E90                   	jsr	(a0)			; which processes the given pack
  402  00000264  4E75                   .ret:	rts
  403                                   
  404                                   ;*======================================================================*
  405                                   ;* The TV-GRAPHICS mode PRESET-MEMORY instruction (1)			*
  406                                   ;*======================================================================*
  407                                   
  408                                   tvsetmem:
  409  00000266  33FC0000xxxxxxxx       	move.w	#0,tvPH			; initialise horz scroll pointer
  410  0000026E  33FC0000xxxxxxxx       	move.w	#0,tvPV			; initialise vert scroll pointer
  411                                   .getcolr:


PROCESS CD+G PACKS                      src/pack.s           Page 22      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  412  00000276  102E0064               	move.b	SYMB04(a6),d0		; d1 = symbol 4
  413  0000027A  0241000F               	andi.w	#$000F,d1		; d1 = 0000 0000 0000 cccc
  414  0000027E  D27C00E0               	add.w	#TVCOLOFF,d1
  415  00000282  3001                   	move.w	d1,d0			; d0 = d1
  416  00000284  E148                   	lsl.w	#8,d0			; d0 = 0000 cccc 0000 0000
  417  00000286  8240                   	or.w	d0,d1			; d1 = 0000 cccc 0000 cccc
  418  00000288  6100xxxx               	bsr	clrtvgrf		; set the TV graphics work memory to background color
  419                                   
  420  0000028C  08F90001xxxxxxxx       .disp:	bset.b	#TVDSPFLG,cdgflags	; update TV-graphics display
  421  00000294  4E75                   .ret:	rts
  422                                   
  423                                   ;*======================================================================*
  424                                   ;* The TV-GRAPHICS mode PRESET-BORDER instruction (2)			*
  425                                   ;*======================================================================*
  426                                   
  427                                   tvsetbrd:
  428  00000296  102E0064               	move.b	SYMB04(a6),d0		; d0 = symbol 4
  429  0000029A  02800000000F           	andi.l	#$000F,d0		; d0 = 0000 0000 0000 cccc
  430  000002A0  23C0xxxxxxxx           	move.l	d0,BrdColNo		; save border color number
  431                                   
  432  000002A6  08F90003xxxxxxxx       .disp:	bset.b	#BRCOLFLG,cdgflags	; update border color
  433  000002AE  4E75                   .ret:	rts
  434                                   
  435                                   ;*======================================================================*
  436                                   ;* The TV-GRAPHICS mode WRITE-FONT FOREGROUND/BACKGROUND instruction (6)*
  437                                   ;*======================================================================*
  438                                   
  439                                   tvfntfbg:
  440  000002B0  2A3C01800000           	move.l	#(LFU_AN|LFU_A),d5	; REPLACE mode
  441  000002B6  61xx                   	bsr.s	tvprpfnt		; blit the font
  442  000002B8  4E75                   .ret:	rts
  443                                   
  444                                   ;*======================================================================*
  445                                   ;* The TV-GRAPHICS mode EXCLUSIVE-OR FONT instruction (38)		*
  446                                   ;*======================================================================*
  447                                   
  448                                   tvxorfnt:
  449  000002BA  2A3C00C00000           	move.l	#(LFU_AN|LFU_NA),d5	; XOR mode
  450  000002C0  61xx                   	bsr.s	tvprpfnt		; blit the font
  451  000002C2  4E75                   .ret:	rts
  452                                   
  453                                   ;*======================================================================*
  454                                   ;* Prepares FONT data to be blitted in REPLACE/XOR format		*
  455                                   ;*======================================================================*
  456                                   
  457                                   tvprpfnt:
  458  000002C4  102E0064               .ch0:	move.b	SYMB04(a6),d0		; d0 = symbol 4
  459  000002C8  E408                   	lsr.b	#$02,d0			; d0 = (d0 >> 2)
  460  000002CA  0200000C               	andi.b	#$0C,d0			; d0 = (d0 & 0x000C)
  461  000002CE  122E0032               .ch1:	move.b	SYMB05(a6),d1		; d1 = symbol 5
  462  000002D2  E809                   	lsr.b	#$04,d1			; d1 = (d1 >> 4)
  463  000002D4  02010003               	andi.b	#$03,d1			; d1 = (d1 & 0x0003)
  464  000002D8  8001                   .chno:	or.b	d1,d0			; d0 = channel number
  465                                   
  466  000002DA  0C000001               .chkch:	cmpi.b	#1,d0			; (chno > 1) ?
  467  000002DE  6Exx                   	bgt.s	.usrch			; yes, check for the user channel


PROCESS CD+G PACKS                      src/pack.s           Page 23      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  468  000002E0  60xx                   	bra.s	.chok			; no, go blit the font
  469  000002E2  3239xxxxxxxx           .usrch:	move.w	TvChnlAv,d1		; d1 = available channel flags
  470  000002E8  01C1                   	bset.l	d0,d1			; d1 = set the new channel flag
  471  000002EA  33C1xxxxxxxx           	move.w	d1,TvChnlAv		; save channel available flags
  472  000002F0  B039xxxxxxxx           	cmp.b	TvChnlNo,d0		; is font from the user channel ?
  473  000002F6  6600xxxx               	bne	.ret			; no, quit
  474                                   .chok:
  475                                   
  476  000002FA  162E00AF               .xpos:	move.b	SYMB07(a6),d3		; d3 = symbol 7
  477  000002FE  0243003F               	andi.w	#$003F,d3		; d3 = 00xx xxxx = column position
  478  00000302  0C030031               	cmpi.b	#49,d3			; if (x > 49)
  479  00000306  6E00xxxx               	bgt	.ret			; yes, quit
  480                                   
  481  0000030A  182E0096               .ypos:	move.b	SYMB06(a6),d4		; d4 = symbol 6
  482  0000030E  0244001F               	andi.w	#$001F,d4		; d4 = 000y yyyy = row position
  483  00000312  0C040011               	cmpi.b	#17,d4			; if (y > 17)
  484  00000316  6E00xxxx               	bgt	.ret			; yes, quit
  485                                   
  486  0000031A  207C001349B0           .prep:	move.l	#fontblit,a0		; a0 = pointer to font data
  487  00000320  227Cxxxxxxxx           	move.l	#offstabl,a1		; a1 = offset table in pack data
  488  00000326  D3FC00000004           	add.l	#$04,a1			; a1 = offset to 8th symbol
  489  0000032C  3E3C0002               	move.w	#$02,d7			; d7 = 2 (total of 12 symbols)
  490                                   
  491  00000330  3C3C0000               .loop:	move.w	#0,d6			; clear d6
  492                                   
  493  00000334  1C19                   	move.b	(a1)+,d6		; d6 = offset in pack
  494  00000336  10366000               	move.b	(a6,d6),d0		; d0 = 1st symbol
  495  0000033A  E508                   	lsl.b	#2,d0			; 1st byte
  496  0000033C  E188                   	lsl.l	#8,d0			; d0 = xxxx11xx
  497                                   
  498  0000033E  1C19                   	move.b	(a1)+,d6		; d6 = offset in pack
  499  00000340  10366000               	move.b	(a6,d6),d0		; d0 = 2nd symbol
  500  00000344  E508                   	lsl.b	#2,d0			; 2nd byte
  501  00000346  E188                   	lsl.l	#8,d0			; d0 = xx1122xx
  502                                   
  503  00000348  1C19                   	move.b	(a1)+,d6		; d6 = offset in pack
  504  0000034A  10366000               	move.b	(a6,d6),d0		; d0 = 3rd symbol
  505  0000034E  E508                   	lsl.b	#2,d0			; 3rd byte
  506  00000350  E188                   	lsl.l	#8,d0			; d0 = 112233xx
  507                                   
  508  00000352  1C19                   	move.b	(a1)+,d6		; d6 = offset in pack
  509  00000354  10366000               	move.b	(a6,d6),d0		; d0 = 4th symbol
  510  00000358  E508                   	lsl.b	#2,d0			; 4th byte
  511                                   
  512  0000035A  20C0                   	move.l	d0,(a0)+		; d0 = 11223344 -> save 4 bytes
  513  0000035C  51CFFFD2               .next:	dbra	d7,.loop		; check next symbol
  514                                   
  515                                   .bit2pix:
  516  00000360  6100xxxx               	bsr	blitidle
  517                                   
  518  00000364  122E0064               .bgcol:	move.b	SYMB04(a6),d1		; d1 = symbol 4 = xxxxxx0B = background color
  519  00000368  0241000F               	andi.w	#$000F,d1
  520  0000036C  BABC00C00000           	cmp.l	#(LFU_AN|LFU_NA),d5	; is XOR mode ?
  521  00000372  67xx                   	beq.s	.skpbg			; yes, no need for offset
  522  00000374  D27C00E0               	add.w	#TVCOLOFF,d1		; no, add offset
  523  00000378  1001                   .skpbg:	move.b	d1,d0			; d0 = xxxxxx0B


PROCESS CD+G PACKS                      src/pack.s           Page 24      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  524  0000037A  E148                   	lsl.w	#8,d0			; d0 = xxxx0B00
  525  0000037C  8001                   	or.b	d1,d0			; d0 = xxxx0B0B
  526  0000037E  3200                   	move.w	d0,d1			; d1 = xxxx0B0B
  527  00000380  4841                   	swap	d1			; d1 = 0B0Bxxxx
  528  00000382  3200                   	move.w	d0,d1			; d1 = 0B0B0B0B
  529  00000384  23C100F02248           	move.l	d1,B_DSTD		; initialise destination data
  530  0000038A  23C100F0224C           	move.l	d1,B_DSTD+4		; register with background color
  531                                   
  532  00000390  142E0032               .fgcol:	move.b	SYMB05(a6),d2		; d2 = symbol 5 = xxxxxx0B = foreground color
  533  00000394  0242000F               	andi.w	#$000F,d2
  534  00000398  BABC00C00000           	cmp.l	#(LFU_AN|LFU_NA),d5	; is XOR mode ?
  535  0000039E  67xx                   	beq.s	.skpfg			; yes, no need for offset
  536  000003A0  D47C00E0               	add.w	#TVCOLOFF,d2		; no, add offset
  537  000003A4  1002                   .skpfg:	move.b	d2,d0			; d0 = xxxxxx0B
  538  000003A6  E148                   	lsl.w	#8,d0			; d0 = xxxx0B00
  539  000003A8  8002                   	or.b	d2,d0			; d0 = xxxx0B0B
  540  000003AA  3400                   	move.w	d0,d2			; d2 = xxxx0B0B
  541  000003AC  4842                   	swap	d2			; d2 = 0B0Bxxxx
  542  000003AE  3400                   	move.w	d0,d2			; d2 = 0B0B0B0B
  543  000003B0  23C200F02268           	move.l	d2,B_PATD		; initialise pattern data
  544  000003B6  23C200F0226C           	move.l	d2,B_PATD+4		; register with foreground color
  545                                   
  546  000003BC  23FC0000000000F0220C   .blit:	move.l	#0,A1_PIXEL
  547  000003C6  23FC0000000000F02230   	move.l	#0,A2_PIXEL
  548                                   
  549  000003D0  23FC0001FFF800F02210   	move.l	#$0001FFF8,A1_STEP
  550  000003DA  23FC0001FFF800F02234   	move.l	#$0001FFF8,A2_STEP
  551                                   
  552  000003E4  23FC000C000800F0223C   	move.l	#((12<<16)|(8)),B_COUNT
  553                                   
  554  000003EE  23FC0013492000F02200   	move.l	#fontdata,A1_BASE
  555  000003F8  23FC001349B000F02224   	move.l	#fontblit,A2_BASE
  556                                   
  557  00000402  23FC0001181800F02204   	move.l	#(PITCH1|PIXEL8|WID8|XADDPIX),A1_FLAGS
  558  0000040C  23FC0001180000F02228   	move.l	#(PITCH1|PIXEL1|WID8|XADDPIX),A2_FLAGS
  559                                   
  560  00000416  23FC3401060100F02238   	move.l	#(SRCEN|UPDA1|UPDA2|PATDSEL|BCOMPEN|BKGWREN|BUSHI),B_CMD
  561                                   
  562  00000420  2405                   .font:	move.l	d5,d2			; REPLACE/XOR mode
  563  00000422  6100xxxx               	bsr	bltfnt08		; blit font on offscreen buffer
  564                                   
  565  00000426  08F90001xxxxxxxx       .disp:	bset.b	#TVDSPFLG,cdgflags	; update TV-graphics display
  566  0000042E  4E75                   .ret:	rts
  567                                   
  568                                   ;*======================================================================*
  569                                   ;* The TV-GRAPHICS mode SCROLL SCREEN WITH PRESET instruction (20)	*
  570                                   ;*======================================================================*
  571                                   
  572                                   tvscrlst:
  573  00000430  102E0064               .color:	move.b	SYMB04(a6),d0		; d0 = symbol 4
  574  00000434  0240000F               	andi.w	#$000F,d0		; d0 = 0000 0000 0000 cccc
  575  00000438  D07C00E0               	add.w	#TVCOLOFF,d0		; offset for colour table
  576  0000043C  3200                   	move.w	d0,d1			; d1 = d0
  577  0000043E  E149                   	lsl.w	#8,d1			; d1 = 0000 cccc 0000 0000
  578  00000440  8041                   	or.w	d1,d0			; d0 = 0000 cccc 0000 cccc
  579  00000442  33C0xxxxxxxx           	move.w	d0,ScrlColr		; save scroll with preset color


PROCESS CD+G PACKS                      src/pack.s           Page 25      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  580                                   
  581  00000448  33FC0000xxxxxxxx       .scrol:	move.w	#FALSE,ScrlType		; reset to scroll with preset
  582  00000450  61xx                   	bsr.s	tvscroll		; scroll screen
  583  00000452  4E75                   .ret:	rts
  584                                   
  585                                   ;*======================================================================*
  586                                   ;* The TV-GRAPHICS mode SCROLL SCREEN WITH COPY instruction (24)	*
  587                                   ;*======================================================================*
  588                                   
  589                                   tvscrlcp:
  590  00000454  33FC0001xxxxxxxx       .scrol:	move.w	#TRUE,ScrlType		; scroll with copy
  591  0000045C  61xx                   	bsr.s	tvscroll		; scroll screen
  592  0000045E  4E75                   .ret:	rts
  593                                   
  594                                   ;*======================================================================*
  595                                   ;* scroll the TV-GRAPHICS screen					* 
  596                                   ;*======================================================================*
  597                                   
  598                                   tvscroll:
  599  00000460  303C0000               	move.w	#0,d0			; clear d0.w
  600  00000464  122E0032               .tvph:	move.b	SYMB05(a6),d1		; d1 = symbol 5
  601  00000468  1001                   	move.b	d1,d0			; d0 = symbol 5
  602  0000046A  02000007               	andi.b	#$07,d0			; d0 = tvPH
  603  0000046E  0C000005               	cmpi.b	#5,d0			; if (tvPH > 5)
  604  00000472  6E00xxxx               	bgt	.ret			; yes, quit
  605  00000476  33C0xxxxxxxx           	move.w	d0,tvPH			; save tvPH
  606                                   
  607  0000047C  142E0096               .tvpv:	move.b	SYMB06(a6),d2		; d2 = symbol 6
  608  00000480  1002                   	move.b	d2,d0			; d0 = symbol 6
  609  00000482  0200000F               	andi.b	#$0F,d0			; d0 = tvPV
  610  00000486  0C00000B               	cmpi.b	#11,d0			; if (tvPV > 11)
  611  0000048A  6E00xxxx               	bgt	.ret			; yes, quit
  612  0000048E  33C0xxxxxxxx           	move.w	d0,tvPV			; save tvPV
  613                                   
  614  00000494  08010004               .chkrt:	btst.l	#4,d1			; copy right ?
  615  00000498  67xx                   	beq.s	.chklt			; no, check further
  616  0000049A  363C0006               .cpyrt:	move.w	#6,d3			; yes, copy right
  617  0000049E  60xx                   	bra.s	.ocoph
  618  000004A0  08010005               .chklt:	btst.l	#5,d1			; copy left ?
  619  000004A4  67xx                   	beq.s	.cpyh0			; no, check further
  620  000004A6  363CFFFA               .cpylt:	move.w	#-6,d3			; yes, copy left
  621  000004AA  60xx                   	bra.s	.ocoph
  622  000004AC  363C0000               .cpyh0:	move.w	#0,d3			; no horizontal copy
  623                                   
  624  000004B0  33C3xxxxxxxx           .ocoph:	move.w	d3,tvCOPH		; save tvCOPH
  625                                   
  626  000004B6  08020004               .chkdn:	btst.l	#4,d2			; copy down ?
  627  000004BA  67xx                   	beq.s	.chkup			; no, check further
  628  000004BC  383C000C               .cpydn:	move.w	#12,d4			; yes, copy down
  629  000004C0  60xx                   	bra.s	.ocopv
  630  000004C2  08020005               .chkup:	btst.l	#5,d2			; copy up ?
  631  000004C6  67xx                   	beq.s	.cpyv0			; no, check further
  632  000004C8  383CFFF4               .cpyup:	move.w	#-12,d4			; yes, copy up
  633  000004CC  60xx                   	bra.s	.ocopv
  634  000004CE  383C0000               .cpyv0:	move.w	#0,d4			; no vertical copy
  635                                   


PROCESS CD+G PACKS                      src/pack.s           Page 26      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  636  000004D2  33C4xxxxxxxx           .ocopv:	move.w	d4,tvCOPV		; save tvCOPV
  637                                   
  638  000004D8  8843                   .scrol:	or.w	d3,d4			; check if any one of them set
  639  000004DA  67xx                   	beq.s	.disp			; no, so no need for scrolling
  640  000004DC  6100xxxx               	bsr	updtvgrf		; update TV graphics memory
  641  000004E0  33FC0000xxxxxxxx       	move.w	#0,tvCOPH		; clear tvCOPH
  642  000004E8  33FC0000xxxxxxxx       	move.w	#0,tvCOPV		; clear tvCOPV
  643                                   
  644  000004F0  08F90001xxxxxxxx       .disp:	bset.b	#TVDSPFLG,cdgflags	; update TV-graphics display
  645  000004F8  4E75                   .ret:	rts
  646                                   
  647                                   ;************************************************************************
  648                                   ;* ROUTINES FOR BLITTING TV-GRAPHICS					*
  649                                   ;************************************************************************
  650                                   
  651                                   ;*======================================================================*
  652                                   ;* BLITIDLE	: waits for the BLITTER IDLE				*
  653                                   ;*======================================================================*
  654                                   
  655                                   blitidle:
  656  000004FA  203900F02238           .wait:	move.l	B_CMD,d0
  657  00000500  E208                   	lsr.b	#1,d0
  658  00000502  64F6                   	bcc.s	.wait
  659  00000504  4E75                   .ret:	rts
  660                                   
  661                                   ;*======================================================================*
  662                                   ;* CLRTVDSP	: clear the display memory for TV Graphics		*
  663                                   ;* INPUT	: d1.w = color to be displayed (0c0c)			*
  664                                   ;*======================================================================*
  665                                   
  666                                   clrtvdsp:
  667  00000506  61F2                   	bsr	blitidle		; wait for blitter idle
  668                                   
  669  00000508  33C100F02268           	move.w	d1,B_PATD		; select the color
  670  0000050E  33C100F0226A           	move.w	d1,B_PATD+2
  671  00000514  33C100F0226C           	move.w	d1,B_PATD+4
  672  0000051A  33C100F0226E           	move.w	d1,B_PATD+6
  673                                   
  674  00000520  23FC0010000000F02200   	move.l	#tvdspmem,A1_BASE	; point to the buffer
  675  0000052A  23FC0000000000F0220C   	move.l	#0,A1_PIXEL		; pointer to (0,0)
  676  00000534  23FC0001FEC000F02210   	move.l	#$0001FEC0,A1_STEP	; step y = 1, x = -320
  677  0000053E  23FC00C0014000F0223C   	move.l	#((192<<16)|(320)),B_COUNT ; do h = 192, w = 320
  678  00000548  23FC0000421800F02204   	move.l	#(PITCH1|PIXEL8|WID320|XADDPHR),A1_FLAGS ; flags
  679                                   
  680  00000552  23FC0001020000F02238   	move.l	#(PATDSEL|UPDA1),B_CMD	; start the BLTTER
  681  0000055C  4E75                   .ret:	rts
  682                                   
  683                                   ;*======================================================================*
  684                                   ;* CLRTVGRF	: clear the graphic memory for TV-Graphics		*
  685                                   ;* INPUT	: d1.w = color to be displayed (0c0c)			*
  686                                   ;*======================================================================*
  687                                   
  688                                   clrtvgrf:
  689  0000055E  619A                   	bsr	blitidle		; wait for blitter idle
  690                                   
  691  00000560  33C100F02268           	move.w	d1,B_PATD		; select the color


PROCESS CD+G PACKS                      src/pack.s           Page 27      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  692  00000566  33C100F0226A           	move.w	d1,B_PATD+2
  693  0000056C  33C100F0226C           	move.w	d1,B_PATD+4
  694  00000572  33C100F0226E           	move.w	d1,B_PATD+6
  695                                   
  696  00000578  23F9xxxxxxxx00F02200   	move.l	tvgrfmem,A1_BASE	; point to the buffer
  697  00000582  23FC0000000000F0220C   	move.l	#0,A1_PIXEL		; pointer to (0,0)
  698  0000058C  23FC0001FEC000F02210   	move.l	#$0001FEC0,A1_STEP	; step y = 1, x = -320
  699  00000596  23FC00F0014000F0223C   	move.l	#((240<<16)|(320)),B_COUNT ; do h = 240, w = 320
  700  000005A0  23FC0000421800F02204   	move.l	#(PITCH1|PIXEL8|XADDPHR|WID320),A1_FLAGS ; flags
  701                                   
  702  000005AA  23FC0001020000F02238   	move.l	#(PATDSEL|UPDA1),B_CMD	; start the BLTTER
  703  000005B4  4E75                   .ret:	rts
  704                                   
  705                                   ;*======================================================================*
  706                                   ;* bltfnt08(x, y)							*
  707                                   ;* INPUT :	d2.l = replace/xor/or					*
  708                                   ;*		d3.w = x position					*
  709                                   ;*		d4.w = y position					*
  710                                   ;*									*
  711                                   ;* Blit a font with 8 bits per pixel to TV-Graf Memory at (x,y)		*
  712                                   ;*======================================================================*
  713                                   
  714                                   bltfnt08:
  715  000005B6  6100FF42               	bsr	blitidle		; wait for blitter idle
  716                                   
  717  000005BA  C6FC0006               	mulu	#$6,d3			; calculate x position in pixel
  718  000005BE  06430006               	addi.w	#$6,d3			; add extra 6 bit offset on left to keep scope for scrolling with copy
  719                                   
  720  000005C2  C8FC000C               	mulu	#$C,d4			; calculate y position in pixel
  721  000005C6  0644000C               	addi.w	#$C,d4			; add extra 12 bit offset on top to keep scope for scrolling with copy
  722                                   
  723                                   .a1pix:
  724  000005CA  3004                   	move.w	d4,d0			; y position
  725  000005CC  4840                   	swap	d0			; set the destination pixel pointer 
  726  000005CE  3003                   	move.w	d3,d0			; must be y|x (save x position in d3)
  727  000005D0  23C000F0220C           	move.l	d0,A1_PIXEL		; offset into draw buffer
  728                                   
  729  000005D6  223C00010006           	move.l	#((1<<16)|(6)),d1	; step increment y = 1, x = (-6 + delta)
  730  000005DC  D041                   	add.w	d1,d0			; d0 = end pixel in blit
  731  000005DE  02400007               	andi.w	#$7,d0			; check if end pixel on phrase boundary
  732  000005E2  67xx                   	beq.s	.a1step			; yes, set step increment
  733  000005E4  06410008               	addi.w	#8,d1			; now add an offset of (8-d0) to the end pixel,
  734  000005E8  9240                   	sub.w	d0,d1			;   so that it reaches the phrase boundary
  735                                   .a1step:
  736  000005EA  4441                   	neg.w	d1
  737  000005EC  23C100F02210           	move.l	d1,A1_STEP		; step increment y = 1, x = -6+delta
  738                                   
  739                                   .a2pix:
  740  000005F2  23FC0000000000F02230   	move.l	#0,A2_PIXEL		; source is always from 0,0
  741  000005FC  B07C0002               	cmp.w	#2,d0
  742  00000600  67xx                   	beq.s	.a2step2
  743  00000602  B07C0004               	cmp.w	#4,d0
  744  00000606  67xx                   	beq.s	.a2step2
  745                                   .a2step1:
  746  00000608  23FC0001FFF800F02234   	move.l	#$0001FFF8,A2_STEP	; step increment y = 1, x = -6+delta(-2) = -8
  747  00000612  60xx                   	bra.s	.bcount


PROCESS CD+G PACKS                      src/pack.s           Page 28      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  748                                   .a2step2:
  749  00000614  23FC0001FFF000F02234   	move.l	#$0001FFF0,A2_STEP	; step increment y = 1, x = -6+delta(-10) = -16
  750                                   
  751                                   .bcount:
  752  0000061E  23FC000C000600F0223C   	move.l	#((12<<16)|(6)),B_COUNT	; inner/outer loop counters
  753                                   
  754                                   .aflags:
  755  00000628  23FC0000421800F02204   	move.l	#(PITCH1|PIXEL8|WID320|XADDPHR),A1_FLAGS ; source flags
  756  00000632  23FC0000181800F02228   	move.l	#(PITCH1|PIXEL8|WID8|XADDPHR),A2_FLAGS	 ; destination flags
  757                                   
  758                                   .abases:
  759  0000063C  23F9xxxxxxxx00F02200   	move.l	tvgrfmem,A1_BASE	; pointer to destination buffer
  760  00000646  23FC0013492000F02224   	move.l	#fontdata,A2_BASE	; pointer to character data
  761                                   
  762  00000650  84BC20000609           .bcmd:	or.l	#(SRCEN|UPDA1|UPDA2|DSTEN|BUSHI),d2
  763  00000656  23C200F02238           	move.l	d2,B_CMD		; set up the blitter commands
  764  0000065C  4E75                   	rts
  765                                   
  766                                   ;*======================================================================*
  767                                   ;* updtvgrf	: updates the graphics memory for commands like, screen	*
  768                                   ;*		  update with preset/copy				*
  769                                   ;*									*
  770                                   ;* SCROLL GRAPHICS MEMORY, IF NECESSARY					*
  771                                   ;*									*
  772                                   ;* in this case copy the bit-blit from TV-graphics memory left/right	*
  773                                   ;* and up/down according to scroll with preset or copy instruction	*
  774                                   ;*									*
  775                                   ;* arrange source/destination pixel pointers as well as the blitter	*
  776                                   ;* flags so that the overlapping memory area problem is taken care of	*
  777                                   ;*======================================================================*
  778                                   
  779                                   updtvgrf:
  780  0000065E  6100FE9A               	bsr	blitidle		; wait for blitter idle
  781                                   
  782  00000662  243C01800601           	move.l	#(SRCEN|UPDA1|UPDA2|LFU_A|LFU_AN),d2
  783                                   .a1pix:
  784  00000668  303C000C               	move.w	#12,d0
  785  0000066C  D079xxxxxxxx           	add.w	tvCOPV,d0		; destination y
  786  00000672  4840                   	swap	d0
  787  00000674  303C0006               	move.w	#6,d0
  788  00000678  D079xxxxxxxx           	add.w	tvCOPH,d0		; destination x
  789  0000067E  23C000F0220C           	move.l	d0,A1_PIXEL		; prepare the destination pixel pointer
  790  00000684  3600                   	move.w	d0,d3			; d3 = save x position
  791                                   
  792  00000686  223C0001012C           	move.l	#((1<<16)|(300)),d1	; step y = 1, x = -(300 + delta)
  793  0000068C  D041                   	add.w	d1,d0			; end pixel in blit
  794  0000068E  02400007               	andi.w	#$7,d0			; check if end pixel on phrase boundary
  795  00000692  67xx                   	beq.s	.a1step			; yes, set step increment
  796  00000694  06410008               	addi.w	#8,d1			; now add an offset of (8-d0) to the end pixel,
  797  00000698  9240                   	sub.w	d0,d1			;   so that it reaches the phrase boundary
  798                                   .a1step:
  799  0000069A  4441                   	neg.w	d1
  800  0000069C  23C100F02210           	move.l	d1,A1_STEP		; setup the destination step increment
  801                                   .a2pix:
  802  000006A2  23FC000C000600F02230   	move.l	#((12<<16)|(6)),A2_PIXEL ; source y = 12, x = 6
  803  000006AC  B67C0006               	cmp.w	#$6,d3			; are the starting x position same


PROCESS CD+G PACKS                      src/pack.s           Page 29      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  804  000006B0  67xx                   	beq.s	.a2step			; no, then no need to make two source reads
  805  000006B2  84BC00000004           	or.l	#SRCENX,d2		; the command flags for phrase boundary
  806                                   .a2step:
  807  000006B8  23FC0001FECE00F02234   	move.l	#$0001FECE,A2_STEP	; step increment : y = 1, x = -306
  808                                   .bcount:
  809  000006C2  23FC00D8012C00F0223C   	move.l	#((216<<16)|(300)),B_COUNT ; inner/outer loop counters
  810                                   .aflags:
  811  000006CC  23FC0000421800F02204   	move.l	#(PITCH1|PIXEL8|WID320|XADDPHR),A1_FLAGS ; setup the source flags
  812  000006D6  23FC0000421800F02228   	move.l	#(PITCH1|PIXEL8|WID320|XADDPHR),A2_FLAGS ; setup the destination flags
  813                                   .abases:
  814  000006E0  23F9xxxxxxxx00F02200   	move.l	tvotherm,A1_BASE	; base adress of destination buffer
  815  000006EA  23F9xxxxxxxx00F02224   	move.l	tvgrfmem,A2_BASE	; base of address of source buffer
  816                                   
  817  000006F4  23C200F02238           .bcmd:	move.l	d2,B_CMD		; let blitter go
  818                                   
  819                                   ;****************************************
  820                                   ;* SWAP TV graphics memory with it's
  821                                   ;* alternater memory buffer
  822                                   ;****************************************
  823                                   
  824                                   .swaptvg:
  825  000006FA  2039xxxxxxxx           	move.l	tvgrfmem,d0
  826  00000700  2239xxxxxxxx           	move.l	tvotherm,d1
  827                                   
  828  00000706  23C0xxxxxxxx           	move.l	d0,tvotherm
  829  0000070C  23C1xxxxxxxx           	move.l	d1,tvgrfmem
  830                                   
  831                                   ;****************************************
  832                                   ;* PRESET/COPY the border according to
  833                                   ;* scroll instruction
  834                                   ;****************************************
  835                                   
  836  00000712  3039xxxxxxxx           .hz:	move.w	tvCOPH,d0
  837  00000718  67xx                   	beq.s	.vt
  838  0000071A  6Bxx                   	bmi.s	.hzneg
  839  0000071C  7206                   .hzpos:	move.l	#((0<<16)|(6)),d1	; destination (y|x)
  840  0000071E  243C00000132           	move.l	#((0<<16)|(306)),d2	; source (y|x)
  841  00000724  60xx                   	bra.s	.chblt
  842  00000726  223C0000012C           .hzneg:	move.l	#((0<<16)|(300)),d1	; destination (y|x)
  843  0000072C  7400                   	move.l	#((0<<16)|(0)),d2	; source (y|x)
  844  0000072E  263C00F00006           .chblt:	move.l	#((240<<16)|(6)),d3	; (height|width)
  845  00000734  6100xxxx               	bsr	blttvgrf
  846                                   
  847  00000738  3039xxxxxxxx           .vt:	move.w	tvCOPV,d0
  848  0000073E  67xx                   	beq.s	.ret
  849  00000740  6Bxx                   	bmi.s	.vtneg
  850  00000742  223C000C0000           .vtpos:	move.l	#((12<<16)|(0)),d1	; destination (y|x)
  851  00000748  243C00E40000           	move.l	#((228<<16)|(0)),d2	; source y
  852  0000074E  60xx                   	bra.s	.cvblt
  853  00000750  223C00D80000           .vtneg:	move.l	#((216<<16)|(0)),d1	; destination y
  854  00000756  7400                   	move.l	#((0<<16)|(0)),d2	; source y
  855  00000758  263C000C0138           .cvblt:	move.l	#((12<<16)|(312)),d3	; height
  856  0000075E  6100xxxx               	bsr	blttvgrf
  857                                   
  858  00000762  4E75                   .ret:	rts
  859                                   


PROCESS CD+G PACKS                      src/pack.s           Page 30      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  860                                   ;*======================================================================*
  861                                   ;* BLTTVGRF	: blit one portion of tv graphics memory to another	*
  862                                   ;*									*
  863                                   ;* INPUT :								*
  864                                   ;*	D1.l : Destination Y|X						*
  865                                   ;*	D2.l : Source Y|X						*
  866                                   ;*	D3.l : Height|Width						*
  867                                   ;*======================================================================*
  868                                   
  869                                   blttvgrf:
  870  00000764  6100FD94               	bsr	blitidle		; wait for blitter idle
  871                                   
  872  00000768  3039xxxxxxxx           	move.w	ScrlType,d0		; check if copy with preset or copy
  873  0000076E  67xx                   	beq.s	scrlset
  874                                   scrlcpy:				; SCROLL WITH COPY
  875                                   
  876                                   ; COPY SOURCE BLOCK TO DESTINATION BLOCK
  877                                   
  878  00000770  23C100F0220C           	move.l	d1,A1_PIXEL		; destination pixel pointer (y|x)
  879  00000776  23C200F02230           	move.l	d2,A2_PIXEL		; source pixel pointer (y|x)
  880                                   
  881  0000077C  203C00010000           	move.l	#$00010000,d0
  882  00000782  3003                   	move.w	d3,d0
  883  00000784  4440                   	neg.w	d0
  884  00000786  23C000F02210           	move.l	d0,A1_STEP		; source step increment
  885  0000078C  23C000F02234           	move.l	d0,A2_STEP		; destination step increment
  886                                   
  887  00000792  23C300F0223C           	move.l	d3,B_COUNT		; set the inner\outer loop counters
  888                                   
  889  00000798  23F9xxxxxxxx00F02200   	move.l	tvgrfmem,A1_BASE	; pointer to destination buffer
  890  000007A2  23F9xxxxxxxx00F02224   	move.l	tvgrfmem,A2_BASE	; pointer to source buffer
  891                                   
  892  000007AC  23FC0001421800F02204   	move.l	#(PITCH1|PIXEL8|WID320|XADDPIX),A1_FLAGS ; source flags
  893  000007B6  23FC0001421800F02228   	move.l	#(PITCH1|PIXEL8|WID320|XADDPIX),A2_FLAGS ; destination flags
  894                                   
  895  000007C0  23FC0180060100F02238   	move.l	#(SRCEN|UPDA1|UPDA2|LFU_A|LFU_AN),B_CMD ; let it go
  896  000007CA  4E75                   .ret:	rts
  897                                   
  898                                   scrlset:				; SCROLL WITH PRESET
  899                                   
  900                                   ; CLEAR THE DESTINATION BLOCK
  901                                   
  902  000007CC  6100FD2C               	bsr	blitidle		; wait for blitter idle
  903                                   
  904  000007D0  3039xxxxxxxx           	move.w	ScrlColr,d0		; set the fill pattern and color
  905  000007D6  33C000F02268           	move.w	d0,B_PATD		; select the color
  906  000007DC  33C000F0226A           	move.w	d0,B_PATD+2
  907  000007E2  33C000F0226C           	move.w	d0,B_PATD+4
  908  000007E8  33C000F0226E           	move.w	d0,B_PATD+6
  909                                   
  910  000007EE  23C100F0220C           	move.l	d1,A1_PIXEL		; source pixel pointer (y|x)
  911                                   
  912  000007F4  203C00010000           	move.l	#$00010000,d0
  913  000007FA  3003                   	move.w	d3,d0
  914  000007FC  4440                   	neg.w	d0
  915  000007FE  23C000F02210           	move.l	d0,A1_STEP		; step -width x, +1 y each line


PROCESS CD+G PACKS                      src/pack.s           Page 31      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  916                                   
  917  00000804  23C300F0223C           	move.l	d3,B_COUNT		; set the inner/outer loop counters
  918                                   
  919  0000080A  23F9xxxxxxxx00F02200   	move.l	tvgrfmem,A1_BASE	; point to the buffer
  920                                   
  921  00000814  23FC0001421800F02204   	move.l	#(PITCH1|PIXEL8|WID320|XADDPIX),A1_FLAGS ; set the flags
  922                                   
  923  0000081E  23FC0001020000F02238   	move.l	#(PATDSEL|UPDA1),B_CMD	; start the BLTTER
  924  00000828  4E75                   .ret:	rts
  925                                   
  926                                   ;************************************************************************
  927                                   ;************************************************************************
  928                                   
  929                                   ;*======================================================================*
  930                                   ;* The TV-GRAPHICS mode	LOAD CLUT Colour-0..7 instruction (30)		*
  931                                   ;*			LOAD CLUT Colour-8..15 instruction (31)		*
  932                                   ;*									*
  933                                   ;* The TV-GRAPHICS mode DEFINE COLOUR TRANSPARENCY instruction (28)	*
  934                                   ;*======================================================================*
  935                                   
  936                                   tvldclt0:
  937  0000082A  7000                   	move.l	#0,d0
  938  0000082C  6100xxxx               	bsr	ldclut1
  939  00000830  4E75                   .ret:	rts
  940                                   
  941                                   tvldclt1:
  942  00000832  7008                   	move.l	#8,d0
  943  00000834  6100xxxx               	bsr	ldclut1
  944  00000838  4E75                   .ret:	rts
  945                                   
  946                                   tvcoltrn:
  947                                   ;	move.l	#0,d0
  948                                   ;	bsr	ldtrans
  949  0000083A  4E75                   .ret:	rts
  950                                   
  951                                   ;*======================================================================*
  952                                   ;* Load the CLUT given the starting position in table and the pack	*
  953                                   ;*									*
  954                                   ;* This routine loads a 12 bit colour composition as used in TV-grapics	*
  955                                   ;* mode (when load clut is called)					*
  956                                   ;*									*
  957                                   ;*	RED table	- 000rrrr0					*
  958                                   ;*	GREEn table	- 00gggg00					*
  959                                   ;*	BLUE table	- 000bbbb0					*
  960                                   ;*									*
  961                                   ;* input	: d0.l - the starting position in table			*
  962                                   ;*======================================================================*
  963                                   
  964                                   ldclut1:
  965  0000083C  1A3C0000               	move.b	#FALSE,d5		; d5.b = change colour flag
  966                                   
  967  00000840  267Cxxxxxxxx           	move.l	#TvColRed,a3		; a3 = table for RED component
  968  00000846  287Cxxxxxxxx           	move.l	#TvColGrn,a4		; a4 = table for GREEN component
  969  0000084C  2A7Cxxxxxxxx           	move.l	#TvColBlu,a5		; a5 = table for BLUE component
  970                                   
  971  00000852  D7C0                   	add.l	d0,a3			; a3 = starting position in RED table


PROCESS CD+G PACKS                      src/pack.s           Page 32      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  972  00000854  D9C0                   	add.l	d0,a4			; a4 = starting position in GREEN table
  973  00000856  DBC0                   	add.l	d0,a5			; a5 = the starting position in BLUE table
  974                                   
  975  00000858  207Cxxxxxxxx           	move.l	#offstabl,a0		; a0 = offset table for descrabling pack data
  976  0000085E  7000                   	move.l	#0,d0			; clear d0
  977  00000860  3E3C0007               	move.w	#7,d7			; load 8 colours from pack
  978                                   
  979  00000864  1018                   .loop:	move.b	(a0)+,d0		; d0 = offset in pack data
  980  00000866  12360000               	move.b	(a6,d0),d1		; d1 = current symbol
  981  0000086A  1401                   	move.b	d1,d2			; d2 = d1
  982                                   
  983  0000086C  E409                   	lsr.b	#$02,d1			; red = ((color >> 2) & 0x0F)
  984  0000086E  0201000F               	andi.b	#$0F,d1			; d1 = 0000 rrrr
  985  00000872  E50A                   	lsl.b	#$02,d2			; grn = ((color << 2) & 0x0C)
  986  00000874  0202000C               	andi.b	#$0C,d2			; d2 = 0000 gg00
  987                                   
  988  00000878  1018                   	move.b	(a0)+,d0		; d0 = offset in pack data
  989  0000087A  10360000               	move.b	(a6,d0),d0		; d0 = current symbol
  990  0000087E  1600                   	move.b	d0,d3			; d3 = d0
  991                                   
  992  00000880  E808                   	lsr.b	#$04,d0			; grn = ((color >> 4) & 0x03)
  993  00000882  02000003               	andi.b	#$03,d0			; d0 = 0000 00gg
  994  00000886  8400                   	or.b	d0,d2			; d2 = 0000 gggg
  995  00000888  0203000F               	andi.b	#$0F,d3			; d3 = 0000 bbbb
  996                                   
  997  0000088C  B213                   .chkR:	cmp.b	(a3),d1			; check if RED component changed
  998  0000088E  67xx                   	beq.s	.noR			; no, so no need to set new RED
  999  00000890  1681                   	move.b	d1,(a3)			; save RED   (0000 rrrr)
 1000  00000892  1A3C0001               	move.b	#TRUE,d5		; change colour table
 1001  00000896  528B                   .noR:	addq.l	#1,a3
 1002                                   
 1003  00000898  B414                   .chkG:	cmp.b	(a4),d2			; check if GREEN component changed
 1004  0000089A  67xx                   	beq.s	.noG			; no, so no need to set new GREEN
 1005  0000089C  1882                   	move.b	d2,(a4)			; save GREEN (0000 gggg)
 1006  0000089E  1A3C0001               	move.b	#TRUE,d5		; change colour table
 1007  000008A2  528C                   .noG:	addq.l	#1,a4
 1008                                   
 1009  000008A4  B615                   .chkB:	cmp.b	(a5),d3			; check if BLUE component changed
 1010  000008A6  67xx                   	beq.s	.noB			; no, so no need to set new BLUE
 1011  000008A8  1A83                   	move.b	d3,(a5)			; save BLUE  (0000 bbbb)
 1012  000008AA  1A3C0001               	move.b	#TRUE,d5		; change colour table
 1013  000008AE  528D                   .noB:	addq.l	#1,a5
 1014                                   
 1015  000008B0  51CFFFB2               	dbra	d7,.loop		; continue for next symbols
 1016                                   
 1017                                   .setflgs:
 1018  000008B4  4A05                   	tst.b	d5
 1019  000008B6  67xx                   	beq.s	.ret
 1020                                   
 1021  000008B8  08F90002xxxxxxxx       	bset.b	#TVCOLFLG,cdgflags	; update the colour table
 1022  000008C0  08F90003xxxxxxxx       	bset.b	#BRCOLFLG,cdgflags	; update border oclour
 1023  000008C8  4E75                   .ret:	rts
 1024                                   
 1025                                   ;*======================================================================*
 1026                                   ;* Load the transparency factor for different color components and	*
 1027                                   ;* update the colour table						*


PROCESS CD+G PACKS                      src/pack.s           Page 33      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1028                                   ;*									*
 1029                                   ;* input	: d0.l - the starting position in table			*
 1030                                   ;*======================================================================*
 1031                                   
 1032                                   ldtrans:
 1033  000008CA  1A3C0000               	move.b	#FALSE,d5		; d5.b = change colour flag
 1034                                   
 1035  000008CE  267Cxxxxxxxx           	move.l	#TransFac,a3		; transparency factor
 1036  000008D4  D7C0                   	add.l	d0,a3			; a3 = starting position in table
 1037                                   
 1038  000008D6  207Cxxxxxxxx           	move.l	#offstabl,a0		; a0 = offset table for descrabling pack data
 1039  000008DC  7000                   	move.l	#0,d0			; clear d0
 1040  000008DE  3E3C000F               	move.w	#15,d7			; load 15 additional colour bits from pack
 1041                                   
 1042  000008E2  1018                   .loop:	move.b	(a0)+,d0		; d0 = offset in current pack
 1043  000008E4  10360000               	move.b	(a6,d0),d0		; d0 = TRANSn factor
 1044  000008E8  C03C003F               	and.b	#$3F,d0			; d0 = 6 bits of Transparency factor
 1045                                   
 1046  000008EC  1213                   .chkT:	move.b	(a3),d1			; d1.b = old TRANs component
 1047  000008EE  B200                   	cmp.b	d0,d1			; check if transparency flag changed
 1048  000008F0  67xx                   	beq.s	.noT			; no, so no need to set new TRANs
 1049  000008F2  1680                   	move.b	d0,(a3)			; save transparency factor
 1050  000008F4  1A3C0001               	move.b	#TRUE,d5		; change colour table
 1051  000008F8  528B                   .noT:	addq.l	#1,a3
 1052                                   
 1053  000008FA  51CFFFE6               	dbra	d7,.loop		; continue for next symbols
 1054                                   
 1055                                   .setflgs:
 1056  000008FE  4A05                   	tst.b	d5
 1057  00000900  67xx                   	beq.s	.ret
 1058                                   
 1059  00000902  08F90002xxxxxxxx       	bset.b	#TVCOLFLG,cdgflags	; update the colour table
 1060  0000090A  08F90003xxxxxxxx       	bset.b	#BRCOLFLG,cdgflags	; update border oclour
 1061  00000912  4E75                   .ret:	rts
 1062                                   
 1063                                   ;************************************************************************
 1064                                   ;************************************************************************
 1065                                   
 1066                                   ;*======================================================================*
 1067                                   ;* DISPSUB	: diaplay at frame interrupt				*
 1068                                   ;*======================================================================*
 1069                                   
 1070                                   dispsub:
 1071  00000914  48E7FF7C               	movem.l	d0-d7/a1-a5,-(sp)	; save registers
 1072  00000918  1C39xxxxxxxx           	move.b	cdgflags,d6		; d6 = CD+G flags
 1073                                   
 1074  0000091E  08060002               .updcl:	btst.l	#TVCOLFLG,d6		; update system color table ?
 1075  00000922  67xx                   	beq.s	.ovrcl			; no, quit
 1076  00000924  6100xxxx               	bsr	setcolor		; yes, update it
 1077  00000928  08860002               	bclr.l	#TVCOLFLG,d6		; CLUT updated
 1078                                   .ovrcl:
 1079                                   
 1080  0000092C  08060003               .updbr:	btst.l	#BRCOLFLG,d6		; update border color ?
 1081  00000930  67xx                   	beq.s	.ovrbr			; no, quit
 1082  00000932  6100xxxx               	bsr	setbordr		; set border color
 1083  00000936  08860003               	bclr.l	#BRCOLFLG,d6		; Border color updated


PROCESS CD+G PACKS                      src/pack.s           Page 34      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1084                                   .ovrbr:
 1085                                   
 1086  0000093A  08060001               .updtv:	btst.l	#TVDSPFLG,d6		; display TV-graphics ?
 1087  0000093E  67xx                   	beq.s	.ovrtv			; no, quit
 1088  00000940  6100xxxx               	bsr	cp2tvdsp		; yes, update it
 1089  00000944  08860001               	bclr.l	#TVDSPFLG,d6		; TV-display updated
 1090                                   .ovrtv:
 1091                                   
 1092  00000948  13C6xxxxxxxx           .ret:	move.b	d6,cdgflags		; save CD+G flags
 1093  0000094E  4CDF3EFF               	movem.l	(sp)+,d0-d7/a1-a5	; restore registers
 1094  00000952  4E75                   	rts
 1095                                   
 1096                                   ;*======================================================================*
 1097                                   ;* setcolor	: set color table from primary/secondary color table	*
 1098                                   ;*		  depending upon the memory coltrol instruction, if in	*
 1099                                   ;*		  extended TV-graphics mode, of from primary memory	*
 1100                                   ;*		  if it is TV-graphics mode.				*
 1101                                   ;*									*
 1102                                   ;*		  Also, apply the transparency factor, if in		*
 1103                                   ;*		  TV-graphics mode					*
 1104                                   ;*======================================================================*
 1105                                   
 1106                                   setcolor:
 1107  00000954  227C00F00400           	move.l	#CLUT,a1		; a1 = pointer to system CLUT
 1108  0000095A  D3FC000001C0           	add.l	#(TVCOLOFF*2),a1	; offset for colour table
 1109  00000960  247Cxxxxxxxx           	move.l	#TransFac,a2		; a2 = table for transparency factor
 1110  00000966  267Cxxxxxxxx           	move.l	#TvColRed,a3		; a3 = table for RED component
 1111  0000096C  287Cxxxxxxxx           	move.l	#TvColGrn,a4		; a4 = table for GREEN component
 1112  00000972  2A7Cxxxxxxxx           	move.l	#TvColBlu,a5		; a5 = table for BLUE component
 1113                                   
 1114  00000978  3E3C000F               	move.w	#$0F,d7			; load system colour table (15 colors)
 1115                                   
 1116  0000097C  703F                   .loop:	move.l	#$3F,d0			; d0 = TRANs factor = 63
 1117  0000097E  7200                   	move.l	#$00,d1			; d1 = RED component
 1118  00000980  7400                   	move.l	#$00,d2			; d2 = GREEN component
 1119  00000982  7600                   	move.l	#$00,d3			; d3 = BLUE component
 1120                                   
 1121  00000984  901A                   	sub.b	(a2)+,d0		; d0 = TRANs factor = 63-TRANSn
 1122  00000986  121B                   	move.b	(a3)+,d1		; d1 = RED component
 1123  00000988  141C                   	move.b	(a4)+,d2		; d2 = GREEN component
 1124  0000098A  161D                   	move.b	(a5)+,d3		; d3 = BLUE component
 1125                                   
 1126  0000098C  C2C0                   	mulu	d0,d1			; d1 = (63-TRANSn)*r
 1127  0000098E  C4C0                   	mulu	d0,d2			; d2 = (63-TRANSn)*g
 1128  00000990  C6C0                   	mulu	d0,d3			; d3 = (63-TRANSn)*b
 1129                                   
 1130  00000992  82FC003F               	divu	#$3F,d1			; d1 = ((63-TRANSn)*r)/63
 1131  00000996  84FC003F               	divu	#$3F,d2			; d2 = ((63-TRANSn)*g)/63
 1132  0000099A  86FC003F               	divu	#$3F,d3			; d3 = ((63-TRANSn)*b)/63
 1133                                   
 1134  0000099E  E149                   	lsl.w	#$8,d1			; d1 = 0000 rrrr 0000 0000
 1135  000009A0  E949                   	lsl.w	#$4,d1			; d1 = rrrr 0000 0000 0000
 1136  000009A2  EF4B                   	lsl.w	#$7,d3			; d3 = 0000 0bbb b000 0000
 1137  000009A4  E54A                   	lsl.w	#$2,d2			; d2 = 0000 0000 00gg gg00
 1138                                   
 1139  000009A6  8441                   	or.w	d1,d2			; d2 = rrrr 0bbb b000 0000


PROCESS CD+G PACKS                      src/pack.s           Page 35      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1140  000009A8  8443                   	or.w	d3,d2			; d2 = rrrr 0bbb b0gg gg00
 1141                                   
 1142  000009AA  3282                   .clup:	move.w	d2,(a1)			; save colour in CLUT
 1143  000009AC  B451                   	cmp.w	(a1),d2			; is it written properly ?
 1144  000009AE  66FA                   .cbak:	bne.s	.clup			; no, keep trying
 1145  000009B0  5449                   	addq.w	#2,a1
 1146                                   
 1147  000009B2  51CFFFC8               	dbra	d7,.loop		; continue for next symbols
 1148  000009B6  4E75                   .ret:	rts
 1149                                   
 1150                                   ;*======================================================================*
 1151                                   ;* set the border colour from colour table				*
 1152                                   ;*======================================================================*
 1153                                   
 1154                                   setbordr:
 1155  000009B8  2A39xxxxxxxx           	move.l	BrdColNo,d5		; get border colour number
 1156                                   
 1157  000009BE  227C00F00400           	move.l	#CLUT,a1		; pointer to colour lookup table
 1158  000009C4  D3FC000001C0           	add.l	#(TVCOLOFF*2),a1	; offset for colour table
 1159  000009CA  247Cxxxxxxxx           	move.l	#TransFac,a2		; a2 = table for transparency factor
 1160  000009D0  267Cxxxxxxxx           	move.l	#TvColRed,a3		; a3 = table for RED component
 1161  000009D6  287Cxxxxxxxx           	move.l	#TvColGrn,a4		; a4 = table for GREEN component
 1162  000009DC  2A7Cxxxxxxxx           	move.l	#TvColBlu,a5		; a5 = table for BLUE component
 1163                                   
 1164  000009E2  703F                   	move.l	#$3F,d0			; d0 = TRANs factor = 63
 1165  000009E4  7200                   	move.l	#$00,d1			; d1 = RED component
 1166  000009E6  7400                   	move.l	#$00,d2			; d2 = GREEN component
 1167  000009E8  7600                   	move.l	#$00,d3			; d3 = BLUE component
 1168                                   
 1169  000009EA  90325000               	sub.b	(a2,d5),d0		; d0 = TRANs factor = 63-TRANSn
 1170  000009EE  12335000               	move.b	(a3,d5),d1		; d1 = RED component
 1171  000009F2  14345000               	move.b	(a4,d5),d2		; d2 = GREEN component
 1172  000009F6  16355000               	move.b	(a5,d5),d3		; d3 = BLUE component
 1173                                   
 1174  000009FA  C2C0                   	mulu	d0,d1			; d1 = (63-TRANSn)*r
 1175  000009FC  C4C0                   	mulu	d0,d2			; d2 = (63-TRANSn)*g
 1176  000009FE  C6C0                   	mulu	d0,d3			; d3 = (63-TRANSn)*b
 1177                                   
 1178  00000A00  82FC003F               	divu	#$3F,d1			; d1 = ((63-TRANSn)*r)/63
 1179  00000A04  84FC003F               	divu	#$3F,d2			; d2 = ((63-TRANSn)*g)/63
 1180  00000A08  86FC003F               	divu	#$3F,d3			; d3 = ((63-TRANSn)*b)/63
 1181                                   
 1182  00000A0C  C2BC0000000F           	and.l	#$0F,d1			; d1 = 0000 0000 0000 0000 0000 0000 0000 rrrr
 1183  00000A12  C4BC0000000F           	and.l	#$0F,d2			; d2 = 0000 0000 0000 0000 0000 0000 0000 gggg
 1184  00000A18  C6BC0000000F           	and.l	#$0F,d3			; d3 = 0000 0000 0000 0000 0000 0000 0000 bbbb
 1185                                   
 1186  00000A1E  7014                   	move.l	#20,d0
 1187  00000A20  E1A9                   	lsl.l	d0,d1			; d1 = 0000 0000 rrrr 0000 0000 0000 0000 0000
 1188  00000A22  701C                   	move.l	#28,d0
 1189  00000A24  E1AA                   	lsl.l	d0,d2			; d2 = gggg 0000 0000 0000 0000 0000 0000 0000
 1190  00000A26  7004                   	move.l	#4,d0
 1191  00000A28  E1AB                   	lsl.l	d0,d3			; d3 = 0000 0000 0000 0000 0000 0000 bbbb 0000
 1192                                   
 1193  00000A2A  8282                   	or.l	d2,d1			; d1 = 0000 0000 rrrr 0000 0000 0000 bbbb 0000
 1194  00000A2C  8283                   	or.l	d3,d1			; d1 = gggg 0000 rrrr 0000 0000 0000 bbbb 0000
 1195  00000A2E  23C100F0002A           	move.l	d1,BORD1		; set the border color


PROCESS CD+G PACKS                      src/pack.s           Page 36      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1196                                   
 1197  00000A34  E38D                   	lsl.l	#1,d5			; multiply by 2 for words
 1198  00000A36  33F1500000F00058       	move.w	(a1,d5),BG		; colour (16 bit RGB)
 1199  00000A3E  4E75                   .ret:	rts
 1200                                   
 1201                                   ;*======================================================================*
 1202                                   ;* cp2tvdsp	: Copies the graphics memory to display memory when a	*
 1203                                   ;*		  update of graphics memory occurs			*
 1204                                   ;*======================================================================*
 1205                                   
 1206                                   cp2tvdsp:
 1207                                   
 1208                                   ;****************************************
 1209                                   ;* UPDATE DISPLAY FROM GRAPHICS MEMORY -
 1210                                   ;*
 1211                                   ;* copy the graphic memory to the display
 1212                                   ;* memory depending upon (tvPH, tvPV) and
 1213                                   ;* (tvCOPH, TVCOPV) starting from FONT
 1214                                   ;* at position (1,1)
 1215                                   ;*
 1216                                   ;* Also, there is an extra one-font 
 1217                                   ;* border around TV-graphics memory, 
 1218                                   ;* which is used for Scrolling with COPY
 1219                                   ;*
 1220                                   ;****************************************
 1221                                   
 1222  00000A40  6100FAB8               	bsr	blitidle		; wait for blitter idle
 1223                                   
 1224  00000A44  243C01800601           	move.l	#(SRCEN|UPDA1|UPDA2|LFU_A|LFU_AN),d2
 1225                                   .a1pix:
 1226  00000A4A  23FC0000000000F0220C   	move.l	#0,A1_PIXEL		; initialise the destination pixel pointer
 1227                                   .a1step:
 1228  00000A54  23FC0001FEE000F02210   	move.l	#$0001FEE0,A1_STEP	; step increment : y = 1, x = -288
 1229                                   
 1230                                   .a2pix:
 1231  00000A5E  303C0018               	move.w	#24,d0			; initialise the source pixel pointer
 1232  00000A62  D079xxxxxxxx           	add.w	tvPV,d0
 1233  00000A68  9079xxxxxxxx           	sub.w	tvCOPV,d0
 1234  00000A6E  4840                   	swap	d0
 1235  00000A70  303C000C               	move.w	#12,d0
 1236  00000A74  D079xxxxxxxx           	add.w	tvPH,d0
 1237  00000A7A  9079xxxxxxxx           	sub.w	tvCOPH,d0
 1238  00000A80  23C000F02230           	move.l	d0,A2_PIXEL
 1239  00000A86  3600                   	move.w	d0,d3			; d3 = save source starting x
 1240                                   
 1241  00000A88  223C00010120           	move.l	#((1<<16)|(288)),d1	; y = 1, x = -(288 + delta)
 1242  00000A8E  D041                   	add.w	d1,d0			; d0 = end pixel in blit
 1243  00000A90  02400007               	andi.w	#$7,d0			; check if end pixel on phrase boundary
 1244  00000A94  67xx                   	beq.s	.a2flag			; yes, set step increment
 1245  00000A96  06410008               	addi.w	#8,d1			; now add an offset of (8-d0) to the end pixel,
 1246  00000A9A  9240                   	sub.w	d0,d1			;   so that it reaches the phrase boundary
 1247                                   .a2flag:
 1248  00000A9C  C67C0007               	and.w	#$7,d3			; check if starts from a phrase boundary
 1249  00000AA0  67xx                   	beq.s	.a2step			; yes, then no need for two source reads
 1250  00000AA2  84BC00000004           	or.l	#SRCENX,d2		; the command flags for phrase boundary
 1251                                   .a2step:


PROCESS CD+G PACKS                      src/pack.s           Page 37      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1252  00000AA8  4441                   	neg.w	d1			; x step value
 1253  00000AAA  23C100F02234           	move.l	d1,A2_STEP		; step for A2 1 = +1 y|-288 x
 1254                                   
 1255                                   .bcount:
 1256  00000AB0  23FC00C0012000F0223C   	move.l	#((192<<16)|(288)),B_COUNT ; height|width of playfield
 1257                                   
 1258                                   .aflags:
 1259  00000ABA  23FC0000421800F02204   	move.l	#(PITCH1|PIXEL8|WID320|XADDPHR),A1_FLAGS ; source flags
 1260  00000AC4  23FC0000421800F02228   	move.l	#(PITCH1|PIXEL8|WID320|XADDPHR),A2_FLAGS ; destination flags
 1261                                   
 1262                                   .abases:
 1263  00000ACE  23FC0010000000F02200   	move.l	#tvdspmem,A1_BASE	; base address of destination buffer
 1264  00000AD8  23F9xxxxxxxx00F02224   	move.l	tvgrfmem,A2_BASE	; base address of character data
 1265                                   
 1266  00000AE2  23C200F02238           .bcmd:	move.l	d2,B_CMD		; set up the blitter commands
 1267                                   
 1268  00000AE8  4E75                   .ret:	rts
 1269                                   
 1270                                   ;************************************************************************
 1271                                   ;*	CONSTANT DATA AREA						*
 1272                                   ;************************************************************************
 1273                                   
 1274  00000AEA                         		.data
 1275                                   
 1276                                   ;*======================================================================*
 1277                                   ;*======================================================================*
 1278                                   
 1279                                   ;*
 1280                                   ;* MAIN JUMP TABLE FOR TV-GRAPHICS PROCESSING
 1281                                   ;*
 1282                                   		.phrase
 1283                                   
 1284  00000000  00000000               proctabl:	.dc.l	$00000000	; 00 
 1285  00000004  00000266               		.dc.l	tvsetmem	; 01 - TV GRAPHICS - PRESET MEMORY
 1286  00000008  00000296               		.dc.l	tvsetbrd	; 02 - TV HRAPHICS - PRESET BORDER
 1287  0000000C  00000000               		.dc.l	$00000000	; 03 
 1288  00000010  00000000               		.dc.l	$00000000	; 04 
 1289  00000014  00000000               		.dc.l	$00000000	; 05 
 1290  00000018  000002B0               		.dc.l	tvfntfbg	; 06 - TV GRAPHICS - FONT FOREGROUND/BACKGROUND
 1291  0000001C  00000000               		.dc.l	$00000000	; 07 
 1292  00000020  00000000               		.dc.l	$00000000	; 08 
 1293  00000024  00000000               		.dc.l	$00000000	; 09 
 1294  00000028  00000000               		.dc.l	$00000000	; 0A 
 1295  0000002C  00000000               		.dc.l	$00000000	; 0B 
 1296  00000030  00000000               		.dc.l	$00000000	; 0C 
 1297  00000034  00000000               		.dc.l	$00000000	; 0D 
 1298  00000038  00000000               		.dc.l	$00000000	; 0E 
 1299  0000003C  00000000               		.dc.l	$00000000	; 0F 
 1300  00000040  00000000               		.dc.l	$00000000	; 10 
 1301  00000044  00000000               		.dc.l	$00000000	; 11 
 1302  00000048  00000000               		.dc.l	$00000000	; 12 
 1303  0000004C  00000000               		.dc.l	$00000000	; 13 
 1304  00000050  00000430               		.dc.l	tvscrlst	; 14 - TV GRAPHICS - SOFT SCROLL SCREEN WITH PRESET
 1305  00000054  00000000               		.dc.l	$00000000	; 15 
 1306  00000058  00000000               		.dc.l	$00000000	; 16 
 1307  0000005C  00000000               		.dc.l	$00000000	; 17 


PROCESS CD+G PACKS                      src/pack.s           Page 38      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1308  00000060  00000454               		.dc.l	tvscrlcp	; 18 - TV GRAPHICS - SOFT SCROLL SCREEN WITH COPY
 1309  00000064  00000000               		.dc.l	$00000000	; 19 
 1310  00000068  00000000               		.dc.l	$00000000	; 1A 
 1311  0000006C  00000000               		.dc.l	$00000000	; 1B 
 1312  00000070  0000083A               		.dc.l	tvcoltrn	; 1C - TV GRAPHICS - DEFINE COLOUR TRANSPARENCY
 1313  00000074  00000000               		.dc.l	$00000000	; 1D 
 1314  00000078  0000082A               		.dc.l	tvldclt0	; 1E - TV GRAPHICS - LOAD CLUT - COLOUR 0..7
 1315  0000007C  00000832               		.dc.l	tvldclt1	; 1F - TV GRAPHICS - LOAD CLUT - COLOUR 8- 15
 1316  00000080  00000000               		.dc.l	$00000000	; 20 
 1317  00000084  00000000               		.dc.l	$00000000	; 21 
 1318  00000088  00000000               		.dc.l	$00000000	; 22 
 1319  0000008C  00000000               		.dc.l	$00000000	; 23 
 1320  00000090  00000000               		.dc.l	$00000000	; 24 
 1321  00000094  00000000               		.dc.l	$00000000	; 25 
 1322  00000098  000002BA               		.dc.l	tvxorfnt	; 26 - TV GRAPHICS - EXCLUSIVE OR FONT WITH 2 COLOURS
 1323  0000009C  00000000               		.dc.l	$00000000	; 27 
 1324  000000A0  00000000               		.dc.l	$00000000	; 28 
 1325  000000A4  00000000               		.dc.l	$00000000	; 29 
 1326  000000A8  00000000               		.dc.l	$00000000	; 2A 
 1327  000000AC  00000000               		.dc.l	$00000000	; 2B 
 1328  000000B0  00000000               		.dc.l	$00000000	; 2C 
 1329  000000B4  00000000               		.dc.l	$00000000	; 2D 
 1330  000000B8  00000000               		.dc.l	$00000000	; 2E 
 1331  000000BC  00000000               		.dc.l	$00000000	; 2F 
 1332  000000C0  00000000               		.dc.l	$00000000	; 30 
 1333  000000C4  00000000               		.dc.l	$00000000	; 31 
 1334  000000C8  00000000               		.dc.l	$00000000	; 32 
 1335  000000CC  00000000               		.dc.l	$00000000	; 33 
 1336  000000D0  00000000               		.dc.l	$00000000	; 34 
 1337  000000D4  00000000               		.dc.l	$00000000	; 35 
 1338  000000D8  00000000               		.dc.l	$00000000	; 36 
 1339  000000DC  00000000               		.dc.l	$00000000	; 37 
 1340  000000E0  00000000               		.dc.l	$00000000	; 38 
 1341  000000E4  00000000               		.dc.l	$00000000	; 39 
 1342  000000E8  00000000               		.dc.l	$00000000	; 3A 
 1343  000000EC  00000000               		.dc.l	$00000000	; 3B 
 1344  000000F0  00000000               		.dc.l	$00000000	; 3C 
 1345  000000F4  00000000               		.dc.l	$00000000	; 3D 
 1346  000000F8  00000000               		.dc.l	$00000000	; 3E 
 1347  000000FC  00000000               		.dc.l	$00000000	; 3F 
 1348                                   
 1349                                   ;*
 1350                                   ;* OFFSET INTO PACK DATA FOR DE-SCRAMBLING
 1351                                   ;*
 1352                                   		.phrase
 1353                                   
 1354  00000100  64                     offstabl:	.dc.b	SYMB04		; symbol #4
 1355  00000101  32                     		.dc.b	SYMB05		; symbol #5
 1356  00000102  96                     		.dc.b	SYMB06		; symbol #6
 1357  00000103  AF                     		.dc.b	SYMB07		; symbol #7
 1358  00000104  08                     		.dc.b	SYMB08		; symbol #8
 1359  00000105  21                     		.dc.b	SYMB09		; symbol #9
 1360  00000106  3A                     		.dc.b	SYMB10		; symbol #10
 1361  00000107  53                     		.dc.b	SYMB11		; symbol #11
 1362  00000108  6C                     		.dc.b	SYMB12		; symbol #12
 1363  00000109  85                     		.dc.b	SYMB13		; symbol #13


PROCESS CD+G PACKS                      src/pack.s           Page 39      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1364  0000010A  9E                     		.dc.b	SYMB14		; symbol #14
 1365  0000010B  B7                     		.dc.b	SYMB15		; symbol #15
 1366  0000010C  10                     		.dc.b	SYMB16		; symbol #16
 1367  0000010D  29                     		.dc.b	SYMB17		; symbol #17
 1368  0000010E  19                     		.dc.b	SYMB18		; symbol #18
 1369  0000010F  5B                     		.dc.b	SYMB19		; symbol #19
 1370                                   
 1371                                   		.phrase
 1372                                   
 1373                                   ;************************************************************************
 1374                                   ;* VARIABLE DATA AREA							*
 1375                                   ;************************************************************************
 1376                                   
 1377  00000110                         		.bss
 1378                                   
 1379                                   ;*======================================================================*
 1380                                   ;*======================================================================*
 1381                                   
 1382                                   		.phrase
 1383                                   
 1384  00000000 =00000001               TvChnlAv:	.ds.w	1		; the channel numbers available
 1385  00000002 =00000001               TvChnlNo:	.ds.b	1		; the channel number the user wants to view 
 1386  00000003 =00000001               cdgflags:	.ds.b	1		; if CD+G being displayed
 1387                                   
 1388  00000004 =00000001               tvgrfmem:	.ds.l	1		; pointer to Primary TV graphics memory
 1389  00000008 =00000001               tvotherm:	.ds.l	1		; pointer to alternate TV graphics memory
 1390                                   
 1391  0000000C =00000001               subcount:	.ds.l	1		; number of subcodes in data buffer 
 1392                                   
 1393  00000010 =00000010               TvColRed:	.ds.b	16		; red component
 1394  00000020 =00000010               TvColGrn:	.ds.b	16		; green component
 1395  00000030 =00000010               TvColBlu:	.ds.b	16		; blue component
 1396  00000040 =00000010               TransFac:	.ds.b	16		; transparency factor
 1397                                   
 1398  00000050 =00000001               BrdColNo:	.ds.l	1		; border color number
 1399                                   
 1400  00000054 =00000001               tvPH:		.ds.w	1		; horizontal screen pointer for TV-Graphics
 1401  00000056 =00000001               tvPV:		.ds.w	1		; vertical screen pointer for TV-Graphics
 1402  00000058 =00000001               tvCOPH:		.ds.w	1		; horizontal shift (left or right) in TV-Graphics
 1403  0000005A =00000001               tvCOPV:		.ds.w	1		; vertical shift (up or down) in TV-Graphics
 1404                                   
 1405  0000005C =00000001               ScrlType:	.ds.w	1		; scroll with copy (TRUE) or preset (FALSE)
 1406  0000005E =00000001               ScrlColr:	.ds.w	1		; background colour while scrolling with preset
 1407                                   
 1408                                   		.phrase
 1409                                   
 1410                                   ;************************************************************************
 1411                                   ;* END OF FILE								*
 1412                                   ;************************************************************************
 1413                                   
 1414                                   	.end


PROCESS CD+G PACKS                      src/pack.s           Page 40      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)
Symbol Table

            .a1pix 00000000000005CA  t             .cpyup 00000000000004C8  t               .ret 00000000000004F8  t            A2_STEP 0000000000F02234  a 
            .a1pix 0000000000000668  t             .cpyv0 00000000000004CE  t               .ret 0000000000000504  t            ADDDSEL 0000000000020000  a 
            .a1pix 0000000000000A4A  t             .cvblt 0000000000000758  t               .ret 000000000000055C  t             ASICLK 0000000000F10034  a 
           .a1step 00000000000005EA  t           .descrmb 000000000000014E  t               .ret 00000000000005B4  t            ASICTRL 0000000000F10032  a 
           .a1step 000000000000069A  t              .disp 000000000000028C  t               .ret 0000000000000762  t            ASIDATA 0000000000F10030  a 
           .a1step 0000000000000A54  t              .disp 00000000000002A6  t               .ret 00000000000007CA  t            ASISTAT 0000000000F10032  a 
           .a2flag 0000000000000A9C  t              .disp 0000000000000426  t               .ret 0000000000000828  t               BASE 0000000000F00000  a 
            .a2pix 00000000000005F2  t              .disp 00000000000004F0  t               .ret 0000000000000830  t            BCOMPEN 0000000004000000  a 
            .a2pix 00000000000006A2  t             .fgcol 0000000000000390  t               .ret 0000000000000838  t                 BG 0000000000F00058  a 
            .a2pix 0000000000000A5E  t              .font 0000000000000420  t               .ret 000000000000083A  t             BITOBJ 0000000000000000  a 
           .a2step 00000000000006B8  t           .getcolr 0000000000000276  t               .ret 00000000000008C8  t            BITSIZE 0000000000000002  a 
           .a2step 0000000000000AA8  t           .getdata 0000000000000140  t               .ret 0000000000000912  t            BKGWREN 0000000010000000  a 
          .a2step1 0000000000000608  t           .gpustop 000000000000011C  t               .ret 0000000000000948  t              BORD1 0000000000F0002A  a 
          .a2step2 0000000000000614  t                .hz 0000000000000712  t               .ret 00000000000009B6  t              BORD2 0000000000F0002C  a 
           .abases 000000000000063C  t             .hzneg 0000000000000726  t               .ret 0000000000000A3E  t          BRANCHOBJ 0000000000000003  a 
           .abases 00000000000006E0  t             .hzpos 000000000000071C  t               .ret 0000000000000AE8  t         BRANCHSIZE 0000000000000001  a 
           .abases 0000000000000ACE  t           .inicolr 000000000000007A  t            .rungpu 0000000000000024  t           BRCOLFLG 0000000000000003  a 
           .aflags 0000000000000628  t           .iniflgs 0000000000000038  t             .scrol 0000000000000448  t         BUFFERSIZE 0000000000025800  a 
           .aflags 00000000000006CC  t           .iniptrs 0000000000000050  t             .scrol 0000000000000454  t              BUSHI 0000000020000000  a 
           .aflags 0000000000000ABA  t             .isful 000000000000012E  t             .scrol 00000000000004D8  t              BUTCH 0000000000DFFF00  a 
             .bcmd 0000000000000AE2  t             .ishaf 000000000000011C  t           .setflgs 00000000000008B4  t              B_CMD 0000000000F02238  a 
             .bcmd 0000000000000650  t            .lodgpu 000000000000000E  t           .setflgs 00000000000008FE  t         B_COMPLETE 0000000000000000  a 
             .bcmd 00000000000006F4  t              .loop 00000000000001BE  t             .skpbg 0000000000000378  t            B_COUNT 0000000000F0223C  a 
           .bcount 000000000000061E  t              .loop 0000000000000330  t             .skpfg 00000000000003A4  t             B_DSTD 0000000000F02248  a 
           .bcount 00000000000006C2  t              .loop 0000000000000864  t           .subnext 0000000000000184  t             B_DSTZ 0000000000F02250  a 
           .bcount 0000000000000AB0  t              .loop 00000000000008E2  t           .subproc 000000000000019A  t               B_I0 0000000000F02288  a 
            .bgcol 0000000000000364  t              .loop 000000000000097C  t           .subsmbl 0000000000000164  t               B_I1 0000000000F02284  a 
          .bit2pix 0000000000000360  t              .next 000000000000035C  t           .swaptvg 00000000000006FA  t               B_I2 0000000000F02280  a 
             .blit 00000000000001C0  t               .noB 00000000000008AE  t              .tvph 0000000000000464  t               B_I3 0000000000F0227C  a 
             .blit 00000000000003BC  t               .noG 00000000000008A2  t              .tvpv 000000000000047C  t             B_IINC 0000000000F02270  a 
          .brdcolr 00000000000000A4  t               .noR 0000000000000896  t           .tvscrol 00000000000000AA  t             B_PATD 0000000000F02268  a 
             .cbak 00000000000009AE  t               .noT 00000000000008F8  t             .updbr 000000000000092C  t             B_SRCD 0000000000F02240  a 
          .cdginit 00000000000000C2  t             .ocoph 00000000000004B0  t             .updcl 000000000000091E  t            B_SRCZ1 0000000000F02258  a 
              .ch0 00000000000002C4  t             .ocopv 00000000000004D2  t             .updtv 000000000000093A  t            B_SRCZ2 0000000000F02260  a 
              .ch1 00000000000002CE  t             .ovrbr 000000000000093A  t             .usrch 00000000000002E2  t             B_STOP 0000000000F02278  a 
            .chblt 000000000000072E  t             .ovrcl 000000000000092C  t                .vt 0000000000000738  t               B_Z0 0000000000F02298  a 
             .chkB 00000000000008A4  t             .ovrtv 0000000000000948  t             .vtneg 0000000000000750  t               B_Z1 0000000000F02294  a 
             .chkG 0000000000000898  t             .pack1 0000000000000220  t             .vtpos 0000000000000742  t               B_Z2 0000000000F02290  a 
             .chkR 000000000000088C  t             .pack2 0000000000000228  t              .wait 00000000000001B6  t               B_Z3 0000000000F0228C  a 
             .chkT 00000000000008EC  t             .pack3 0000000000000230  t              .wait 00000000000004FA  t             B_ZINC 0000000000F02274  a 
            .chkch 00000000000002DA  t             .pack4 0000000000000238  t             .xferg 000000000000001E  t           BrdColNo 0000000000000050  b 
            .chkdn 00000000000004B6  t              .prep 000000000000031A  t              .xpos 00000000000002FA  t            Buf_ptr 0000000000F03600  a 
            .chklt 00000000000004A0  t              .proc 000000000000024A  t              .ypos 000000000000030A  t           CDG_DISP 0000000000000000  a 
            .chkrt 0000000000000494  t               .ret 000000000000002E  t            A1_BASE 0000000000F02200  a           CDGwords 0000000000134800  a 
            .chkup 00000000000004C2  t               .ret 00000000000000E2  t            A1_CLIP 0000000000F02208  a           CHRO_CLK 0000000000F10014  a 
             .chno 00000000000002D8  t               .ret 0000000000000116  t            A1_FINC 0000000000F02220  a            CLIP_A1 0000000000000040  a 
             .chok 00000000000002FA  t               .ret 0000000000000210  t           A1_FLAGS 0000000000F02204  a               CLK1 0000000000F10010  a 
          .clrflgs 000000000000018A  t               .ret 0000000000000240  t          A1_FPIXEL 0000000000F02218  a               CLK2 0000000000F10012  a 
          .clrscrs 000000000000006E  t               .ret 0000000000000264  t           A1_FSTEP 0000000000F02214  a               CLUT 0000000000F00400  a 
             .clup 00000000000009AA  t               .ret 0000000000000294  t             A1_INC 0000000000F0221C  a             CMPDST 0000000002000000  a 
          .colloop 0000000000000098  t               .ret 00000000000002AE  t           A1_PIXEL 0000000000F0220C  a               DAC1 0000000000F1A140  a 
            .color 0000000000000430  t               .ret 00000000000002B8  t            A1_STEP 0000000000F02210  a               DAC2 0000000000F1A144  a 
            .cpydn 00000000000004BC  t               .ret 00000000000002C2  t            A2_BASE 0000000000F02224  a            DCOMPEN 0000000008000000  a 
            .cpyh0 00000000000004AC  t               .ret 000000000000042E  t           A2_FLAGS 0000000000F02228  a         DELETE_OBJ 0000000000000080  a 
            .cpylt 00000000000004A6  t               .ret 0000000000000452  t            A2_MASK 0000000000F0222C  a               DRAM 0000000000000000  a 
            .cpyrt 000000000000049A  t               .ret 000000000000045E  t           A2_PIXEL 0000000000F02230  a              DSTA2 0000000000000800  a 


PROCESS CD+G PACKS                      src/pack.s           Page 41      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)
Symbol Table

             DSTEN 0000000000000008  a             INPUT5 0000000000F03FF8  a         M_UNUSED17 0000000000020000  a               PIT0 0000000000F00050  a 
            DSTENZ 0000000000000010  a             INPUT6 0000000000F03FFC  a         M_UNUSED18 0000000000040000  a               PIT1 0000000000F00052  a 
            DSTWRZ 0000000000000020  a               INT1 0000000000F000E0  a         M_UNUSED19 0000000000080000  a             PITCH1 0000000000000000  a 
            D_CTRL 0000000000F1A114  a               INT2 0000000000F000E2  a          M_UNUSED2 0000000000000004  a             PITCH2 0000000000000001  a 
         D_DIVCTRL 0000000000F1A11C  a               JOY1 0000000000F14000  a         M_UNUSED20 0000000000100000  a             PITCH4 0000000000000002  a 
             D_END 0000000000F1A10C  a               JOY2 0000000000F14002  a         M_UNUSED21 0000000000200000  a             PITCH8 0000000000000003  a 
          D_ENDRAM 0000000000F1D000  a              JPIT1 0000000000F10000  a         M_UNUSED22 0000000000400000  a             PIXEL1 0000000000000000  a 
           D_FLAGS 0000000000F1A100  a              JPIT2 0000000000F10002  a         M_UNUSED23 0000000000800000  a            PIXEL16 0000000000000020  a 
          D_HIDATA 0000000000F1A118  a              JPIT3 0000000000F10004  a         M_UNUSED24 0000000001000000  a             PIXEL2 0000000000000008  a 
            D_MTXA 0000000000F1A108  a              JPIT4 0000000000F10006  a         M_UNUSED25 0000000002000000  a            PIXEL32 0000000000000028  a 
            D_MTXC 0000000000F1A104  a              J_INT 0000000000F10020  a         M_UNUSED26 0000000004000000  a             PIXEL4 0000000000000010  a 
              D_PC 0000000000F1A110  a              LBUFA 0000000000F00800  a         M_UNUSED27 0000000008000000  a             PIXEL8 0000000000000018  a 
             D_RAM 0000000000F1B000  a              LBUFB 0000000000F01000  a         M_UNUSED28 0000000010000000  a              R10Hz 0000000000000004  a 
          D_REMAIN 0000000000F1A11C  a              LBUFC 0000000000F01800  a         M_UNUSED29 0000000020000000  a              R20Hz 0000000000000003  a 
            ENDRAM 0000000000200000  a             LEVEL0 0000000000000100  a          M_UNUSED3 0000000000000008  a              R30Hz 0000000000000002  a 
          FACELIST 0000000000000010  a             LEVEL2 0000000000000068  a         M_UNUSED30 0000000040000000  a              R60Hz 0000000000000001  a 
             FALSE 0000000000000000  a              LFU_A 0000000001000000  a         M_UNUSED31 0000000080000000  a            RAMSIZE 0000000000001000  a 
           Ful_flg 0000000000F03508  a             LFU_AN 0000000000800000  a          M_UNUSED4 0000000000000010  a        RELEASE_OFF 0000000000000000  a 
             GOURD 0000000000001000  a          LFU_CLEAR 0000000000000000  a          M_UNUSED5 0000000000000020  a         RELEASE_ON 0000000000000008  a 
            GPIO_0 0000000000F14800  a              LFU_D 0000000001400000  a          M_UNUSED6 0000000000000040  a           RGB_AQUA 0000000080000080  a 
            GPIO_1 0000000000F15000  a             LFU_NA 0000000000400000  a          M_UNUSED7 0000000000000080  a          RGB_BLACK 0000000000000000  a 
            GPIO_2 0000000000F16000  a            LFU_NAN 0000000000200000  a          M_UNUSED8 0000000000000100  a           RGB_BLUE 00000000000000FF  a 
            GPIO_3 0000000000F17000  a           LFU_NOTD 0000000000A00000  a          M_UNUSED9 0000000000000200  a          RGB_BROWN 0000000050800000  a 
            GPIO_4 0000000000F17800  a           LFU_NOTS 0000000000600000  a            Mid_ptr 0000000000F03660  a           RGB_CYAN 00000000FF0000FF  a 
            GPIO_5 0000000000F17C00  a           LFU_NSAD 0000000000400000  a               NOGO 0000000000000080  a        RGB_DKGREEN 0000000030080000  a 
            GPUOBJ 0000000000000002  a          LFU_NSAND 0000000000200000  a            NUMFACE 0000000000000006  a         RGB_DKGREY 0000000050500050  a 
           GPUSIZE 0000000000000001  a          LFU_NSORD 0000000001600000  a                OB0 0000000000F00010  a          RGB_GREEN 00000000FF000000  a 
          GPU_stop 0000000000F03500  a         LFU_NSORND 0000000000E00000  a                OB1 0000000000F00012  a           RGB_GREY 0000000080800080  a 
            G_CTRL 0000000000F02114  a        LFU_N_SXORD 0000000000C00000  a                OB2 0000000000F00014  a        RGB_LTGREEN 00000000FFB000B0  a 
         G_DIVCTRL 0000000000F0211C  a            LFU_ONE 0000000001E00000  a                OB3 0000000000F00016  a         RGB_LTGREY 00000000B0B000B0  a 
             G_END 0000000000F0210C  a        LFU_REPLACE 0000000001800000  a                OBF 0000000000F00026  a        RGB_MAGENTA 0000000000FF00FF  a 
          G_ENDRAM 0000000000F04000  a              LFU_S 0000000001800000  a            OBJSIZE 0000000000000022  a         RGB_ORANGE 0000000080FF0000  a 
           G_FLAGS 0000000000F02100  a            LFU_SAD 0000000001000000  a                ODP 0000000000F00024  a            RGB_RED 0000000000FF0000  a 
          G_HIDATA 0000000000F02118  a           LFU_SAND 0000000000800000  a                OFF 0000000000000000  a           RGB_RUST 0000000000800000  a 
            G_MTXA 0000000000F02108  a           LFU_SORD 0000000001C00000  a                OLP 0000000000F00020  a         RGB_VIOLET 0000000000800080  a 
            G_MTXC 0000000000F02104  a          LFU_SORND 0000000001A00000  a                 ON 0000000000000001  a          RGB_WHITE 00000000FFFF00FF  a 
              G_PC 0000000000F02110  a          LFU_SXORD 0000000001200000  a             O_DATA 0000000000000004  a         RGB_YELLOW 00000000FFFF0000  a 
             G_RAM 0000000000F03000  a            LFU_XOR 0000000001200000  a            O_DEPTH 0000000000000011  a            RMW_OFF 0000000000000000  a 
          G_REMAIN 0000000000F0211C  a           LFU_ZERO 0000000000000000  a             O_DESC 0000000000000014  a             RMW_ON 0000000000000002  a 
               HBB 0000000000F00030  a                LPH 0000000000F00008  a           O_DWIDTH 000000000000000A  a         ROM_AMSINE 0000000000F1D400  a 
               HBE 0000000000F00032  a                LPV 0000000000F0000A  a         O_FIRSTPIX 000000000000000F  a        ROM_CHIRP16 0000000000F1D800  a 
                HC 0000000000F00004  a               LRXD 0000000000F1A148  a            O_FLAGS 000000000000000E  a          ROM_DELTA 0000000000F1DC00  a 
              HDB1 0000000000F00038  a               LTXD 0000000000F1A148  a           O_HEIGHT 0000000000000008  a          ROM_NOISE 0000000000F1DE00  a 
              HDB2 0000000000F0003A  a            MAXOBJS 000000000000000A  a           O_HSCALE 0000000000000019  a           ROM_NTRI 0000000000F1DA00  a 
               HDE 0000000000F0003C  a            MEMCON1 0000000000F00000  a            O_INDEX 0000000000000013  a           ROM_SINE 0000000000F1D200  a 
               HEQ 0000000000F00054  a            MEMCON2 0000000000F00002  a           O_IWIDTH 000000000000000C  a        ROM_SINE12W 0000000000F1D600  a 
         HFLIP_OFF 0000000000000000  a           M_ACTIVE 0000000000000001  a             O_MODE 000000000000001E  a          ROM_TABLE 0000000000F1D000  a 
          HFLIP_ON 0000000000000001  a            M_EMPTY 0000000000000000  a            O_PITCH 0000000000000012  a            ROM_TRI 0000000000F1D000  a 
                HP 0000000000F0002E  a          M_UNUSED1 0000000000000002  a        O_REMAINDER 0000000000000017  a               RRXD 0000000000F1A14C  a 
                HS 0000000000F00034  a         M_UNUSED10 0000000000000400  a              O_ROM 000000000000001A  a               RTXD 0000000000F1A14C  a 
               HVS 0000000000F00036  a         M_UNUSED11 0000000000000800  a            O_SCALE 0000000000000016  a            SBCNTRL 0000000000DFFF14  a 
           Haf_flg 0000000000F03504  a         M_UNUSED12 0000000000001000  a             O_TYPE 0000000000000010  a           SCBITOBJ 0000000000000001  a 
            INPUT1 0000000000F03FE8  a         M_UNUSED13 0000000000002000  a           O_VSCALE 0000000000000018  a          SCBITSIZE 0000000000000004  a 
            INPUT2 0000000000F03FEC  a         M_UNUSED14 0000000000004000  a             O_XPOS 0000000000000000  a               SCLK 0000000000F1A150  a 
            INPUT3 0000000000F03FF0  a         M_UNUSED15 0000000000008000  a             O_YPOS 0000000000000002  a            SCRNORM 00000000000004C1  a 
            INPUT4 0000000000F03FF4  a         M_UNUSED16 0000000000010000  a            PATDSEL 0000000000010000  a            SCROVER 00000000000006C1  a 


PROCESS CD+G PACKS                      src/pack.s           Page 42      4:41:24 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)
Symbol Table

             SMODE 0000000000F1A154  a                VDB 0000000000F00046  a              WID32 0000000000002800  a           offstabl 0000000000000100  d 
             SRCEN 0000000000000001  a                VDE 0000000000F00048  a             WID320 0000000000004200  a           procpack 0000000000000242  t 
            SRCENX 0000000000000004  a               VDI1 0000000000F03F94  a            WID3584 0000000000005E00  a            procsub 0000000000000216  t 
            SRCENZ 0000000000000002  a              VDI10 0000000000F03FB8  a             WID384 0000000000004400  a           proctabl 0000000000000000  d 
          SRCSHADE 0000000040000000  a              VDI11 0000000000F03FBC  a               WID4 0000000000001000  a            scrlcpy 0000000000000770  t 
             SSTAT 0000000000F1A150  a              VDI12 0000000000F03FC0  a              WID40 0000000000002A00  a            scrlset 00000000000007CC  t 
             STACK 0000000000004FFC  a              VDI13 0000000000F03FC4  a             WID448 0000000000004600  a           setbordr 00000000000009B8  t 
           STOPOBJ 0000000000000004  a              VDI14 0000000000F03FC8  a              WID48 0000000000002C00  a           setcolor 0000000000000954  t 
          STOPSIZE 0000000000000001  a              VDI15 0000000000F03FCC  a             WID512 0000000000004800  a            stopcdg 00000000000000E8  tg
            SYMB00 0000000000000000  a              VDI16 0000000000F03FD0  a              WID56 0000000000002E00  a            subcode 0000000000000118  tg
            SYMB01 0000000000000042  a              VDI17 0000000000F03FD4  a               WID6 0000000000001400  a           subcount 000000000000000C  b 
            SYMB02 000000000000007D  a              VDI18 0000000000F03FD8  a              WID64 0000000000003000  a             tvCOPH 0000000000000058  b 
            SYMB03 00000000000000BF  a              VDI19 0000000000F03FDC  a             WID640 0000000000004A00  a             tvCOPV 000000000000005A  b 
            SYMB04 0000000000000064  a               VDI2 0000000000F03F98  a             WID768 0000000000004C00  a               tvPH 0000000000000054  b 
            SYMB05 0000000000000032  a              VDI20 0000000000F03FE0  a               WID8 0000000000001800  a               tvPV 0000000000000056  b 
            SYMB06 0000000000000096  a              VDI21 0000000000F03FE4  a              WID80 0000000000003200  a           tvcoltrn 000000000000083A  t 
            SYMB07 00000000000000AF  a              VDI22 0000000000F03FE8  a             WID896 0000000000004E00  a           tvdspmem 0000000000100000  a 
            SYMB08 0000000000000008  a              VDI23 0000000000F03FEC  a              WID96 0000000000003400  a           tvfntfbg 00000000000002B0  t 
            SYMB09 0000000000000021  a              VDI24 0000000000F03FF0  a              XADD0 0000000000020000  a           tvgrfmem 0000000000000004  b 
            SYMB10 000000000000003A  a              VDI25 0000000000F03FF4  a            XADDINC 0000000000030000  a           tvgrfmm1 000000000010F000  a 
            SYMB11 0000000000000053  a              VDI26 0000000000F03FF8  a            XADDPHR 0000000000000000  a           tvgrfmm2 0000000000121C00  a 
            SYMB12 000000000000006C  a              VDI27 0000000000F03FFC  a            XADDPIX 0000000000010000  a           tvldclt0 000000000000082A  t 
            SYMB13 0000000000000085  a               VDI3 0000000000F03F9C  a           XSIGNADD 0000000000000000  a           tvldclt1 0000000000000832  t 
            SYMB14 000000000000009E  a               VDI4 0000000000F03FA0  a           XSIGNSUB 0000000000080000  a           tvotherm 0000000000000008  b 
            SYMB15 00000000000000B7  a               VDI5 0000000000F03FA4  a              YADD0 0000000000000000  a           tvprpfnt 00000000000002C4  t 
            SYMB16 0000000000000010  a               VDI6 0000000000F03FA8  a              YADD1 0000000000040000  a           tvscrlcp 0000000000000454  t 
            SYMB17 0000000000000029  a               VDI7 0000000000F03FAC  a           YSIGNADD 0000000000000000  a           tvscrlst 0000000000000430  t 
            SYMB18 0000000000000019  a               VDI8 0000000000F03FB0  a           YSIGNSUB 0000000000100000  a           tvscroll 0000000000000460  t 
            SYMB19 000000000000005B  a               VDI9 0000000000F03FB4  a              ZBUFF 0000000000002000  a           tvsetbrd 0000000000000296  t 
            SYMB20 0000000000000074  a                VEB 0000000000F0004A  a            ZMODEEQ 0000000000080000  a           tvsetmem 0000000000000266  t 
            SYMB21 000000000000008D  a                VEE 0000000000F0004C  a            ZMODEGT 0000000000100000  a           tvxorfnt 00000000000002BA  t 
            SYMB22 00000000000000A6  a                 VI 0000000000F0004E  a            ZMODELT 0000000000040000  a           updtvgrf 000000000000065E  t 
            SYMB23 000000000000004B  a              VMODE 0000000000F00028  a             ZOFFS0 0000000000000000  a 
          ScrlColr 000000000000005E  b                 VP 0000000000F0003E  a             ZOFFS1 0000000000000040  a 
          ScrlType 000000000000005C  b                 VS 0000000000F00044  a             ZOFFS2 0000000000000080  a 
             TEST1 0000000000F00056  a              WID10 0000000000001A00  a             ZOFFS3 00000000000000C0  a 
            TOPBEN 0000000000004000  a            WID1024 0000000000005000  a             ZOFFS4 0000000000000100  a 
            TOPNEN 0000000000008000  a             WID112 0000000000003600  a             ZOFFS5 0000000000000140  a 
         TRANS_OFF 0000000000000000  a              WID12 0000000000001C00  a             ZOFFS6 0000000000000180  a 
          TRANS_ON 0000000000000004  a             WID128 0000000000003800  a             ZOFFS7 00000000000001C0  a 
              TRUE 0000000000000001  a            WID1280 0000000000005200  a           blitidle 00000000000004FA  t 
          TVCOLFLG 0000000000000002  a              WID14 0000000000001E00  a           bltfnt08 00000000000005B6  t 
          TVCOLOFF 00000000000000E0  a            WID1536 0000000000005400  a           blttvgrf 0000000000000764  t 
          TVDSPFLG 0000000000000001  a              WID16 0000000000002000  a           cdgflags 0000000000000003  bg
          TransFac 0000000000000040  b             WID160 0000000000003A00  a           cdgmmend 00000000001349C0  a 
          TvChnlAv 0000000000000000  bg           WID1792 0000000000005600  a           clrtvdsp 0000000000000506  t 
          TvChnlNo 0000000000000002  bg            WID192 0000000000003C00  a           clrtvgrf 000000000000055E  t 
          TvColBlu 0000000000000030  b               WID2 0000000000000800  a           cp2tvdsp 0000000000000A40  t 
          TvColGrn 0000000000000020  b              WID20 0000000000002200  a            dispsub 0000000000000914  tg
          TvColRed 0000000000000010  b            WID2048 0000000000005800  a           fontblit 00000000001349B0  a 
             UPDA1 0000000000000200  a             WID224 0000000000003E00  a           fontdata 0000000000134920  a 
            UPDA1F 0000000000000100  a              WID24 0000000000002400  a             gpuend external  ax
             UPDA2 0000000000000400  a             WID256 0000000000004000  a            initcdg 0000000000000034  tg
               VBB 0000000000F00040  a            WID2560 0000000000005A00  a            initgpu 0000000000000000  tg
               VBE 0000000000F00042  a              WID28 0000000000002600  a            ldclut1 000000000000083C  t 
                VC 0000000000F00006  a            WID3072 0000000000005C00  a            ldtrans 00000000000008CA  t 

