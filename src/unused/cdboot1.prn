
                                        src/cdboot1.s        Page 1       4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


    1                                   ;**************************************************************************
    2                                   ; (C)1994 ATARI CORP.       SECRET & CONFIDENTIAL       ALL RIGHTS RESERVED
    3                                   ;
    4                                   ;	This is a 1st stab at the CD boot code and is derived from cd_samp
    5                                   ;
    6                                   ;
    7                                   ;                                REVISION HISTORY
    8                                   ;
    9                                   ; REV.  DATE       BY            DESCRIPTION OF EDIT
   10                                   ; """"  """"       ""            """""""""""""""""""
   11                                   ; 0.01   8 Jun 94  DJS		 First Release
   12                                   ; 0.02  15 Jun 94  DJS		 Now boots a bootable CD
   13                                   ;
   14                                   ;****************************************************************************
   15                                   ;
   16                                   ;The 5 following conditionals must all be false (0) for production release
   17           =00000000               fail2ill	equ	0	;conditional for CD-ROM failures -> "illegal"
   18           =00000000               erreport	equ	0	;conditional for "endless" boot,errors to Alpine
   19           =00000000               errdRAM		equ	0	;send erreport errors to dRAM instead of Alpine
   20           =00000000               seqblock	equ	0	;sequential block (rand order) instead of rand
   21           =00000000               noecrypt	equ	0	;conditional for skip encrypt stuff
   22                                   ;
   23                                   ;
   24           =00000006               backfrm		equ	6	;frames to back-up before seek
   25           =00000005               maxretry	equ	5	;CD ERR or seek errors warrant this # of retries
   26                                   ;
   27                                   ;
   28                                   ;
   32                                   	.list
   33                                   	.include 'cd.inc'	; CD-related equates
    1                                   ;**************************************************************************
    2                                   ; (C)1993 ATARI CORP.       SECRET & CONFIDENTIAL       ALL RIGHTS RESERVED
    3                                   ;
    4                                   ;				     CD.INC
    5                                   ;
    6                                   ;                                REVISION HISTORY
    7                                   ;
    8                                   ; REV.  DATE       BY            DESCRIPTION OF EDIT
    9                                   ; """"  """"       ""            """""""""""""""""""
   10                                   ; 1.00  20 Apr 94  LJT		 First Release
   11                                   ; 1.01  24 May 94  LJT		 Added CD_getoc
   12                                   ; 1.02  31 May 94  LJT		 Added err_flag
   13                                   ; 1.03  16 Nov 94  LJT		 Added CD_initm & CD_initf
   14                                   ;**************************************************************************
   15                                   
   16                                   ; Jump table to ALL of the functions
   17                                   
   18           =00003000               CD_init		EQU	$3000
   19           =00003006               CD_mode		EQU	CD_init	+ 6
   20           =0000300C               CD_ack		EQU	CD_mode	+ 6
   21           =00003012               CD_jeri		EQU	CD_ack	+ 6
   22           =00003018               CD_spin		EQU	CD_jeri	+ 6
   23           =0000301E               CD_stop		EQU	CD_spin	+ 6
   24           =00003024               CD_mute		EQU	CD_stop	+ 6
   25           =0000302A               CD_umute	EQU	CD_mute	+ 6
   26           =00003030               CD_paus		EQU	CD_umute+ 6


                                        cd.inc               Page 2       4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   27           =00003036               CD_upaus	EQU	CD_paus	+ 6
   28           =0000303C               CD_read		EQU	CD_upaus+ 6
   29           =00003042               CD_uread	EQU	CD_read	+ 6
   30           =00003048               CD_setup	EQU	CD_uread+ 6
   31           =0000304E               CD_ptr		EQU	CD_setup+ 6
   32           =00003054               CD_osamp	EQU	CD_ptr	+ 6
   33           =0000305A               CD_getoc	EQU	CD_osamp+ 6
   34           =00003060               CD_initm	EQU	CD_getoc+ 6
   35           =00003066               CD_initf	EQU	CD_initm+ 6
   36           =0000306C               CD_switch	EQU	CD_initf+ 6
   37                                   
   38           =00003E00               err_flag	EQU	$3e00
   39                                   
   40           =00002C00               CD_toc		EQU	$2c00
   41                                   
   42           =00003004               BIOS_VER	EQU	$3004
   34                                   
   35                                   	.extern	end		; needed for GPU program load by DB
   36                                   	.extern GPU_done
   37                                   	.extern GPU_state
   38                                   	.extern	SETUP
   39                                                                   ; These define the main DRAM CD data buf area
   40                                   	.extern	GPUSTART
   41                                   	.extern	GPUEND
   42                                   
   43                                   	.extern	SETUP
   44                                   	.extern	CDREADER
   45                                   ;
   46                                   ;
   47                                   ;   Useful Kart locations
   48                                   ;
   49           =00800400               ROMCONFIG	equ	$800400		;4 identical bytes of 000XXXX0 for MEMCON2
   50           =00800404               JUMPVEC		equ	$800404		;desired start-up (usually $802000)
   51           =00800408               FLAGS		equ	$800408		;skip intro if bit0=1, (others reserved, 0)
   52                                   ;
   53                                   ;
   54                                   ;  some fixed locations we need in cdfront.s...
   55                                   ;
   56           =00080000               RanGetEE	equ	$80000	
   57           =00080004               RanPutEE	equ	$80004
   58           =00080008               randfAD		equ	$80008
   59           =0008000C               CDfront		equ	$8000C
   60                                   ;
   61                                   ;
   62                                   ;
   63           =00002C00               CDtoc		equ	$2c00	;CD directory goes here
   64           =00004000               GameInit	equ	$4000	;CD boot sector is initially loaded here
   65           =00024000               GameOver	equ	$24000	;end of CD boot sector buffer		
   66           =00050000               relocad		equ	$50000	;final org address of this module
   67                                   ;
   68                                   ; Butch's hardware registers
   69                                   ;
   70                                   ;
   71           =00DFFF00               BUTCH     equ  $DFFF00		;base of Butch=interrupt control register, R/W
   72                                   ;
   73                                   ;  When written (Long):


                                        src/cdboot1.s        Page 3       4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


   74                                   ;
   75                                   ;  bit0 - set to enable interrupts
   76                                   ;  bit1 - enable CD data FIFO half full interrupt
   77                                   ;  bit2 - enable CD subcode frame-time interrupt (@ 2x spped = 7ms.)
   78                                   ;  bit3 - enable pre-set subcode time-match found interrupt
   79                                   ;  bit4 - CD module command transmit buffer empty interrupt
   80                                   ;  bit5 - CD module command receive buffer full
   81                                   ;  bit6 - CIRC failure interrupt
   82                                   ;
   83                                   ;  bit7-31  reserved, set to 0 
   84                                   ;
   85                                   ;
   86                                   ;  When read (Long):
   87                                   ;
   88                                   ;  bit0-8 reserved
   89                                   ;
   90                                   ;  bit9  - CD data FIFO half-full flag pending
   91                                   ;  bit10 - Frame pending
   92                                   ;  bit11 - Subcode data pending
   93                                   ;  bit12 - Command to CD drive pending (trans buffer empty if 1)
   94                                   ;  bit13 - Response from CD drive pending (rec buffer full if 1)
   95                                   ;  bit14 - CD uncorrectable data error pending
   96                                   ;
   97                                   ;
   98                                   ;   Offsets from BUTCH
   99                                   ;
  100           =00000004               DSCNTRL   equ  4		; DSA control register, R/W
  101           =0000000A               DS_DATA   equ  $A		; DSA TX/RX data, R/W
  102                                   ;
  103                                   ;
  104                                   ;
  105           =00000010               I2CNTRL   equ  $10		; i2s bus control register, R/W
  106                                   ;
  107                                   ;  When read:
  108                                   ;
  109                                   ;  b0 - I2S data from drive is ON if 1
  110                                   ;  b1 - I2S path to Jerry is ON if 1
  111                                   ;  b2 - reserved
  112                                   ;  b3 - host bus width is 16 if 1, else 32
  113                                   ;  b4 - FIFO state is not empty if 1
  114                                   ;
  115                                   ;
  116                                   ;
  117                                   ;
  118           =00000014               SBCNTRL   equ  $14		; CD subcode control register, R/W
  119           =00000018               SUBDATA   equ  $18		; Subcode data register A
  120           =0000001C               SUBDATB   equ  $1C		; Subcode data register B
  121           =00000020               SB_TIME   equ  $20		; Subcode time and compare enable (D24)
  122           =00000024               FIFODAT   equ  $24		; i2s FIFO data
  123           =00000028               I2SDAT2   equ  $28		; i2s FIFO data (old)
  124                                   ;
  125                                   ;
  126                                   ;
  127                                   ;
  128                                   start:
  129  00000000  2E7C00200000           	move.l	#$200000,A7	; set stack pointer up high


                                        src/cdboot1.s        Page 4       4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  130           =FFFB0000               reladj	equ	start-relocad
  131                                   ;
  132                                   ;
  133                                   ;  Memory map for 16-May-95
  134                                   ;
  135                                   ;  magic   - $2400-$2403   $12345678 is here so Karts know CD drive present
  136                                   ;  Q_codes - $2800-$281F   Only if audio CD is this used for copy of Q-subcodes
  137                                   ;
  138                                   ;  cdbios  - $3000-$39E7   v.4.04 
  139                                   ; sysload  - $3A00-$3Cxx
  140                                   ; err_flag - $3E00-$3E01   cdbios error code
  141                                   ;
  142                                   ; user     - $4000-$FAFFF  safe area for CDroms to load their boot sector
  143                                   ;
  144                                   ;cdboot1.bss - $FB000-$FF4F7
  145                                   ;  cdboot1   - $50000-$5212F
  146                                   ;  cdfront   - $80000-$8B368
  147                                   ;
  148                                   ;  screens   - $100000-$191FFF
  149                                   ;  vlm	     - $192000-$1ACFAC (upper half of dRAM allocated for vlm)
  150                                   ;  stack     - $1FFFxx-$1FFFFF
  151                                   ;
  152                                   ;
  153  00000006  70FF                   	moveq	#-1,d0			;start timer, just in case it's 0'd
  154  00000008  23C000F10004           	move.l	d0,$f10004		; for use in selecting start-up screen
  155                                   ;
  156                                   ;  Load the VLM
  157                                   ;
  158  0000000E  41F9xxxxxxxx           	lea	vlm,a0
  159  00000014  43F900192000           	lea	$192000,a1
  160  0000001A  45F9xxxxxxxx           	lea	vlmx,a2
  161                                   vlmset:
  162  00000020  22D8                   	move.l	(a0)+,(a1)+
  163  00000022  B1CA                   	cmp.l	a2,a0
  164  00000024  65FA                   	bcs	vlmset
  165                                   ;
  166                                   ;
  167                                   ;  Some symbols imported from Jeff's code
  168                                   ;
  171                                   	.list
  172                                   ;
  173                                   ;
  174                                   ;  Load cdfront
  175                                   ;
  176  00000026  41F9xxxxxxxx           	lea	cdfront,a0
  177  0000002C  43F900080000           	lea	$80000,a1
  178  00000032  45F9xxxxxxxx           	lea	cdfrontx,a2
  179                                   cdfset:
  180  00000038  22D8                   	move.l	(a0)+,(a1)+
  181  0000003A  B1CA                   	cmp.l	a2,a0
  182  0000003C  65FA                   	bcs	cdfset
  183                                   ;
  184                                   ;  Now, load the cdbios
  185                                   ;
  186  0000003E  41F9xxxxxxxx           	lea	cd_bios,a0
  187  00000044  43F83000               	lea	$3000,a1


                                        src/cdboot1.s        Page 5       4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  188  00000048  45F9xxxxxxxx           	lea	cd_biosx,a2
  189                                   cdbioset:
  190  0000004E  22D8                   	move.l	(a0)+,(a1)+
  191  00000050  B1CA                   	cmp.l	a2,a0
  192  00000052  65FA                   	bcs	cdbioset
  193                                   ;
  194                                   ;  Copy cdboot1 to dRAM--we need to execute out of there
  195                                   ;
  196  00000054  6100xxxx               	bsr	intCDboo
  197                                   ;
  198                                   ;
  199  00000058  41F900196446           	lea	readpad,a0
  200  0000005E  33D0xxxxxxxx           	move.w	(a0),padstart		;save 1st word of joystick routine
  201  00000064  30BC4E75               	move.w	#$4e75,(a0)		;cancel joystick reads until needed
  202                                   ;
  203  00000068  41F9xxxxxxxx           	lea	newstart-reladj,a0
  204                                   jumper:
  205  0000006E  4ED0                   	jmp	(a0)			;leave this 8-bit behind
  206                                   ;
  207                                   ;
  208                                   ;
  209                                   ;
  210                                   
  211                                   intCDboo:
  212  00000070  41F900000000           	lea	start,a0
  213  00000076  43F900050000           	lea	relocad,a1
  214  0000007C  45F9xxxxxxxx           	lea	cd1,a2				;this is our last addr
  215                                   reloop:
  216  00000082  22D8                   	move.l	(a0)+,(a1)+
  217  00000084  B1CA                   	cmp.l	a2,a0
  218  00000086  65FA                   	bcs	reloop
  219                                   ;
  220                                   ;  Get error Graphics in dRAM too
  221                                   ;
  222  00000088  43F9xxxxxxxx           	lea	cd1ram,a1			;copy in the error graphics
  223  0000008E  47FAxxxx               	lea	ergrafx(pc),a3
  224  00000092  49F9xxxxxxxx           	lea	cd1ptr,a4
  225  00000098  7203                   	moveq	#3,d1
  226                                   nextgr:
  227  0000009A  205B                   	move.l	(a3)+,a0			;src start
  228  0000009C  245B                   	move.l	(a3)+,a2			;src end (+1)
  229  0000009E  28C9                   	move.l	a1,(a4)+			;save base ptr
  230                                   ergraflp:
  231  000000A0  22D8                   	move.l	(a0)+,(a1)+
  232  000000A2  B1CA                   	cmp.l	a2,a0
  233  000000A4  65FA                   	bcs	ergraflp
  234                                   ;
  235  000000A6  2009                   	move.l	a1,d0			;do a phrase alignment
  236  000000A8  5E80                   	addq.l	#7,d0
  237  000000AA  0240FFF8               	andi.w	#~7,d0
  238  000000AE  2240                   	move.l	d0,a1
  239  000000B0  51C9FFE8               	dbra	d1,nextgr		;go for next graphics form
  240                                   ;
  241  000000B4  4E75                   	rts
  242                                   
  243                                   ergrafx:


                                        src/cdboot1.s        Page 6       4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  244  000000B6  xxxxxxxx               	dc.l	cd1
  245  000000BA  xxxxxxxx               	dc.l	cd1x
  246                                   ;
  247  000000BE  xxxxxxxx               	dc.l	quest
  248  000000C2  xxxxxxxx               	dc.l	questx
  249                                   ;
  250  000000C6  xxxxxxxx               	dc.l	cdback
  251  000000CA  xxxxxxxx               	dc.l	cdbackx
  252                                   ;
  253  000000CE  xxxxxxxx               	dc.l	arrow
  254  000000D2  xxxxxxxx               	dc.l	arrowx
  255                                   ;
  256                                   ;overgraf:
  257                                   ;
  258                                   ;
  259                                   ;
  260                                   ;
  261                                   newstart:	
  262                                   ;	.if	0
  263  000000D6  41FAxxxx               	lea	stopobj(pc),a0
  264  000000DA  2008                   	move.l	a0,d0
  265  000000DC  06800000000F           	addi.l	#15,d0
  266  000000E2  0240FFF0               	andi.w	#~15,d0
  267  000000E6  4840                   	swap	d0
  268  000000E8  23C000F00020           	move.l	d0,OLP
  269                                   
  270  000000EE  41FAxxxx               	lea	NullFrm(pc),a0
  271  000000F2  21C80100               	move.l	a0,$100
  272                                   
  273  000000F6  7000                   	moveq	#0,d0
  274  000000F8  23C000F0002A           	move.l	d0,BORD1
  275                                   
  276                                   ;	move.w	#$96a0,BG		;flesh screen
  277  000000FE  33C000F00058           	move.w	d0,BG			;black screen
  278                                   
  279  00000104  33FCFFFF00F00048       	move.w	#-1,VDE
  280  0000010C  33FCFFFF00F0004E       	move.w	#-1,VI
  281  00000114  33FC010000F000E0       	move.w	#$100,INT1
  282  0000011C  33FC06C100F00028       	move.w	#$6c1,VMODE
  283                                   ;
  284  00000124  42B9xxxxxxxx           	clr.l	failcode
  285                                   ;
  286                                   ;	.endif
  287                                   ;
  288  0000012A  41FAxxxx               	lea	randf(pc),a0	;cdfront would like this address
  289  0000012E  23C800080008           	move.l	a0,randfAD	;so we'll make it avail
  290                                   ;
  291  00000134  23FC0007000700F0210C   	move.l	#$70007,G_END	;Data organisation register
  292  0000013E  23FC0007000700F1A10C   	move.l	#$70007,D_END	;Data organisation register
  293                                   ;
  294  00000148  33FC186500F00000       	move.w	#$1865,MEMCON1
  295                                   ;*NotYetmove.w	#$1875,MEMCON1	;let's try 6 (not 10) ROM cycles, 32-bit
  296                                   ;
  297  00000150  23FC0000000000DFFF00   	move.l	#0,BUTCH	;let us get at the Kart
  298                                   ;
  299                                   ;


                                        src/cdboot1.s        Page 7       4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  300                                   ;---------------------------------------------
  301                                   ;  check cart stuff
  302                                   ;
  303                                   ;
  304                                   ;   Load up the cdbios...
  305                                   ;
  306  0000015A  23FC0000000000F02114   	move.l	#0,G_CTRL	;Stop the GPU
  307  00000164  23FC0000000000F02100   	move.l	#0,G_FLAGS	;GPU Flags register
  308                                   ;
  309                                   ;
  310                                   ;
  311                                   ;
  312  0000016E  33FC0001001AE02A       	move.w	#1,vlm_mode
  313                                   ;
  314                                   ;
  315                                   ;
  316  00000176  4EB900080000           	jsr	RanGetEE	;get previous random long in d2.l
  317  0000017C  43FAxxxx               	lea	seed(pc),a1
  318  00000180  2282                   	move.l	d2,(a1)			;set our random seed
  319                                   ;
  320  00000182  23C2xxxxxxxx           	move.l	d2,randinit
  321  00000188  4842                   	swap	d2
  322  0000018A  7200                   	moveq	#0,d1
  323  0000018C  3202                   	move.w	d2,d1
  324  0000018E  82FC0009               	divu	#9,d1
  325  00000192  4841                   	swap	d1
  326  00000194  5241                   	addq.w	#1,d1	
  327  00000196  33C1001AF05E           	move.w	d1,skid			;set for this screen
  328                                   ;	move.w	#3,skid			;****test
  329  0000019C  4EB900192018           	jsr	free			;put up the free run
  330                                   ;
  331                                   	.if	0
  332                                 - 	bra	skipKart
  333                                 - 	.endif
  334                                   ;
  335                                   ; Copy over the DSP program to qualify a Kart
  336                                   ;
  337  000001A2  43F9xxxxxxxx           	lea	RSAgpu,a1
  338                                   ;
  339  000001A8  207Cxxxxxxxx           	move.l	#RSA_S,a0
  340  000001AE  247Cxxxxxxxx           	move.l	#RSA_E,a2
  341                                   ;
  342  000001B4  2E3CFFFB0000           	move.l	#reladj,d7
  343  000001BA  91C7                   	sub.l	d7,a0
  344  000001BC  95C7                   	sub.l	d7,a2
  345  000001BE  23C900F1A110           	move.l	a1,D_PC
  346                                   gloop:
  347  000001C4  22D8                   	move.l	(a0)+,(a1)+
  348  000001C6  B1CA                   	cmp.l	a2,a0
  349  000001C8  65FA                   	bcs	gloop
  350                                   ;
  351  000001CA  43FAxxxx               	lea	Public(pc),a1		;get Kart's Public Key
  352  000001CE  45F900F1B000           	lea	D_RAM,a2
  353  000001D4  7010                   	moveq	#68/4-1,d0
  354                                   keyloop:
  355  000001D6  24D9                   	move.l	(a1)+,(a2)+		;stuff in our Public key


                                        src/cdboot1.s        Page 8       4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  356  000001D8  51C8FFFC               	dbra	d0,keyloop		
  357                                   ;
  358                                   ;
  359  000001DC  21FC123456782400       	move.l	#$12345678,$2400	;set cookie location for JSR Karts 
  360                                   ;
  361                                   ;
  362  000001E4  41F900F00000           	lea	BASE,a0
  363  000001EA  203900800400           	move.l	ROMCONFIG,d0		;get ROM config byte
  364  000001F0  0240001E               	andi.w	#%11110,d0		;just allow a few bits
  365  000001F4  00401861               	ori.w	#$1861,d0
  366                                   ;
  367  000001F8  3080                   	move.w	d0,(a0)			;set MEMCON1 for our Kart
  368                                   ;
  369  000001FA  4E71                   	nop
  370  000001FC  4E71                   	nop
  371  000001FE  4E71                   	nop
  372                                   ;
  373  00000200  263900800408           	move.l	FLAGS,d3		;check flags for cart-no-boot
  374  00000206  08030002               	btst.l	#2,d3			; from CD module flag
  375  0000020A  6600xxxx               	bne	skipKart		;br to skip if we request cart-no-boot
  376                                   ;	
  377  0000020E  43F900F1A114           	lea	D_CTRL,a1
  378  00000214  22BC00000001           	move.l	#1,(a1)		;sick the DSP on the Kart (deRSA & MD5)
  379                                   ;
  380                                   wait:
  381  0000021A  2011                   	move.l	(a1),d0		;wait here
  382  0000021C  08000000               	btst.l	#0,d0		; til DSP is done
  383  00000220  66F8                   	bne	wait
  384                                   ;
  385  00000222  223900F1B000           	move.l	D_RAM,d1		;DSP is done qualifying Kart
  386  00000228  0C8103D0DEAD           	cmpi.l	#$3D0DEAD,d1
  387  0000022E  67xx                   	beq.s	.doKart
  388  00000230  0C8112345678           	cmpi.l	#$12345678,d1
  389  00000236  6700xxxx               	beq	skipKart
  390  0000023A  60DE                   	bra	wait
  391                                   ;
  392                                   ;  We have a Kart that passes encryption
  393                                   ;
  394                                   .doKart:
  395  0000023C  23FC0018000000DFFF00   	move.l	#$180000,BUTCH	;set lid-up & cart-pull reset
  396                                   ;
  397  00000246  08030001               	btst.l	#1,d3			;check for JSR Kart
  398  0000024A  67xx                   	beq.s	.notJSR			;br if not JSR Kart
  399                                   ;
  400                                   ;  A JSR kart can do stuff without using display if "option" not depressed
  401                                   ;
  402  0000024C  47F900F14000           	lea	JOY1,a3
  403  00000252  36FC8007               	move.w	#$8007,(a3)+		;check option key
  404  00000256  3013                   	move.w	(a3),d0			;bit1=0 if option down
  405  00000258  08000001               	btst.l	#1,d0
  406  0000025C  67xx                   	beq.s	.JSRdisd	;display shut-down & .bss save if option
  407                                   ;
  408                                   ;  Just leave display running if no option key
  409                                   ;
  410  0000025E  207900800404           	move.l	JUMPVEC,a0		;get start vector
  411  00000264  2F3Cxxxxxxxx           	move.l	#skipKart-reladj,-(sp)


                                        src/cdboot1.s        Page 9       4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  412  0000026A  4ED0                   	jmp	(a0)			;return after completion
  413                                   ;
  414                                   .JSRdisd:
  415  0000026C  41F9000FB000           	lea	$FB000,a0		;25-May-95
  416  00000272  43F900100000           	lea	$100000,a1
  417  00000278  45F84000               	lea	$4000,a2
  418                                   .bsscop:
  419  0000027C  24D8                   	move.l	(a0)+,(a2)+		;save .bss since NVMROM cart clobbers
  420  0000027E  B1C9                   	cmp.l	a1,a0
  421  00000280  65FA                   	bcs	.bsscop
  422                                   ;
  423                                   .notJSR:
  424  00000282  33FC000200198CAC       	move.w	#2,freerun		;stop GPU
  425                                   
  426                                   .waitg:
  427  0000028A  203900F02114           	move.l	G_CTRL,d0		;wait here
  428  00000290  E288                   	lsr.l	#1,d0			; til GPU is done
  429  00000292  65F6                   	bcs	.waitg
  430                                   ;
  431           =00001000               loram	equ	$1000
  432                                   ;
  433  00000294  41F81000               	lea	loram,a0
  434  00000298  43FAxxxx               	lea	Kartblk(pc),a1
  435  0000029C  45FAxxxx               	lea	Kartblke(pc),a2
  436                                   setKblk:
  437  000002A0  20D9                   	move.l	(a1)+,(a0)+
  438  000002A2  B3CA                   	cmp.l	a2,a1
  439  000002A4  65FA                   	bcs	setKblk
  440  000002A6  4EF81000               	jmp	loram
  441                                   ;
  442                                   Kartblk:
  443  000002AA  3039001AE4D2           	move.w	frames,d0
  444                                   fzwait:
  445  000002B0  3239001AE4D2           	move.w	frames,d1		;this one's more bullet proof
  446  000002B6  9240                   	sub.w	d0,d1			;added 7-Jun-95
  447                                   ;	cmpi.w	#5,d1
  448  000002B8  0C410002               	cmpi.w	#2,d1
  449  000002BC  65F2                   	bcs	fzwait
  450                                   ;
  451                                   ;*****6-Aug-95
  452  000002BE  33FCFFFF001AE4D2       	move.w	#-1,frames
  453  000002C6  41FAxxxx               	lea	videstop(pc),a0
  454  000002CA  21C80100               	move.l	a0,$100
  455  000002CE  60xx                   	bra.s	ovrids
  456                                   ;
  457                                   videstop:
  458  000002D0  21FC00194C900100       	move.l	#Frame,$100
  459  000002D8  23FC00000004001AE824   	move.l	#4,$1ae824	;stop obj here
  460  000002E2  33FC002100F0004E       	move.w	#$21,VI
  461  000002EA  4279001AE4D2           	clr.w	frames
  462  000002F0  33FC010000F000E0       	move.w	#$100,INT1
  463  000002F8  33FC000000F000E2       	move.w	#$0,INT2
  464  00000300  4E73                   	rte
  465                                   ;
  466                                   ovrids:
  467  00000302  4A79001AE4D2           	tst.w	frames


                                        src/cdboot1.s        Page 10      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  468  00000308  66F8                   	bne	ovrids
  469                                   ;
  470  0000030A  41FAxxxx               	lea	stopo(pc),a0
  471  0000030E  2008                   	move.l	a0,d0
  472  00000310  06800000000F           	addi.l	#15,d0
  473  00000316  0240FFF0               	andi.w	#~15,d0
  474  0000031A  4840                   	swap	d0
  475  0000031C  23C000F00020           	move.l	d0,OLP
  476                                   ;
  477  00000322  41FAxxxx               	lea	NFrm(pc),a0
  478  00000326  21C80100               	move.l	a0,$100
  479                                   ;
  480                                   ;	move.w	#-1,VI	;***21-Feb-95  Raiden (NTSC only) needs running
  481                                   ;
  482                                   ;	move.w	#$100,INT1
  483                                   ;	move.w	#$101,INT1		;*** Flashback (PAL only) likes
  484                                   ;
  485  0000032A  7000                   	moveq	#0,d0
  486  0000032C  23C000F0002A           	move.l	d0,BORD1
  487  00000332  33C000F00058           	move.w	d0,BG			;black screen
  488                                   ;
  489  00000338  207900800404           	move.l	JUMPVEC,a0		;get start vector
  490  0000033E  203900800408           	move.l	FLAGS,d0		;check for JUMP or JSR option
  491  00000344  08000001               	btst.l	#1,d0			;we assign this to bit 1
  492  00000348  66xx                   	bne.s	dojsr
  493                                   ;
  494                                   ;
  495                                   ;
  496                                   ;  ***4-Aug-95 this bit of madness for a piece of shit game
  497                                   ;	lea	$800004,a1
  498                                   ;	cmpi.l	#$749084f7,(a1)+	;Flashback?
  499                                   ;	bne.s	nflash			;br if not
  500                                   ;	cmpi.l	#$c99607f4,(a1)		;really, truely Flashback?
  501                                   ;	bne.s	nflash
  502                                   ;
  503                                   ;	moveq	#-1,d0			;these 3 instructions
  504                                   ;flashbut:
  505                                   ;	dbra	d0,flashbut		;help FlashBack (PAL only)
  506                                   ;	move.w	#$100,INT1		;function
  507                                   ;
  508                                   ;
  509                                   nflash:
  510                                   ;	
  511  0000034A  4ED0                   	jmp	(a0)			;Jump II Kart (wherever it wants us)
  512                                   ;
  513                                   dojsr:
  514  0000034C  2F3Cxxxxxxxx           	move.l	#KartRest-reladj,-(sp)
  515  00000352  4ED0                   	jmp	(a0)			;return after completion
  516                                   ;
  517                                   ;
  518                                   stopo:
  519  00000354  0004000400040004       	dc.w	4,4,4,4
  520  0000035C  0004000400040004       	dc.w	4,4,4,4
  521  00000364  0004000400040004       	dc.w	4,4,4,4
  522  0000036C  0004000400040004       	dc.w	4,4,4,4
  523                                   NFrm:


                                        src/cdboot1.s        Page 11      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  524  00000374  33FC010000F000E0       	move.w	#$100,INT1
  525                                   ;	move.w	#$101,INT1		;*** Flashback (PAL only) likes
  526  0000037C  33FC000000F000E2       	move.w	#$0,INT2
  527  00000384  4E73                   	rte
  528                                   Kartblke:
  529                                   ;
  530                                   ;  Restart the display if Kart used its own
  531                                   ;
  532                                   KartRest:
  533  00000386  41F9000FB000           	lea	$FB000,a0		;25-May-95
  534  0000038C  43F900100000           	lea	$100000,a1
  535  00000392  45F84000               	lea	$4000,a2
  536                                   .bssrest:
  537  00000396  20DA                   	move.l	(a2)+,(a0)+		;restore .bss since NVMROM cart clobbers
  538  00000398  B1C9                   	cmp.l	a1,a0
  539  0000039A  65FA                   	bcs	.bssrest
  540                                   ;
  541                                   
  542  0000039C  4EB900192018           	jsr	free		;restart the display
  543                                   ;
  544                                   skipKart:
  545                                   ;-------------------------
  546  000003A2  33FC0005xxxxxxxx       	move.w	#maxretry,retryz	;init Directory read retry count
  547                                   TOCagin:
  548                                   
  549  000003AA  33FC187500F00000       	move.w	#$1875,MEMCON1	;let's try 6 (not 10) ROM cycles, 32-bit
  550                                   ;
  551  000003B2  41F900DFFF00           	lea	BUTCH,a0	;added 8-May-95
  552  000003B8  20BC00020000           	move.l	#$20000,(a0)	;reset CD module
  553  000003BE  6100xxxx               	bsr	delay
  554  000003C2  20BC00000000           	move.l	#0,(a0)
  555                                   ;
  556  000003C8  217C000000000004       	move.l	#0,4(a0)	
  557  000003D0  6100xxxx               	bsr	delay
  558                                   ;
  559  000003D4  33FC000000F14000       	move.w	#0,JOY1		;mute this thing
  560                                   ;
  561                                   Start_CD:                       ; Beginning of CD_related code
  562                                   ;
  563  000003DC  6100xxxx               	bsr	chkCD		;talk to BUTCH and check for proper function
  564  000003E0  6600xxxx               	bne	powup		;br if not proper function (power out)
  565                                   ;
  566  000003E4  303C0003               	move.w	#3,d0		; Go to double speed, CDROM mode
  567  000003E8  4EB83006               	jsr	CD_mode
  568                                   ;
  569                                   ;***********************************************
  570                                   ;
  571                                   ;  The following is for Boot-ROM diagnostics only..
  572                                   ;
  573                                   ;   error report goes to Alpine:
  574                                   ;
  575                                   ;   900000 - total count
  576                                   ;   900004 - #1 failure count
  577                                   ;   900008 - #2
  578                                   ;   90000C - #3
  579                                   ;   900010 - #4


                                        src/cdboot1.s        Page 12      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  580                                   ;   900014 - #5
  581                                   ;   900018 - #6
  582                                   ;
  583                                   ;   900020 - block #0 passes
  584                                   ;   900024 - failures
  585                                   ;
  586                                   ;   900028 - block #1 passes
  587                                   ;   90002C - failures
  588                                   ;
  589                                   ;   etc.
  590                                   ;
  591                                   ;   900818 - block #ff passes
  592                                   ;   90081C - failures
  593                                   ;
  594                                   	.if	errdRAM
  595                                 - 	move.l	#$20000,errBASE
  596                                 - 	.else
  597  000003EC  23FC00900000xxxxxxxx   	move.l	#$900000,errBASE
  598                                   	.endif
  599                                   ;
  600                                   	.if	seqblock
  601                                 - 	clr.l	$90000			;seqblock allocation
  602                                 - 	.endif
  603                                   ;
  604                                   ;
  605                                   	.if	erreport
  606                                 - ;
  607                                 - ;
  608                                 - ;
  609                                 - 	move.l	errBASE,a0
  610                                 - 	moveq	#0,d0
  611                                 - 	move.w	#$4000-1,d1	;init diag
  612                                 - clrdiag:
  613                                 - 	move.l	d0,(a0)+
  614                                 - 	dbra	d1,clrdiag
  615                                 - ;
  616                                 - 	move.l	a0,d0		;init ptr to seq recorder
  617                                 - 	addq.l	#4,d0
  618                                 - 	move.l	d0,(a0)
  619                                 - ;
  620                                 - ;****************Dave's output folly here
  621                                 - 	lea	brdata(pc),a0
  622                                 - 	lea	beasties+$80,a1
  623                                 - 	moveq	#6,d0
  624                                 - setboard:
  625                                 - 	move.l	(a0)+,(a1)+
  626                                 - 	dbra	d0,setboard
  627                                 - ;
  628                                 - 	suba.w	#16,a1
  629                                 - 	move.w	#-1,CLUT+2
  630                                 - 	move.w	#1,(a1)
  631                                 - ;
  632                                 - 	lea	board,a0
  633                                 - 	moveq	#0,d0
  634                                 - 	move.w	#$400,d1
  635                                 - clrboar:


                                        src/cdboot1.s        Page 13      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  636                                 - 	move.l	d0,(a0)+
  637                                 - 	dbra	d1,clrboar
  638                                 - ;
  639                                 - ;
  640                                 - 	move.w	#5,cursx
  641                                 - 	move.w	#21,cursy
  642                                 - 
  643                                 - 	lea	amsg(pc),a0
  644                                 - 	bsr	printd
  645                                 - 
  646                                 - 	move.w	#23,cursy
  647                                 - 	bsr	outdata
  648                                 - 	bra	overmsg
  649                                 - ;
  650                                 - brdata:
  651                                 - 	dc.l	$18fff8,$3cff7c,$240024,$ffff0001
  652                                 - 	dc.l	board,$10000,$500f0
  653                                 - amsg:
  654                                 - 	dc.b	"Hashes                    Fails",0
  655                                 - numstr:
  656                                 - 	dc.b	"00000000",0
  657                                 - 	.even
  658                                 - outdata:
  659                                 - 	move.l	errBASE,a1
  660                                 - 	move.l	(a1),d0
  661                                 - 	bsr	makestr
  662                                 - 	move.w	#5,cursx
  663                                 - 	bsr	printd
  664                                 - 	move.l	errBASE,a1
  665                                 - 	adda.w	#$18,a1
  666                                 - 	move.l	(a1),d0
  667                                 - 	bsr	makestr
  668                                 - 	move.w	#28,cursx
  669                                 - 	bsr	printd
  670                                 - 	rts
  671                                 - ;
  672                                 - ;  a0 -> output string, cursx/cursy is start position
  673                                 - ;
  674                                 - printd:
  675                                 - 	movem.l	a0-a4/d0-d2,-(sp)
  676                                 - 	lea	board,a1
  677                                 - 	lea	myFont,a2
  678                                 - 	move.w	cursy,d0
  679                                 - 	mulu	#40*8,d0
  680                                 - 	moveq	#0,d1
  681                                 - 	move.w	cursx,d1
  682                                 - 	add.l	d1,d0
  683                                 - 	adda.w	d0,a1
  684                                 - printdll:
  685                                 - 	moveq	#0,d0
  686                                 - 	move.b	(a0)+,d0
  687                                 - 	beq.s	printdx
  688                                 - 	add.w	d0,d0
  689                                 - 	move.w	4(a2,d0.w),d0
  690                                 - 	lea	(a2,d0.w),a3
  691                                 - 	move.l	a1,a4


                                        src/cdboot1.s        Page 14      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  692                                 - 	moveq	#7,d1
  693                                 - printdl:
  694                                 - 	move.b	(a3)+,(a4)
  695                                 - 	adda.w	#40,a4
  696                                 - 	dbra	d1,printdl
  697                                 - 	addq.l	#1,a1
  698                                 - 	bra	printdll
  699                                 - printdx:
  700                                 - 	movem.l	(sp)+,a0-a4/d0-d2
  701                                 - 	rts
  702                                 - ;
  703                                 - ;
  704                                 - makestr:
  705                                 - 	lea	numstr(pc),a0
  706                                 - 	moveq	#7,d2
  707                                 - 	moveq	#0,d3
  708                                 - makestlp:
  709                                 - 	rol.l	#4,d0
  710                                 - 	move.w	d0,d1
  711                                 - 	andi.w	#$f,d1
  712                                 - 	bne.s	makest
  713                                 - 	tst.w	d3
  714                                 - 	bmi.s	makest
  715                                 - 	tst.w	d2
  716                                 - 	beq.s	makest
  717                                 - 	move.b	#" ",(a0)+
  718                                 - 	bra.s	makestx	
  719                                 - makest:
  720                                 - 	moveq	#-1,d3
  721                                 - 	move.b	hextab(pc,d1.w),(a0)+
  722                                 - makestx:
  723                                 - 	dbra	d2,makestlp
  724                                 - 	subq.l	#8,a0
  725                                 - 	rts
  726                                 - hextab:
  727                                 - 	dc.b	"0123456789ABCDEF"	
  728                                 - overmsg:
  729                                 - ;*****************end Dave's output folly
  730                                 - 	.endif
  731                                   ;
  732                                   ;   Now, let's read the directory
  733                                   ;
  734                                   DSP_wait:
  735  000003F6  203900F1A114           	move.l	D_CTRL,d0
  736  000003FC  E288                   	lsr.l	#1,d0
  737  000003FE  65F6                   	bcs	DSP_wait
  738                                   ;
  739                                   ; Load, & initialize DSP "gettoc" program
  740                                   ;
  741                                   Do_DSP:
  742  00000400  207Cxxxxxxxx           	move.l	#DSP_S,a0
  743  00000406  2E3CFFFB0000           	move.l	#reladj,d7
  744  0000040C  91C7                   	sub.l	d7,a0
  745  0000040E  227Cxxxxxxxx           	move.l	#DSP_E,a1
  746  00000414  93C7                   	sub.l	d7,a1
  747                                   ;


                                        src/cdboot1.s        Page 15      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  748  00000416  2208                   	move.l	a0,d1
  749  00000418  2009                   	move.l	a1,d0
  750  0000041A  9081                   	sub.l	d1,d0		; Size in bytes
  751  0000041C  E480                   	asr.l	#2,d0
  752  0000041E  227C00F1B000           	move.l	#D_RAM,a1
  753                                   x4loop:
  754  00000424  22D8                   	move.l	(a0)+,(a1)+
  755  00000426  51C8FFFC                       dbra    d0,x4loop
  756                                   ;
  757  0000042A  23FC00F1B00000F1A110   	move.l	#D_RAM,D_PC	; Set GPU PC to start of code in SRAM
  758                                   ;
  759                                   ;
  760  00000434  41F900F1C000           	lea	$f1c000,a0
  761  0000043A  7000                   	moveq	#0,d0
  762  0000043C  723F                   	moveq	#63,d1
  763                                   clearsub:
  764  0000043E  20C0                   	move.l	d0,(a0)+
  765  00000440  51C9FFFC               	dbra	d1,clearsub
  766                                   ;
  767  00000444  23FC0000000100F1A114   	move.l	#1,D_CTRL	; start GPU
  768                                   ;
  769                                   ;
  770                                   ;   Calculate the XMODEM quick look-up table
  771                                   ;
  772                                   ;xmdmtab	equ	$2a00
  773           =00F1C400               xmdmtab		equ	$f1c400
  774                                   ;
  775                                   XMDMtab:
  776  0000044E  43F900F1C400           	lea	xmdmtab,a1
  777  00000454  7200                   	moveq	#0,d1
  778  00000456  343C1021               	move.w	#$1021,d2
  779                                   .tablp:
  780  0000045A  1801                   	move.b	d1,d4
  781  0000045C  7607                   	moveq	#7,d3
  782  0000045E  7000                   	moveq	#0,d0
  783                                   .bytelp:
  784  00000460  E348                   	lsl.w	#1,d0
  785  00000462  64xx                   	bcc.s	.hiclr
  786  00000464  E30C                   	lsl.b	#1,d4
  787  00000466  64xx                   	bcc.s	.xit
  788  00000468  60xx                   	bra.s	.noxit
  789                                   .hiclr:
  790  0000046A  E30C                   	lsl.b	#1,d4
  791  0000046C  64xx                   	bcc.s	.noxit
  792                                   .xit:
  793  0000046E  B540                   	eor.w	d2,d0
  794                                   .noxit:
  795  00000470  51CBFFEE               	dbra	d3,.bytelp
  796  00000474  22C0                   	move.l	d0,(a1)+
  797  00000476  5241                   	addq.w	#1,d1
  798  00000478  0C410100               	cmpi.w	#256,d1
  799  0000047C  66DC                   	bne	.tablp
  800                                   ;
  801                                   ;
  802  0000047E  41F900F1B000           	lea	D_RAM,a0
  803                                   dwait:


                                        src/cdboot1.s        Page 16      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  804  00000484  2010                   	move.l	(a0),d0		;wait til dsp stuffs 0 here
  805  00000486  66FC                   	bne	dwait
  806                                   ;
  807                                   ;
  808  00000488  243900F1003A           	move.l	$f1003a,d2	;use JPIT as a random
  809  0000048E  4EB900080004           	jsr	RanPutEE	;get a new random seed
  810                                   ;
  811  00000494  43F82C00               	lea	CDtoc,a1
  812  00000498  2A19                   	move.l	(a1)+,d5	;check for "Disc not present or timeout
  813  0000049A  6A00xxxx               	bpl	notTO
  814                                   ;
  815                                   ;  Error condition detected...
  816                                   ;
  817                                   ;  d5.l = $FFFF0000 if time-out (format may be CD-I or other un-recognized)
  818                                   ;	= $FFFFFFFF if disc not present (status = $402 lid closed, no disc)
  819                                   ;						= $42c lid open
  820                                   ;
  821                                   ;
  822                                   ;
  823                                   checkout:
  824  0000049E  70FF                   	moveq	#-1,d0
  825  000004A0  BA80                   	cmp.l	d0,d5		;check for invalid format or no disc type
  826  000004A2  6600xxxx               	bne	termdis0	;br if invalid format (may be CD-I or CD-ROM)
  827                                   ;
  828                                   ;  No disc present or lid up error...
  829                                   ;
  830  000004A6  303900DFFF0A           	move.w	BUTCH+DS_DATA,d0
  831  000004AC  0C40042C               	cmpi.w	#$42c,d0	;check for tray error (only recoverable)
  832  000004B0  66xx                   	bne.s	termdis2	;br if not tray--it's terminal
  833                                   ;
  834                                   ;  Lid up error (only recoverable one)
  835                                   ;
  836  000004B2  23FC0010000000DFFF00   	move.l	#$100000,BUTCH	;cart pull reset enable only (lid down disable)
  837  000004BC  7A00                   	moveq	#0,d5		;tell them to check for error clearing
  838  000004BE  6000xxxx               	bra	ntermd
  839                                   ;
  840                                   termdis2:
  841  000004C2  0C400402               	cmpi.w	#$402,d0	;was it focus error? (no disc)
  842  000004C6  66xx                   	bne.s	termdis3	;br if not
  843                                   ;
  844                                   ;  No disc means we may want to to VLM external
  845                                   ;
  846  000004C8  33F9xxxxxxxx00196446   	move.w	padstart,readpad	;restore joystick routine
  847  000004D2  6000xxxx               	bra	termdis1		;continue
  848                                   ;
  849                                   ;  Some other DSA error has been detected--Let's retry
  850                                   ;
  851                                   termdis3:
  852                                   ;
  853  000004D6  5379xxxxxxxx           	subq.w	#1,retryz
  854  000004DC  6600FECC               	bne	TOCagin		;retry with reset of BUTCH
  855                                   ;
  856  000004E0  6000xxxx               	bra	termdis0	;we give up
  857                                   ;	
  858                                   ;  come here if a CD fails authentication
  859                                   ;


                                        src/cdboot1.s        Page 17      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  860                                   failCD:
  861                                   	.if	erreport
  862                                 - 	move.l	d0,d1
  863                                 - 	lsl.l	#2,d1
  864                                 - 	move.l	errBASE,a0
  865                                 - 	addq.l	#1,(a0)		;advance total count
  866                                 - 	addq.l	#1,(a0,d1.l)	;advance error failure count
  867                                 - 	cmp.w	#6,d0		;are we a block failure?
  868                                 - 	bne.s	notmd5
  869                                 - ;
  870                                 - 	cmpi.w	#2,d6		;are we block #1?
  871                                 - 	
  872                                 - 	addq.l	#1,$2c(a0)	;increment block # failure
  873                                 - 
  874                                 - notmd5:
  875                                 - 	move.l	d0,-(sp)
  876                                 - 	move.w	#12,cursx
  877                                 - 	move.w	#5,cursy
  878                                 - 	bsr	makestr
  879                                 - 	bsr	printd
  880                                 - 	move.w	#8,cursx
  881                                 - 	move.w	#3,cursy
  882                                 - 	lea	fmsg(pc),a0
  883                                 - 	bsr	printd
  884                                 - 	bra.s	ovfmsg
  885                                 - fmsg:
  886                                 - 	.dc.b	"Failcode:",0
  887                                 - 	.even
  888                                 - ovfmsg:
  889                                 - 	move.l	(sp)+,d0
  890                                 - 
  891                                 - 	.endif
  892  000004E4  23C0xxxxxxxx           	move.l	d0,failcode	;stuff the failure code here
  893                                   termdis0:
  894  000004EA  7000                   	moveq	#0,d0
  895  000004EC  4EB8301E               	jsr	CD_stop		;stop CD 
  896                                   termdis1:
  897                                   
  898  000004F0  7AFF                   	moveq	#-1,d5		;say its terminal
  899  000004F2  23FC0018000000DFFF00   	move.l	#$180000,BUTCH	;set lid-up & cart-pull reset
  900                                   ;	move.l	#$80000,BUTCH	;set lid-up & cart-pull reset
  901                                   ;
  902                                   ;
  903                                   ;
  904                                   ntermd:
  905  000004FC  2439xxxxxxxx           	move.l	randinit,d2	;*** added 11-Apr-95
  906  00000502  EB9A                   	rol.l	#5,d2
  907  00000504  3439xxxxxxxx           	move.w	failcode+2,d2	;save failure code
  908  0000050A  0242000F               	andi.w	#$f,d2
  909  0000050E  0042DAF0               	ori.w	#$DAF0,d2
  910  00000512  4EB900080004           	jsr	RanPutEE	;*** end 11-Apr-95 addition
  911                                   ;
  912  00000518  41F9001AE148           	lea	davesobj,a0
  913  0000051E  2279xxxxxxxx           	move.l	cd1ptr,a1	;get data from ram
  914                                   ;
  915                                   ;


                                        src/cdboot1.s        Page 18      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  916                                   ;  a1 ->
  917                                   ;	+0  .w WIDTH
  918                                   ;	+2  .w HEIGHT
  919                                   ;	+4  .w D/IWIDTH
  920                                   ;	+6  .w unused, reserved
  921                                   ;	+8  .w COLORS USED (0 if PIXEL DEPTH = 4)
  922                                   ;	+A  .w PIXEL DEPTH   
  923                                   ;	+C  .l TOTAL FILE SIZE
  924                                   ;
  925                                   ;	+10  N Palette Words (N=0,2,4,16,256 for PIXEL DEPTHS 4,0,1,2,3)
  926                                   ;
  927                                   ;	+10+(2N) Start of Bit-Map
  928                                   ;
  929                                   ;	
  930  00000524  72FF                   	moveq	#-1,d1
  931  00000526  3141000C               	move.w	d1,$c(a0)	;turn object off while we're working on 'em
  932  0000052A  30BC0090               	move.w	#$90,(a0)	;set davesobj horz position
  933  0000052E  317C01500004           	move.w	#$150,$4(a0)	;vert position
  934  00000534  31690002001A           	move.w	2(a1),$1A(a0)	;height
  935  0000053A  317C00010014           	move.w	#1,$14(a0)	;rmw or transparent
  936  00000540  317C00000016           	move.w	#0,$16(a0)	;palette index
  937  00000546  316900040018           	move.w	$4(a1),$18(a0)	;DWIDTH
  938  0000054C  3169000A001C           	move.w	$A(a1),$1C(a0)	;pixel depth
  939                                   ;
  940  00000552  45E90210               	lea	$210(a1),a2
  941  00000556  214A0010               	move.l	a2,$10(a0)	;set graphics base addr
  942                                   ;
  943                                   ;  load the palette
  944                                   ;
  945                                   repaller:
  946  0000055A  45E90010               	lea	$10(a1),a2
  947  0000055E  47F900F00400           	lea	CLUT,a3
  948  00000564  342B0082               	move.w	$82(a3),d2
  949  00000568  303C00FF               	move.w	#255,d0	
  950                                   fullpal:
  951  0000056C  36DA                   	move.w	(a2)+,(a3)+
  952  0000056E  51C8FFFC               	dbra	d0,fullpal
  953                                   ;
  954  00000572  303C00FF               	move.w	#255,d0
  955                                   chkp:
  956  00000576  3223                   	move.w	-(a3),d1
  957  00000578  B262                   	cmp.w	-(a2),d1
  958  0000057A  66DE                   	bne	repaller
  959  0000057C  51C8FFF8               	dbra	d0,chkp
  960                                   ;
  961  00000580  33C200F00482           	move.w	d2,CLUT+$82
  962                                   ;
  963                                   	.if	erreport
  964                                 - 	move.w	#-1,CLUT+2
  965                                 - 	.endif
  966                                   ;
  967  00000586  317C0006000C           	move.w	#6,$c(a0)	;turn it on
  968                                   ;
  969                                   ;
  970  0000058C  41F9001AE188           	lea	davesobj+$40,a0
  971  00000592  2279xxxxxxxx           	move.l	questptr,a1	;get data from ram


                                        src/cdboot1.s        Page 19      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


  972                                   ;
  973                                   ;
  974  00000598  72FF                   	moveq	#-1,d1
  975  0000059A  3141000C               	move.w	d1,$c(a0)	;turn object off while we're working on 'em
  976  0000059E  30BC00AC               	move.w	#$ac,(a0)	;set davesobj horz position
  977                                   ;
  978  000005A2  317C01700004           	move.w	#$170,$4(a0)	;vert position
  979  000005A8  31690002001A           	move.w	2(a1),$1A(a0)	;height
  980  000005AE  317C00010014           	move.w	#1,$14(a0)	;rmw or transparent
  981  000005B4  317C00000016           	move.w	#0,$16(a0)	;palette index
  982  000005BA  316900040018           	move.w	$4(a1),$18(a0)	;DWIDTH
  983  000005C0  3169000A001C           	move.w	$A(a1),$1C(a0)	;pixel depth
  984                                   ;
  985  000005C6  45E90210               	lea	$210(a1),a2
  986  000005CA  214A0010               	move.l	a2,$10(a0)	;set graphics base addr
  987  000005CE  7EFF                   	moveq	#-1,d7
  988                                   donemiss:
  989  000005D0  41F9001AE188           	lea	davesobj+$40,a0
  990                                   ques2:
  991  000005D6  72FF                   	moveq	#-1,d1		;assume off
  992  000005D8  08470000               	bchg	#0,d7
  993  000005DC  67xx                   	beq.s	offer
  994  000005DE  7206                   	moveq	#6,d1
  995                                   offer:
  996                                   ;	
  997  000005E0  3141000C               	move.w	d1,$c(a0)	;turn it on/off
  998                                   ;
  999                                   ;		   3         2         1         0
 1000                                   ;		  10987654321098765432109876543210
 1001                                   ;		  xxAPxxBxRLDU147*xxCxxxOx2580369#
 1002  000005E4  223C20010001           	move.l	#%00100000000000010000000000000001,d1	;simultaneous A * #
 1003  000005EA  3039001AE4D2           	move.w	frames,d0
 1004                                   ;7-Jun	add.w	#40,d0
 1005                                   .frwait:
 1006  000005F0  4A85                   	tst.l	d5		;are we terminal?
 1007  000005F2  67xx                   	beq.s	.noxchk
 1008  000005F4  B2B9001AE00C           	cmp.l	pad_now,d1	;check joystick
 1009  000005FA  66xx                   	bne.s	.noxchk		;br if A * # not pressed together
 1010                                   ;
 1011  000005FC  43F82C00               	lea	CDtoc,a1
 1012  00000600  4299                   	clr.l	(a1)+
 1013  00000602  4299                   	clr.l	(a1)+
 1014  00000604  22BC01000000           	move.l	#$01000000,(a1)
 1015  0000060A  6000xxxx               	bra	notTO
 1016                                   ;
 1017                                   ;	clr.l	CDtoc
 1018                                   ;	clr.l	CDtoc+4
 1019                                   ;	move.l	#$80000,BUTCH	;set-up lid-up reset
 1020                                   ;	move.w	#-1,davesobj+$c
 1021                                   ;	move.w	#-1,davesobj+$4c	;turn off error graphics, if any
 1022                                   ;	move.w	#2,freerun	;stop GPU
 1023                                   ;	jmp	$80000		;else, just start-up VLM in external
 1024                                   ;
 1025                                   .noxchk:
 1026                                   ;7-Jun	cmp.w	frames,d0
 1027                                   ;7-Jun	bne	.frwait


                                        src/cdboot1.s        Page 20      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1028                                   ;
 1029  0000060E  3439001AE4D2           	move.w	frames,d2	;7-Jun-95
 1030  00000614  9440                   	sub.w	d0,d2		;this makes the flashing "?" more bullet proof
 1031  00000616  0C420028               	cmpi.w	#40,d2
 1032  0000061A  65D4                   	bcs	.frwait
 1033                                   ;
 1034                                   ;
 1035  0000061C  4A85                   	tst.l	d5		;are we terminal (must wait for reset)?
 1036  0000061E  66B0                   	bne	donemiss	;br if so
 1037                                   ;
 1038                                   ;  now we can wait for the whip (lid) to come down..
 1039                                   ;
 1040  00000620  49F900DFFF00           	lea	BUTCH,a4
 1041  00000626  303C1700               	move.w	#$1700,d0	;clear error
 1042  0000062A  6100xxxx               	bsr	DSAcmd
 1043                                   ;
 1044  0000062E  303C0B00               	move.w	#$b00,d0
 1045  00000632  6100xxxx               	bsr	DSAcmd		;tray closed
 1046                                   ;
 1047  00000636  0240FF00               	andi.w	#$ff00,d0
 1048  0000063A  0C400400               	cmpi.w	#$400,d0
 1049  0000063E  6790                   	beq	donemiss	;wait for error to go away
 1050                                   ;
 1051  00000640  41F9001AE148           	lea	davesobj,a0
 1052  00000646  317CFFFF000C           	move.w	#-1,$c(a0)
 1053  0000064C  317CFFFF004C           	move.w	#-1,$4c(a0)	;turn off error stuff
 1054                                   ;
 1055  00000652  3039001AE4D2           	move.w	frames,d0	;make sure door is closed
 1056                                   ;7-Jun	add.w	#40,d0
 1057                                   .frwaitx:
 1058                                   ;7-Jun	cmp.w	frames,d0
 1059                                   ;7-Jun	bne	.frwaitx
 1060                                   ;
 1061  00000658  3439001AE4D2           	move.w	frames,d2	;7-Jun
 1062  0000065E  9440                   	sub.w	d0,d2		;Make this more bullet proof
 1063  00000660  0C420005               	cmpi.w	#5,d2
 1064  00000664  65F2                   	bcs	.frwaitx
 1065                                   ;
 1066                                   ;
 1067  00000666  6000FD42               	bra	TOCagin		;retry
 1068                                   ;	bra	DSP_wait		;retry
 1069                                   ;
 1070                                   ;
 1071                                   ;  Make a multi-session CD into a VLM playable one
 1072                                   ;
 1073                                   CDplus:
 1074  0000066A  7000                   	moveq	#0,d0
 1075  0000066C  4EB83012               	jsr	CD_jeri		;turn off jerry I2S irq's
 1076                                   ;
 1077  00000670  47F9xxxxxxxx           	lea	SEMIPTR,a3
 1078  00000676  26BC00000000           	move.l	#0,(a3)		;shut down DSP program so we can load another
 1079                                   ;
 1080  0000067C  47F900F1A114           	lea	D_CTRL,a3
 1081                                   .shutDSP:
 1082  00000682  2013                   	move.l	(a3),d0		;wait til it happens
 1083  00000684  E248                   	lsr.w	#1,d0


                                        src/cdboot1.s        Page 21      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1084  00000686  65FA                   	bcs	.shutDSP
 1085                                   ;
 1086                                   ;	lea	D_RAM,a1	;clear out DSP just for test
 1087                                   ;	move.l	#$0,d0
 1088                                   ;	move.w	#$800-1,d1
 1089                                   ;.DSPclr:
 1090                                   ;	move.l	d0,(a1)+
 1091                                   ;	dbra	d1,.DSPclr
 1092                                   ;
 1093  00000688  41F82C00               	lea	CDtoc,a0
 1094  0000068C  7004                   	moveq	#4,d0
 1095                                   multisc:
 1096  0000068E  5040                   	addq	#8,d0
 1097  00000690  22300000               	move.l	(a0,d0.w),d1	;check for session #1
 1098  00000694  6700xxxx               	beq	weAudio		;this br should never be taken
 1099                                   ;
 1100  00000698  E199                   	rol.l	#8,d1
 1101  0000069A  0C010001               	cmpi.b	#1,d1		;have we reached session #1
 1102  0000069E  66EE                   	bne	multisc		;br if not--still scanning
 1103                                   ;
 1104  000006A0  5940                   	subq	#4,d0
 1105  000006A2  3200                   	move.w	d0,d1		;d1 = offset where we start zeroing
 1106  000006A4  5140                   	subq	#8,d0		;d0 = offset of last track, session #0
 1107                                   ;
 1108  000006A6  24300000               	move.l	(a0,d0.w),d2	;
 1109  000006AA  E19A                   	rol.l	#8,d2		;get track #
 1110  000006AC  2610                   	move.l	(a0),d3
 1111  000006AE  1602                   	move.b	d2,d3		;copy to track range (last track #)
 1112  000006B0  2083                   	move.l	d3,(a0)		;save
 1113  000006B2  E08A                   	lsr.l	#8,d2		;clear off track # (leave just start time)
 1114  000006B4  26300004               	move.l	4(a0,d0.w),d3	;get track duration (session # is always 0)
 1115                                   ;
 1116  000006B8  7800                   	moveq	#0,d4		;assume no frame carry
 1117  000006BA  D403                   	add.b	d3,d2		;sum frames
 1118  000006BC  0C02004B               	cmpi.b	#75,d2
 1119  000006C0  65xx                   	bcs.s	framsum		;
 1120  000006C2  0402004B               	subi.b	#75,d2
 1121  000006C6  7801                   	moveq	#1,d4
 1122                                   framsum:
 1123  000006C8  E09A                   	ror.l	#8,d2
 1124  000006CA  E09B                   	ror.l	#8,d3
 1125  000006CC  D403                   	add.b	d3,d2		;add seconds
 1126  000006CE  D404                   	add.b	d4,d2		;and carry from frames
 1127                                   ;
 1128  000006D0  7800                   	moveq	#0,d4		;assume no seconds carry
 1129  000006D2  0C02003C               	cmpi.b	#60,d2
 1130  000006D6  65xx                   	bcs.s	secsum
 1131  000006D8  0402003C               	subi.b	#60,d2
 1132  000006DC  7801                   	moveq	#1,d4
 1133                                   secsum:
 1134  000006DE  E09A                   	ror.l	#8,d2
 1135  000006E0  E09B                   	ror.l	#8,d3
 1136  000006E2  D403                   	add.b	d3,d2		;add minutes
 1137  000006E4  D404                   	add.b	d4,d2		;and carry from seconds
 1138                                   ;
 1139  000006E6  00420100               	ori.w	#$100,d2	;put in session count (must always be 1)


                                        src/cdboot1.s        Page 22      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1140  000006EA  4842                   	swap	d2		;now we have "SESS" MM:SS:FF
 1141  000006EC  21420004               	move.l	d2,4(a0)
 1142                                   ;
 1143                                   ;  now clear higher sessions
 1144                                   ;
 1145  000006F0  7000                   	moveq	#0,d0
 1146                                   sessclr:
 1147  000006F2  21801000               	move.l	d0,(a0,d1.w)	;clear next upper session stuff
 1148  000006F6  5841                   	addq.w	#4,d1
 1149  000006F8  4AB01000               	tst.l	(a0,d1.w)	;next long non-zero?
 1150  000006FC  66F4                   	bne	sessclr		;br if so--clear it
 1151                                   ;	
 1152                                   ;	bra	weAudio		;now ready for VLM
 1153                                   ;
 1154  000006FE  43F82C04               	lea	CDtoc+4,a1
 1155  00000702  6000xxxx               	bra	notTO
 1156                                   ;
 1157                                   ; send a command to DSA and wait for single response
 1158                                   ;
 1159                                   ; Entry:
 1160                                   ;  a4 -> BUTCH
 1161                                   ;  d0 = command to send
 1162                                   ;
 1163                                   ; Exit:
 1164                                   ;  d0 = DSA's reply
 1165                                   ;
 1166                                   DSAcmd:
 1167  00000706  2414                   	move.l	(a4),d2			;check receive buffer full
 1168  00000708  0802000D               	btst.l	#13,d2
 1169  0000070C  6700xxxx               	beq	.txready		;br if receive buffer clear
 1170                                   ;
 1171  00000710  342C000A               	move.w	DS_DATA(a4),d2		;else, get bogus receive stuff
 1172  00000714  4AAC0004               	tst.l	DSCNTRL(a4)		;read to clear interrupt flag
 1173                                   .txready:
 1174  00000718  3940000A               	move.w	d0,DS_DATA(a4)		;send command word
 1175                                   .txwait1:
 1176  0000071C  740F                   	moveq	#15,d2			;this delay helps
 1177                                   .txdelay0:
 1178  0000071E  51CAFFFE               	dbra	d2,.txdelay0
 1179                                   ;
 1180  00000722  2414                   	move.l	(a4),d2			;wait til receive buffer full
 1181  00000724  0802000D               	btst.l	#13,d2
 1182  00000728  67F2                   	beq	.txwait1
 1183                                   ;
 1184  0000072A  302C000A               	move.w	DS_DATA(a4),d0
 1185  0000072E  4AAC0004               	tst.l	DSCNTRL(a4)		;read to clear interrupt flag
 1186                                   ;
 1187  00000732  4E75                   	rts
 1188                                   
 1189                                   ;----------------------------------
 1190                                   ;
 1191                                   ;
 1192                                   powup:
 1193  00000734  41F9001AE148           	lea	davesobj,a0
 1194  0000073A  2279xxxxxxxx           	move.l	cdbackpt,a1	;get data from ram
 1195                                   ;


                                        src/cdboot1.s        Page 23      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1196                                   ;  a1 ->
 1197                                   ;	+0  .w WIDTH
 1198                                   ;	+2  .w HEIGHT
 1199                                   ;	+4  .w D/IWIDTH
 1200                                   ;	+6  .w unused, reserved
 1201                                   ;	+8  .w COLORS USED (0 if PIXEL DEPTH = 4)
 1202                                   ;	+A  .w PIXEL DEPTH   
 1203                                   ;	+C  .l TOTAL FILE SIZE
 1204                                   ;
 1205                                   ;	+10  N Palette Words (N=0,2,4,16,256 for PIXEL DEPTHS 4,0,1,2,3)
 1206                                   ;
 1207                                   ;	+10+(2N) Start of Bit-Map
 1208                                   ;
 1209  00000740  72FF                   	moveq	#-1,d1
 1210  00000742  3141000C               	move.w	d1,$c(a0)	;turn object off while we're working on 'em
 1211  00000746  30BC0088               	move.w	#$88,(a0)	;set davesobj horz position
 1212  0000074A  317C01600004           	move.w	#$160,$4(a0)	;vert position
 1213  00000750  31690002001A           	move.w	2(a1),$1A(a0)	;height
 1214  00000756  317C00010014           	move.w	#1,$14(a0)	;rmw or transparent
 1215  0000075C  317C00000016           	move.w	#0,$16(a0)	;palette index
 1216  00000762  316900040018           	move.w	$4(a1),$18(a0)	;DWIDTH
 1217  00000768  3169000A001C           	move.w	$A(a1),$1C(a0)	;pixel depth
 1218                                   ;
 1219  0000076E  45E90210               	lea	$210(a1),a2
 1220  00000772  214A0010               	move.l	a2,$10(a0)	;set graphics base addr
 1221                                   ;
 1222                                   ;  load the palette
 1223                                   ;
 1224                                   .repaller:
 1225  00000776  45E90010               	lea	$10(a1),a2
 1226  0000077A  47F900F00400           	lea	CLUT,a3
 1227  00000780  303C00FF               	move.w	#255,d0	
 1228                                   .fullpal:
 1229  00000784  36DA                   	move.w	(a2)+,(a3)+
 1230  00000786  51C8FFFC               	dbra	d0,.fullpal
 1231                                   ;
 1232  0000078A  303C00FF               	move.w	#255,d0
 1233                                   .chkp:
 1234  0000078E  3223                   	move.w	-(a3),d1
 1235  00000790  B262                   	cmp.w	-(a2),d1
 1236  00000792  66E2                   	bne	.repaller
 1237  00000794  51C8FFF8               	dbra	d0,.chkp
 1238                                   ;
 1239                                   
 1240  00000798  317C0006000C           	move.w	#6,$c(a0)	;turn it on
 1241                                   ;
 1242                                   ;
 1243  0000079E  41F9001AE188           	lea	davesobj+$40,a0
 1244  000007A4  2279xxxxxxxx           	move.l	arrowptr,a1	;get data from ram
 1245                                   ;
 1246  000007AA  72FF                   	moveq	#-1,d1
 1247  000007AC  3141000C               	move.w	d1,$c(a0)	;turn object off while we're working on 'em
 1248  000007B0  363C00C4               	move.w	#$c4,d3
 1249                                   ;	move.w	#$ec,d4
 1250                                   ;	move.w	#$dc,d4
 1251  000007B4  3083                   	move.w	d3,(a0)		;set davesobj horz position


                                        src/cdboot1.s        Page 24      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1252                                   ;
 1253  000007B6  317C01980004           	move.w	#$198,$4(a0)	;vert position
 1254  000007BC  31690002001A           	move.w	2(a1),$1A(a0)	;height
 1255  000007C2  317C00010014           	move.w	#1,$14(a0)	;rmw or transparent
 1256  000007C8  317C00000016           	move.w	#0,$16(a0)	;palette index
 1257  000007CE  316900040018           	move.w	$4(a1),$18(a0)	;DWIDTH
 1258  000007D4  3169000A001C           	move.w	$A(a1),$1C(a0)	;pixel depth
 1259                                   ;
 1260  000007DA  45E90210               	lea	$210(a1),a2
 1261  000007DE  214A0010               	move.l	a2,$10(a0)	;set graphics base addr
 1262  000007E2  317C0006000C           	move.w	#6,$c(a0)	;turn it on
 1263  000007E8  363C0006               	move.w	#6,d3
 1264  000007EC  383CFFFF               	move.w	#-1,d4
 1265                                   .testwt:
 1266  000007F0  3A39001AE4D2           	move.w	frames,d5
 1267                                   .testwt1:
 1268  000007F6  48E71C80               	movem.l	a0/d3-d5,-(sp)
 1269  000007FA  6100xxxx               	bsr	chkCD		;check for power coming on
 1270  000007FE  4CDF0138               	movem.l	(sp)+,a0/d3-d5
 1271  00000802  4A40                   	tst.w	d0
 1272  00000804  67xx                   	beq.s	gotpow
 1273  00000806  3039001AE4D2           	move.w	frames,d0
 1274  0000080C  9045                   	sub.w	d5,d0
 1275  0000080E  B07C0028               	cmp.w	#40,d0
 1276  00000812  65E2                   	bcs	.testwt1
 1277                                   ;
 1278  00000814  3144000C               	move.w	d4,$c(a0)
 1279  00000818  C943                   	exg	d4,d3
 1280  0000081A  60D4                   	bra	.testwt
 1281                                   ;
 1282                                   ;  We got power--let's start the boot up again
 1283                                   ;
 1284                                   gotpow:
 1285  0000081C  41F9001AE148           	lea	davesobj,a0
 1286  00000822  70FF                   	moveq	#-1,d0
 1287  00000824  3140000C               	move.w	d0,$c(a0)	;turn off the CD module arse
 1288  00000828  3140004C               	move.w	d0,$4c(a0)
 1289                                   ;
 1290  0000082C  41F900DFFF00           	lea	BUTCH,a0	;
 1291  00000832  20BC00020000           	move.l	#$20000,(a0)	;reset CD module
 1292  00000838  6100xxxx               	bsr	delay
 1293  0000083C  20BC00000000           	move.l	#0,(a0)
 1294                                   ;
 1295  00000842  217C000000000004       	move.l	#0,4(a0)	
 1296  0000084A  6100xxxx               	bsr	delay
 1297                                   ;
 1298  0000084E  4EB83048               	jsr	CD_setup	;1st time we talk to BUTCH
 1299                                   ;
 1300  00000852  303C0003               	move.w	#3,d0		; Go to double speed, CDROM mode
 1301  00000856  4EB83006               	jsr	CD_mode
 1302                                   ;
 1303                                   ;  we got power now..
 1304                                   ;
 1305  0000085A  6000FB9A               	bra	DSP_wait	;finish up the boot
 1306                                   ;
 1307                                   ;


                                        src/cdboot1.s        Page 25      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1308                                   ;
 1309                                   delay:
 1310  0000085E  70FF                   	moveq	#-1,d0
 1311                                   del0:
 1312                                   ;	nop
 1313                                   ;	nop
 1314  00000860  51C8FFFE               	dbra	d0,del0
 1315  00000864  4E75                   	rts
 1316                                   ;
 1317                                   ;  Talk to CD (1st time) and set-up if proper funtion
 1318                                   ;
 1319                                   ;
 1320                                   chkCD:	
 1321  00000866  4EB83048               	jsr	CD_setup	;1st time we talk to BUTCH
 1322                                   ;
 1323  0000086A  41F82C00               	lea	$2c00,a0
 1324  0000086E  7000                   	moveq	#0,d0		;clear directory space
 1325  00000870  323C00FF               	move.w	#$100-1,d1	;while U wait
 1326                                   cleartoc:
 1327  00000874  20C0                   	move.l	d0,(a0)+
 1328  00000876  51C9FFFC               	dbra	d1,cleartoc
 1329                                   ;
 1330                                   ;
 1331  0000087A  323C8000               	move.w	#$8000,d1
 1332  0000087E  41F900DFFF00           	lea	BUTCH,a0
 1333                                   chkCDpow:
 1334  00000884  2010                   	move.l	(a0),d0
 1335  00000886  02402000               	andi.w	#$2000,d0
 1336  0000088A  66xx                   	bne.s	powok
 1337  0000088C  51C9FFF6               	dbra	d1,chkCDpow
 1338                                   ;
 1339                                   ;  timed out..
 1340                                   ;
 1341                                   powBAD:
 1342  00000890  23FC0002000000DFFF00   	move.l	#$20000,BUTCH	;reset CD module
 1343  0000089A  23FC0000000000DFFF04   	move.l	#0,BUTCH+4	;clear DSA
 1344                                   
 1345  000008A4  70FF                   	moveq	#-1,d0		;exit with error
 1346  000008A6  4E75                   	rts
 1347                                   powok:
 1348  000008A8  3028000A               	move.w	DS_DATA(a0),d0
 1349  000008AC  0C407001               	cmpi.w	#$7001,d0	;this indicates proper function
 1350  000008B0  66DE                   	bne	powBAD		;if not--put up power message
 1351                                   ;
 1352  000008B2  4AA80004               	tst.l	DSCNTRL(a0)	;clear DSA_rx
 1353                                   ;
 1354  000008B6  7000                   	moveq	#0,d0		;exit good
 1355  000008B8  4E75                   	rts
 1356                                   ;
 1357                                   ;
 1358                                   notTO:
 1359  000008BA  23FC0018000000DFFF00   	move.l	#$180000,BUTCH	;set lid-up & cart-pull reset
 1360                                   ;	move.l	#$80000,BUTCH	;set lid-up & cart-pull reset
 1361                                   ;
 1362  000008C4  33FCFFFF001AE154       	move.w	#-1,davesobj+$c
 1363  000008CC  33FCFFFF001AE194       	move.w	#-1,davesobj+$4c	;turn off error graphics, if any


                                        src/cdboot1.s        Page 26      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1364                                   ;
 1365  000008D4  7000                   	moveq	#0,d0
 1366  000008D6  23C000050000           	move.l	d0,relocad	;we can use this ram	
 1367                                   ;
 1368  000008DC  2011                   	move.l	(a1),d0		;pick up session count & lead-out time
 1369                                   ;
 1370  000008DE  E198                   	rol.l	#8,d0		;get session count in d0.b
 1371  000008E0  0C000002               	cmpi.b	#2,d0		;session count 2 or greater?
 1372  000008E4  6400xxxx               	bcc	GPU_init	;br if so, multi-session disk
 1373  000008E8  0C000001               	cmpi.b	#1,d0		;only 1 session?
 1374  000008EC  6600xxxx               	bne	pauz		;br if not even 1 session
 1375                                   ;
 1376  000008F0  23FC0000020800050000   	move.l	#$208,relocad	;we use this time if checking CD-rom
 1377                                   ;
 1378                                   weAudio:
 1379  000008FA  303C0000               	move.w	#0,d0		; Go to single speed, audio mode
 1380  000008FE  4EB83006               	jsr	CD_mode
 1381                                   ;
 1382  00000902  4EB8301E               	jsr	CD_stop
 1383                                   ;
 1384  00000906  33FC000200198CAC       	move.w	#2,freerun	;stop GPU
 1385                                   ;
 1386  0000090E  33F9xxxxxxxx00196446   	move.w	padstart,readpad	;restart joystick reading
 1387                                   ;
 1388  00000918  4EF90008000C           	jmp	CDfront		;jump to cdfront
 1389                                   ;
 1390                                   ;
 1391                                   pauz:
 1392                                   ;	move.w	#$96a0,BG
 1393  0000091E  60FE                   	bra	pauz
 1394                                   ;
 1395                                   ;******************************************************************
 1396                                   ;
 1397                                   ;  Multi-session disk-- this will need our special blessing before it can run
 1398                                   ;
 1399                                   GPU_init:
 1400                                   ;
 1401  00000920  4279xxxxxxxx           	clr.w	retrycnt	;init total CD ERR retry count (diag use only)
 1402                                   ;
 1403                                   JER_wait:
 1404  00000926  203900F1A114           	move.l	D_CTRL,d0	;wait til GPU is finished
 1405  0000092C  E288                   	lsr.l	#1,d0
 1406  0000092E  65F6                   	bcs	JER_wait
 1407                                   ;
 1408                                   ;
 1409                                   ;
 1410                                   ;
 1411                                   ; Load, & initialize host DSP program
 1412                                   ;
 1413                                   Do_JER:
 1414                                   	.if	noecrypt
 1415                                 - 
 1416                                 - 	lea	D_RAM,a1
 1417                                 - ;
 1418                                 - 	move.l	#MD5_S,a0
 1419                                 - 	move.l	#MD5_E,a2


                                        src/cdboot1.s        Page 27      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1420                                 - ;
 1421                                 - 	move.l	#reladj,d7
 1422                                 - 	sub.l	d7,a0
 1423                                 - 	sub.l	d7,a2
 1424                                 - 	move.l	#MD5start,D_PC
 1425                                 - loamd5:
 1426                                 - 	move.l	(a0)+,(a1)+
 1427                                 - 	cmp.l	a2,a0
 1428                                 - 	bcs	loamd5
 1429                                 - ;
 1430                                 - 	move.l	#Hashoffs,sramo+4	;set DST in burp routine
 1431                                 - ;
 1432                                 - 	move.l	#$14,SMODE
 1433                                 - ;
 1434                                 - 	moveq	#1,d0
 1435                                 - 	jsr	CD_jeri			;send data to Jerry
 1436                                 - ;
 1437                                 - 	lea	D_CTRL,a1
 1438                                 - 	move.l	#1,(a1)		;start DSP
 1439                                 - ;
 1440                                 - ;
 1441                                 - ;*******************test
 1442                                 - ;	lea	startT0,a0
 1443                                 - ;	move.l	#$4252c,(a0)+	;start time
 1444                                 - ;	move.l	#"11111111",(a0)+
 1445                                 - ;	move.l	#$800,(a0)+	;length
 1446                                 - ;	bra	testhas
 1447                                 - ;*******************endtest
 1448                                 - ;
 1449                                 - 	bra	WePass
 1450                                 - ;
 1451                                 - 	.endif
 1452                                   ;
 1453                                   ;
 1454                                   ;	lea	D_RAM,a1	;clear out DSP just for test
 1455                                   ;	move.l	#$12345678,d0
 1456                                   ;	move.w	#$800-1,d1
 1457                                   ;DSPclr:
 1458                                   ;	move.l	d0,(a1)+
 1459                                   ;	dbra	d1,DSPclr
 1460                                   ;
 1461                                   ;  Load up READRSA.DAS module into DSP
 1462                                   ;
 1463  00000930  2E3CFFFB0000           	move.l	#reladj,d7
 1464  00000936  207Cxxxxxxxx           	move.l	#RDRSA_S,a0
 1465  0000093C  91C7                   	sub.l	d7,a0
 1466  0000093E  227Cxxxxxxxx           	move.l	#RDRSA_E,a1
 1467  00000944  93C7                   	sub.l	d7,a1
 1468                                   ;
 1469  00000946  2208                   	move.l	a0,d1
 1470  00000948  2009                   	move.l	a1,d0
 1471  0000094A  9081                   	sub.l	d1,d0		; Size in bytes
 1472  0000094C  E480                   	asr.l	#2,d0
 1473  0000094E  227C00F1B000           	move.l	#D_RAM,a1
 1474                                   xferloop:
 1475  00000954  22D8                   	move.l	(a0)+,(a1)+


                                        src/cdboot1.s        Page 28      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1476  00000956  51C8FFFC                       dbra    d0,xferloop
 1477                                   ;
 1478                                   ;******test
 1479  0000095A  23FCxxxxxxxx00F1A110   	move.l	#SETUP,D_PC
 1480  00000964  23FC0000000100F1A114   	move.l	#1,D_CTRL	;start it up
 1481                                   ;******end test
 1482                                   ;
 1483  0000096E  6100xxxx               	bsr	clrRSAop	;clear RSA operands & install Public (CD) key
 1484                                   ;
 1485  00000972  23FC0000001400F1A154   	move.l	#$14,SMODE	;get Jerry ready to read data
 1486                                   ;
 1487  0000097C  7001                   	moveq	#1,d0
 1488  0000097E  4EB83012               	jsr	CD_jeri		;send data to Jerry
 1489                                   ;
 1490                                   	.if	erreport
 1491                                 - 	moveq	#-1,d0		;do this for testing
 1492                                 - 	lea	$f1c000,a0
 1493                                 - 	move.w	#$2ff,d1
 1494                                 - fillFF:
 1495                                 - 	move.l	d0,(a0)+
 1496                                 - 	dbra	d1,fillFF
 1497                                 - 	.endif
 1498                                   ;
 1499                                   ;test	move.l	#SETUP,D_PC
 1500                                   ;test	move.l	#1,D_CTRL	;start it up
 1501                                   ;
 1502                                   ;   --------------------------
 1503                                   ;  We need to get Hashblock records track (authentication code)
 1504                                   ;    This must always be the last track on the disk..
 1505                                   ;
 1506  00000982  41F82C08               	lea	CDtoc+8,a0	;find the last track
 1507                                   findhash:
 1508  00000986  4A98                   	tst.l	(a0)+
 1509  00000988  66FC                   	bne	findhash
 1510                                   ;
 1511  0000098A  90FC000C               	suba.w	#12,a0		;a0 -> hash track
 1512  0000098E  2010                   	move.l	(a0),d0		;get hashtable start time in d0
 1513                                   ;
 1514  00000990  5848                   	addq	#4,a0		;find out how many tracks since start of
 1515  00000992  72FF                   	moveq	#-1,d1		;session #1
 1516                                   ;
 1517                                   uptoc:
 1518  00000994  5241                   	addq	#1,d1		;patch ATARI APPROVED...
 1519  00000996  5188                   	subq.l	#8,a0
 1520  00000998  4A10                   	tst.b	(a0)
 1521  0000099A  66F8                   	bne	uptoc
 1522                                   ;
 1523  0000099C  06010020               	addi.b	#$20,d1		;add to " " to form ATARI APPROVED ...ATRI"x"
 1524  000009A0  43FAxxxx               	lea	ATstrng+$1f(pc),a1
 1525  000009A4  1281                   	move.b	d1,(a1)
 1526                                   ;
 1527  000009A6  6100xxxx               	bsr	backup6		;back up d0.l 6 frames
 1528                                   ;
 1529  000009AA  08C0001F               	bset.l	#31,d0
 1530  000009AE  23C0xxxxxxxx           	move.l	d0,Hsynctim	;save for repeat later
 1531                                   ;


                                        src/cdboot1.s        Page 29      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1532  000009B4  33FC0005xxxxxxxx       	move.w	#maxretry,retryz	;we will try n times before giving up
 1533                                   firshash:
 1534  000009BC  47F9xxxxxxxx           	lea	hashoffs,a3	;stuff desired offset(s)
 1535                                   
 1536  000009C2  7000                   	moveq	#0,d0
 1537  000009C4  26C0                   	move.l	d0,(a3)+	;tell DSP to get first 34 longs after "ATRI"
 1538                                   
 1539  000009C6  7011                   	moveq	#17,d0
 1540  000009C8  26C0                   	move.l	d0,(a3)+	; on the hash track
 1541                                   
 1542  000009CA  70FF                   	moveq	#-1,d0
 1543  000009CC  2680                   	move.l	d0,(a3)
 1544                                   ;
 1545                                   ;
 1546                                   ;  3-May-95  start up DSP before seek (it waits for ACK now)
 1547                                   ;
 1548  000009CE  47F9xxxxxxxx           	lea	SEMIPTR,a3	;DSP ram ptr
 1549  000009D4  7001                   	moveq	#1,d0
 1550  000009D6  2680                   	move.l	d0,(a3)		;start up the frag read
 1551                                   ;
 1552                                   ;  end 3-May-95 addition
 1553                                   ;
 1554  000009D8  2039xxxxxxxx           	move.l	Hsynctim,d0	;
 1555  000009DE  4EB8303C               	jsr	CD_read		;go seek & play some hash
 1556                                   ;
 1557                                   ;
 1558                                   ;	jsr	CD_ack		;wait for "found"
 1559                                   ;	cmpi.w	#$100,d1	;is our seek found?
 1560                                   ;	bne	.fnderr		;br if not found
 1561                                   ;
 1562                                   ;	tst.l	$DFFF10		;clear CD ERR, if any
 1563                                   ;
 1564                                   ;	lea	SEMIPTR,a3	;DSP ram ptr
 1565                                   ;	moveq	#1,d0
 1566                                   ;	move.l	d0,(a3)		;start up the frag read
 1567                                   ;
 1568                                   .check:
 1569  000009E2  2013                   	move.l	(a3),d0		;wait til DSP is finished
 1570  000009E4  6AFC                   	bpl.s	.check
 1571                                   ;
 1572                                   
 1573                                   ;	move.w	#$ff07,$f14000	;*************test code
 1574                                   ;
 1575  000009E6  4AB900DFFF04           	tst.l	BUTCH+DSCNTRL	;****22-May-95 clear DSA_rx if any
 1576                                   ;
 1577  000009EC  203900DFFF00           	move.l	BUTCH,d0	;check for CD ERR
 1578  000009F2  23C0xxxxxxxx           	move.l	d0,BUTCHcop	;save for diag
 1579  000009F8  0800000E               	btst.l	#14,d0		;did servo detect read error?
 1580  000009FC  67xx                   	beq.s	.noCDerr	;continue if no error
 1581                                   ;
 1582                                   .fnderr:
 1583  000009FE  5279xxxxxxxx           	addq.w	#1,retrycnt	;increment global counter (for diag only)
 1584  00000A04  4AB900DFFF10           	tst.l	$DFFF10		;clear CD ERR
 1585  00000A0A  5379xxxxxxxx           	subq.w	#1,retryz	;dec retry count and retry
 1586  00000A10  66AA                   	bne	firshash
 1587                                   ;


                                        src/cdboot1.s        Page 30      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1588  00000A12  7008                   	moveq	#8,d0		;retry failure on 1st read of hash track
 1589  00000A14  6000FACE               	bra	failCD
 1590                                   .noCDerr:
 1591                                   
 1592  00000A18  7000                   	moveq	#0,d0
 1593  00000A1A  4EB83012               	jsr	CD_jeri		;shut down jerry I2S irq's
 1594                                   ;
 1595  00000A1E  43F9xxxxxxxx           	lea	DSP2RAM,a1	;fetch the hash offsets table
 1596  00000A24  22FCxxxxxxxx           	move.l	#hashoffs,(a1)+	;set SRC
 1597  00000A2A  22FCxxxxxxxx           	move.l	#Hashoffs,(a1)+	;& DST
 1598  00000A30  22FC00000008           	move.l	#8,(a1)+	;count
 1599  00000A36  22BCFFFFFFFF           	move.l	#-1,(a1)	;semiphore
 1600                                   ;
 1601  00000A3C  7005                   	moveq	#5,d0
 1602  00000A3E  23C000F1A114           	move.l	d0,D_CTRL	;burp stuff from DSP's sRAM to dRAM where 
 1603                                   ;				 we can look at it
 1604                                   .semiw:
 1605  00000A44  4A91                   	tst.l	(a1)		;wait till stuff is burped in
 1606  00000A46  6BFC                   	bmi	.semiw		;br if not yet
 1607                                   ;
 1608                                   ;
 1609  00000A48  43F9xxxxxxxx           	lea	Hashoffs,a1	;check for "ATRI" not found
 1610  00000A4E  72FF                   	moveq	#-1,d1		;-1 at 1st offset indicates DSP time-out
 1611  00000A50  7001                   	moveq	#1,d0		;fail code #1
 1612  00000A52  B291                   	cmp.l	(a1),d1		;did we fail to find "ATRI"?
 1613                                   ;
 1614                                   	.if	fail2ill
 1615                                 - 
 1616                                 - 	bne	.nofail0		;
 1617                                 - 	illegal
 1618                                 - .nofail0:
 1619                                 - 	.else
 1620                                   
 1621                                   ;1-Aug-95	beq	failCD		;if so--fail 'em
 1622  00000A54  6700FC14               	beq	CDplus		;this is a CD+ disk
 1623                                   	.endif
 1624                                   ;
 1625  00000A58  72FE                   	moveq	#-2,d1		;3-May-95 check for seek error
 1626  00000A5A  B291                   	cmp.l	(a1),d1		;we now check in DSP
 1627  00000A5C  67A0                   	beq	.fnderr		;br if seek error
 1628                                   twofrags:
 1629                                   ;
 1630                                   ;  Copy 1st two hashtable frags as requested into dRAM..
 1631                                   ;
 1632  00000A5E  43F9xxxxxxxx           	lea	DSP2RAM,a1
 1633  00000A64  22FCxxxxxxxx           	move.l	#SEMIPTR+$3bc,(a1)+	;set SRC (rawHASH)
 1634  00000A6A  22FC00004000           	move.l	#$4000,(a1)+	;& DST
 1635  00000A70  22FC00000022           	move.l	#34,(a1)+	;count
 1636  00000A76  22BCFFFFFFFF           	move.l	#-1,(a1)
 1637                                   ;
 1638  00000A7C  7005                   	moveq	#5,d0
 1639  00000A7E  23C000F1A114           	move.l	d0,D_CTRL	;burp it in
 1640                                   ;
 1641                                   .semiw:
 1642  00000A84  4A91                   	tst.l	(a1)		;wait till stuff is burped in
 1643  00000A86  6BFC                   	bmi.s	.semiw		;br until we got it


                                        src/cdboot1.s        Page 31      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1644                                   ;
 1645                                   ;
 1646                                   ;  check for valid ATARI data header
 1647                                   ;
 1648  00000A88  7002                   	moveq	#2,d0		;assume "ATARI APPROVED.." error
 1649                                   ;
 1650  00000A8A  41F84000               	lea	$4000,a0
 1651  00000A8E  741F                   	moveq	#31,d2
 1652  00000A90  43FAxxxx               	lea	ATstrng(pc),a1
 1653                                   .mustb:
 1654  00000A94  1219                   	move.b	(a1)+,d1
 1655  00000A96  B218                   	cmp.b	(a0)+,d1
 1656                                   ;
 1657                                   	.if	fail2ill
 1658                                 - 	beq	.nofail1
 1659                                 - 	illegal
 1660                                 - .nofail1:
 1661                                 - 	.else
 1662  00000A98  6600FA4A               	bne	failCD
 1663                                   	.endif
 1664  00000A9C  51CAFFF6               	dbra	d2,.mustb
 1665                                   ;
 1666                                   ;  a0-> base addr of data immediately following Hash track header
 1667                                   ;
 1668  00000AA0  43F9xxxxxxxx           	lea	SEMIPTR,a1
 1669  00000AA6  2288                   	move.l	a0,(a1)		;tell GPU to deRSA 0th RSA block
 1670                                   ;
 1671                                   ;  now wait for GPU to finish
 1672                                   ;
 1673  00000AA8  7004                   	moveq	#4,d0		;assume deRSA error
 1674                                   .RSAwait:
 1675  00000AAA  2211                   	move.l	(a1),d1		;=$FFFFFFFF when done ($FFFEFFFF if error)
 1676  00000AAC  6AFC                   	bpl	.RSAwait
 1677                                   ;
 1678  00000AAE  08010010               	btst.l	#16,d1		;did we get the deRSA error?
 1679                                   ;
 1680                                   ;
 1681                                   	.if	fail2ill
 1682                                 - 	bne	.notf0		;br if not
 1683                                 - 	illegal
 1684                                 - .notf0:
 1685                                 - 	.else
 1686  00000AB2  6700FA30               	beq	failCD		;br if so
 1687                                   	.endif
 1688                                   ;
 1689                                   RSAd:
 1690  00000AB6  43F9xxxxxxxx           	lea	DSP2RAM,a1
 1691  00000ABC  22FCxxxxxxxx           	move.l	#SEMIPTR+$2f0,(a1)+	;set SRC (bootIIG)
 1692  00000AC2  22FCxxxxxxxx           	move.l	#daRSA,(a1)+	;& DST
 1693  00000AC8  22FC00000010           	move.l	#16,(a1)+	;count
 1694  00000ACE  22BCFFFFFFFF           	move.l	#-1,(a1)
 1695                                   ;
 1696  00000AD4  7005                   	moveq	#5,d0
 1697  00000AD6  23C000F1A114           	move.l	d0,D_CTRL	;burp it in
 1698                                   ;
 1699                                   .semiw:


                                        src/cdboot1.s        Page 32      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1700  00000ADC  4A91                   	tst.l	(a1)		;wait till stuff is burped in
 1701  00000ADE  6BFC                   	bmi	.semiw		;br if we got it
 1702                                   ;
 1703                                   ;
 1704  00000AE0  43F9xxxxxxxx           	lea	Hblkcnt,a1
 1705  00000AE6  45F9xxxxxxxx           	lea	daRSA,a2	;this is dRAM copied from "bootIIG"
 1706  00000AEC  22DA                   	move.l	(a2)+,(a1)+	;pick up # of hashblocks
 1707  00000AEE  504A                   	addq	#8,a2
 1708  00000AF0  7003                   	moveq	#3,d0		;we'll take 4 longs of TOC hash
 1709                                   .TOChg:
 1710  00000AF2  22DA                   	move.l	(a2)+,(a1)+
 1711  00000AF4  51C8FFFC               	dbra	d0,.TOChg
 1712                                   ;
 1713                                   ;  our 1st selection is always boot sector
 1714                                   ;
 1715  00000AF8  7006                   	moveq	#6,d0
 1716                                   .selclp:
 1717  00000AFA  22DA                   	move.l	(a2)+,(a1)+		;get start time,pattern,length, & hash
 1718  00000AFC  51C8FFFC               	dbra	d0,.selclp
 1719                                   ;
 1720                                   ;  Now, pick 2 more random Hash blocks
 1721                                   ;
 1722                                   	.if	seqblock
 1723                                 - ;
 1724                                 - ; test mode--we want all blocks with minimum delay
 1725                                 - ;
 1726                                 - 	lea	$90000,a0
 1727                                 - 	move.l	(a0)+,d0
 1728                                 - 	bne.s	fetchan			;br if we don't need to generate
 1729                                 - ;
 1730                                 - ;  we need to generate 1st time
 1731                                 - ;
 1732                                 - 	move.l	a0,-4(a0)		
 1733                                 - 	move.l	Hblkcnt,d1		;get total block count
 1734                                 - 	move.l	a0,a3
 1735                                 - 	moveq	#2,d2
 1736                                 - seqloop:
 1737                                 - 	move.w	d2,(a3)+		;fill with sequential 2..n
 1738                                 - 	addq.w	#1,d2
 1739                                 - 	cmp.w	d1,d2
 1740                                 - 	bcs	seqloop
 1741                                 - 	moveq	#-1,d3
 1742                                 - 	move.w	d3,(a3)+		;put in terminator
 1743                                 - ;
 1744                                 - 	move.l	a0,a3
 1745                                 - ;
 1746                                 - 	subq	#3,d2
 1747                                 - rexrand:
 1748                                 - 	bsr	randf
 1749                                 - 	swap	d0
 1750                                 - 	clr.w	d0
 1751                                 - 	swap	d0
 1752                                 - 	divu	d2,d0
 1753                                 - 	swap	d0
 1754                                 - 	add.w	d0,d0
 1755                                 - 	move.w	(a3,d0.w),d4


                                        src/cdboot1.s        Page 33      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1756                                 - 	move.w	(a3),(a3,d0.w)
 1757                                 - 	move.w	d4,(a3)+
 1758                                 - 	subq.w	#1,d2
 1759                                 - 	cmpi.w	#1,d2
 1760                                 - 	bne	rexrand
 1761                                 - 	move.l	a0,d0
 1762                                 - fetchan:
 1763                                 - 	move.l	a0,-(sp)
 1764                                 - 	lea	prevcmp(pc),a0
 1765                                 - 	tst.b	(a0)
 1766                                 - 	bne.s	.incomp		;br if not complete
 1767                                 - 	move.w	#$200,$DFFF0A	;stop the disk
 1768                                 - 	move.l	#0,BUTCH	;allow lid up
 1769                                 - .wethru:
 1770                                 - 	bra	.wethru
 1771                                 - .incomp:
 1772                                 - 	move.l	(sp)+,a0
 1773                                 - ;
 1774                                 - 	move.l	d0,a3
 1775                                 - 	move.w	(a3)+,d2
 1776                                 - 	bpl.s	fetch2
 1777                                 - 	bsr	complt		;indicate complete on screen
 1778                                 - 	move.l	a0,a3
 1779                                 - 	move.w	(a3)+,d2
 1780                                 - fetch2:
 1781                                 - 	move.w	(a3)+,d3
 1782                                 - 	bpl.s	fetch3
 1783                                 - 	bsr	complt		;indicate complete on screen
 1784                                 - 	move.l	a0,a3
 1785                                 - 	move.w	(a3)+,d3
 1786                                 - fetch3:
 1787                                 - 	move.l	a3,-(a0)
 1788                                 - 	bra.s	ovcomp
 1789                                 - ;
 1790                                 - complt:
 1791                                 - 	movem.l	d0-d1/a0,-(sp)
 1792                                 - 	lea	prevcmp(pc),a0
 1793                                 - 	clr.b	(a0)		;set complete flag
 1794                                 - 	move.w	cursx,d0
 1795                                 - 	move.w	cursy,d1
 1796                                 - 	move.w	#22,cursy
 1797                                 - 	move.w	#18,cursx
 1798                                 - 	lea	compmsg(pc),a0
 1799                                 - 	bsr	printd
 1800                                 - 	move.w	d0,cursx
 1801                                 - 	move.w	d1,cursy
 1802                                 - 	movem.l	(sp)+,d0-d1/a0
 1803                                 - 	rts
 1804                                 - prevcmp:
 1805                                 - 	dc.b	-1		;-1 if not complete
 1806                                 - compmsg:
 1807                                 - 	dc.b	"Complete",0
 1808                                 - 	.even
 1809                                 - ovcomp:
 1810                                 - ;
 1811                                 - ;


                                        src/cdboot1.s        Page 34      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1812                                 - ;
 1813                                 - ; end seqblock stuff
 1814                                 - ;
 1815                                 - 	.else
 1816                                   ;
 1817  00000B00  6100xxxx               	bsr	randf			;d0.l = next random
 1818  00000B04  2239xxxxxxxx           	move.l	Hblkcnt,d1		;get total # of Hash blocks
 1819  00000B0A  5581                   	subq.l	#2,d1			;we must exclude TOC hash & 0th block
 1820  00000B0C  62xx                   	bhi.s	gooBLK			;br if 1 or greater
 1821                                   failBLK:
 1822  00000B0E  7003                   	moveq	#3,d0			;error code if division by zero
 1823  00000B10  6000F9D2               	bra	failCD			; or negative will occur
 1824                                   gooBLK:
 1825  00000B14  E288                   	lsr.l	#1,d0			;this makes distribution better
 1826                                   ;
 1827  00000B16  02800000FFFF           	andi.l	#$ffff,d0
 1828  00000B1C  80C1                   	divu	d1,d0
 1829  00000B1E  4840                   	swap	d0			;get remainder
 1830  00000B20  5440                   	addq.w	#2,d0			;we picked #0,1 already
 1831  00000B22  3400                   	move.w	d0,d2			;d2 is first pick
 1832                                   ;
 1833  00000B24  5381                   	subq.l	#1,d1			;one less to pick from
 1834  00000B26  63E6                   	bls	failBLK
 1835                                   ;
 1836  00000B28  6100xxxx               	bsr	randf
 1837  00000B2C  E688                   	lsr.l	#3,d0			;this helps too
 1838                                   
 1839  00000B2E  02800000FFFF           	andi.l	#$ffff,d0
 1840  00000B34  80C1                   	divu	d1,d0
 1841  00000B36  4840                   	swap	d0
 1842  00000B38  3600                   	move.w	d0,d3
 1843  00000B3A  5443                   	addq.w	#2,d3
 1844  00000B3C  B642                   	cmp.w	d2,d3
 1845  00000B3E  65xx                   	bcs.s	notless
 1846  00000B40  5243                   	addq.w	#1,d3
 1847                                   notless:
 1848                                   	.endif
 1849                                   ;
 1850                                   ;   d2,d3 = 2 blocks, randomly selected
 1851                                   ;
 1852  00000B42  B642                   	cmp.w	d2,d3		;these must be in numeric order
 1853  00000B44  64xx                   	bcc.s	neednot
 1854  00000B46  C543                   	exg	d2,d3
 1855                                   neednot:
 1856  00000B48  3E02                   	move.w	d2,d7
 1857  00000B4A  4847                   	swap	d7
 1858  00000B4C  3E03                   	move.w	d3,d7	
 1859  00000B4E  23C7xxxxxxxx           	move.l	d7,blockpic	;save for use later
 1860                                   ;
 1861  00000B54  47F9xxxxxxxx           	lea	Blksgot,a3	;find plaintext block #'s we need
 1862  00000B5A  41F9xxxxxxxx           	lea	plainoff,a0	;plaintxt offset
 1863  00000B60  4BF9xxxxxxxx           	lea	Cryptgot,a5	;Cryptotext offsets for each
 1864  00000B66  4DF9xxxxxxxx           	lea	hashoffs,a6	; and expressed as long offsets too
 1865  00000B6C  224E                   	move.l	a6,a1
 1866                                   ;
 1867  00000B6E  78FF                   	moveq	#-1,d4		;set previous block # requested to impossible


                                        src/cdboot1.s        Page 35      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1868                                   loop2:
 1869  00000B70  701C                   	moveq	#28,d0		;find offset for 1st random hashblock
 1870  00000B72  C0C2                   	mulu	d2,d0		;d0 is offset into hashblock records table 
 1871  00000B74  20C0                   	move.l	d0,(a0)+	;we need for later
 1872  00000B76  721B                   	moveq	#27,d1
 1873  00000B78  D280                   	add.l	d0,d1		;d1 is offset of last byte of record
 1874  00000B7A  EC88                   	lsr.l	#6,d0		;/64--get record # for 1st byte
 1875  00000B7C  EC89                   	lsr.l	#6,d1		;/64--record # for last byte
 1876  00000B7E  B840                   	cmp.w	d0,d4		;are we same as previous?
 1877  00000B80  67xx                   	beq.s	notpre		;br if so--needn't request same
 1878                                   nothblk:
 1879  00000B82  36C0                   	move.w	d0,(a3)+	;else, we need this block #
 1880  00000B84  7A41                   	moveq	#65,d5
 1881  00000B86  CAC0                   	mulu	d0,d5		;find cryptotext offset
 1882  00000B88  2AC5                   	move.l	d5,(a5)+	;save
 1883  00000B8A  E48D                   	lsr.l	#2,d5
 1884  00000B8C  5085                   	addq.l	#8,d5		;
 1885  00000B8E  B3CE                   	cmp.l	a6,a1		;is this first offset request?
 1886  00000B90  67xx                   	beq.s	firreq		;br if so
 1887                                   ;
 1888  00000B92  7C11                   	moveq	#17,d6		;add 17 to previous
 1889  00000B94  DCAEFFFC               	add.l	-4(a6),d6
 1890  00000B98  BA86                   	cmp.l	d6,d5
 1891  00000B9A  64xx                   	bcc.s	firreq
 1892  00000B9C  2A06                   	move.l	d6,d5
 1893                                   firreq:
 1894  00000B9E  2CC5                   	move.l	d5,(a6)+
 1895                                   notpre:
 1896  00000BA0  B240                   	cmp.w	d0,d1		;check for block straddle
 1897  00000BA2  67xx                   	beq.s	notdoub		;br if no straddle
 1898  00000BA4  3001                   	move.w	d1,d0		;else, need another
 1899  00000BA6  60DA                   	bra	nothblk		;go for it
 1900                                   notdoub:
 1901  00000BA8  3800                   	move.w	d0,d4		;d0 is last block requested
 1902  00000BAA  B443                   	cmp.w	d3,d2		;are we done?
 1903  00000BAC  67xx                   	beq.s	hfragx		;exit if so
 1904  00000BAE  3403                   	move.w	d3,d2		;else, just do other now
 1905  00000BB0  60BE                   	bra	loop2
 1906                                   hfragx:
 1907  00000BB2  70FF                   	moveq	#-1,d0
 1908  00000BB4  2C80                   	move.l	d0,(a6)		;stuff terminator
 1909                                   ;
 1910  00000BB6  7001                   	moveq	#1,d0
 1911  00000BB8  4EB83012               	jsr	CD_jeri		;turn on jerry I2S irq's
 1912                                   ;
 1913  00000BBC  33FC0005xxxxxxxx       	move.w	#maxretry,retryz	;we will try n times before giving up
 1914                                   secnhash:
 1915                                   ;
 1916                                   ;  3-May-95
 1917                                   ;
 1918  00000BC4  47F9xxxxxxxx           	lea	SEMIPTR,a3
 1919  00000BCA  7001                   	moveq	#1,d0
 1920  00000BCC  2680                   	move.l	d0,(a3)		;start up
 1921                                   ;
 1922                                   ;  *** end 3-May-95 addition
 1923                                   ;


                                        src/cdboot1.s        Page 36      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1924                                   ;
 1925  00000BCE  2039xxxxxxxx           	move.l	Hsynctim,d0	;get original hash track seek time (w/bit31 set)
 1926  00000BD4  4EB8303C               	jsr	CD_read		;go play some hash
 1927                                   ;
 1928                                   ;	jsr	CD_ack		;but wait for "found"
 1929                                   ;	cmpi.w	#$100,d1	;is it found?
 1930                                   ;	bne	.fnderr		;br if not found
 1931                                   ;
 1932                                   ;	tst.l	$DFFF10		;clear CD ERR, if any
 1933                                   ;
 1934                                   ;	lea	SEMIPTR,a3
 1935                                   ;	moveq	#1,d0
 1936                                   ;	move.l	d0,(a3)		;start up
 1937                                   ;
 1938                                   .check:
 1939  00000BD8  2013                   	move.l	(a3),d0
 1940  00000BDA  6AFC                   	bpl.s	.check
 1941                                   ;
 1942  00000BDC  4AB900DFFF04           	tst.l	BUTCH+DSCNTRL	;22-May-95 clear DSA_rx if it needs it
 1943                                   ;	
 1944  00000BE2  203900DFFF00           	move.l	BUTCH,d0	;check for CD ERR
 1945  00000BE8  23C0xxxxxxxx           	move.l	d0,BUTCHcop	;save for diag
 1946  00000BEE  0800000E               	btst.l	#14,d0		;did servo detect read error?
 1947  00000BF2  67xx                   	beq.s	.noCDerr	;continue if no error
 1948                                   ;
 1949                                   .fnderr:
 1950  00000BF4  5279xxxxxxxx           	addq.w	#1,retrycnt	;increment global counter (for diag only)
 1951  00000BFA  4AB900DFFF10           	tst.l	$DFFF10		;clear CD ERR
 1952  00000C00  5379xxxxxxxx           	subq.w	#1,retryz	;dec retry count and retry
 1953  00000C06  66BC                   	bne	secnhash
 1954                                   ;
 1955  00000C08  7009                   	moveq	#9,d0		;retry failure on 2nd read of hash track
 1956  00000C0A  6000F8D8               	bra	failCD
 1957                                   .noCDerr:
 1958                                   ;
 1959                                   ;
 1960  00000C0E  7000                   	moveq	#0,d0
 1961  00000C10  4EB83012               	jsr	CD_jeri		;turn off jerry I2S irq's
 1962                                   ;
 1963  00000C14  43F9xxxxxxxx           	lea	DSP2RAM,a1
 1964  00000C1A  22FCxxxxxxxx           	move.l	#hashoffs,(a1)+	;set SRC (hashoffs)
 1965  00000C20  22FCxxxxxxxx           	move.l	#Hashoffs,(a1)+	;& DST
 1966  00000C26  22FC00000008           	move.l	#8,(a1)+	;count
 1967  00000C2C  22BCFFFFFFFF           	move.l	#-1,(a1)	;semiphore
 1968                                   ;
 1969  00000C32  7005                   	moveq	#5,d0
 1970  00000C34  23C000F1A114           	move.l	d0,D_CTRL	;burp in actual hashoffs used
 1971                                   ;
 1972                                   .semiw:
 1973  00000C3A  4A91                   	tst.l	(a1)		;wait till stuff is burped in
 1974  00000C3C  6BFC                   	bmi	.semiw		;br til we got it
 1975                                   ;
 1976                                   ;
 1977  00000C3E  7001                   	moveq	#1,d0		;assume error code
 1978  00000C40  43F9xxxxxxxx           	lea	Hashoffs,a1	;check for "ATRI" not found
 1979  00000C46  72FF                   	moveq	#-1,d1		;-1 is DSP's time-out indication


                                        src/cdboot1.s        Page 37      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 1980  00000C48  B291                   	cmp.l	(a1),d1		;did we fail to find "ATRI"?
 1981                                   ;
 1982                                   	.if	fail2ill
 1983                                 - 	bne	.notfffx
 1984                                 - 	illegal
 1985                                 - .notfffx:
 1986                                 - 	.else
 1987  00000C4A  6700F898               	beq	failCD		;if so--fail 'em
 1988                                   	.endif
 1989                                   ;
 1990  00000C4E  72FE                   	moveq	#-2,d1
 1991  00000C50  B291                   	cmp.l	(a1),d1
 1992  00000C52  67A0                   	beq	.fnderr
 1993                                   ;
 1994                                   ;
 1995                                   ;  Copy hashtable frags into dRAM..
 1996                                   ;
 1997                                   RSAx:
 1998  00000C54  43F9xxxxxxxx           	lea	DSP2RAM,a1
 1999  00000C5A  22FCxxxxxxxx           	move.l	#SEMIPTR+$3bc,(a1)+	;set SRC (rawHASH)
 2000  00000C60  22FC00004020           	move.l	#$4020,(a1)+	;& DST
 2001  00000C66  22FC00000044           	move.l	#17*4,(a1)+	;long count (maximum posssible)
 2002  00000C6C  22BCFFFFFFFF           	move.l	#-1,(a1)	;semiphore for job completion
 2003                                   ;
 2004  00000C72  7005                   	moveq	#5,d0
 2005  00000C74  23C000F1A114           	move.l	d0,D_CTRL	;burp it in
 2006                                   ;
 2007                                   .semiw:
 2008  00000C7A  4A91                   	tst.l	(a1)		;wait till stuff is burped in
 2009  00000C7C  6BFC                   	bmi	.semiw		;br if we got it
 2010                                   ;
 2011                                   ;  Now we need to deRSA up to 4 RSA blocks
 2012                                   ;
 2013  00000C7E  43F9xxxxxxxx           	lea	SEMIPTR,a1	;DSP semiphore
 2014  00000C84  45F9xxxxxxxx           	lea	Cryptgot,a2	;crypto blocks offsets (in bytes)
 2015  00000C8A  47F9xxxxxxxx           	lea	Hashoffs,a3	;offsets requested (in longs)
 2016  00000C90  49F84020               	lea	$4020,a4	;crypto data as retrieved
 2017  00000C94  4BF9xxxxxxxx           	lea	plaintxt,a5	;place to deposit plain text blocks
 2018                                   ;
 2019  00000C9A  201B                   	move.l	(a3)+,d0	;get long where we picked up first block
 2020                                   ;
 2021                                   deRloop:
 2022  00000C9C  5180                   	subq.l	#8,d0		;adjust for 8 longs of header
 2023  00000C9E  E588                   	lsl.l	#2,d0		;x4 for bytes
 2024  00000CA0  221A                   	move.l	(a2)+,d1	;get RSA offset
 2025  00000CA2  9280                   	sub.l	d0,d1		;get 0..3
 2026  00000CA4  4DF41800               	lea	(a4,d1.l),a6
 2027                                   .contin:
 2028  00000CA8  228E                   	move.l	a6,(a1)		;deRSA this block
 2029                                   ;
 2030                                   ;  now wait for DSP to finish
 2031                                   ;
 2032                                   .RSAwait:
 2033  00000CAA  2A11                   	move.l	(a1),d5
 2034  00000CAC  6AFC                   	bpl	.RSAwait
 2035                                   ;


                                        src/cdboot1.s        Page 38      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2036  00000CAE  7004                   	moveq	#4,d0		;assume deRSA error
 2037  00000CB0  08050010               	btst.l	#16,d5
 2038                                   
 2039                                   	.if	fail2ill
 2040                                 - 	bne	.notff0
 2041                                 - 	illegal
 2042                                 - .notff0:
 2043                                 - 	.else
 2044  00000CB4  6700F82E               	beq	failCD		;br if error
 2045                                   	.endif
 2046                                   ;
 2047  00000CB8  41F9xxxxxxxx           	lea	DSP2RAM,a0	;no error--just get plaintext into dRAM
 2048  00000CBE  20FCxxxxxxxx           	move.l	#SEMIPTR+$2f0,(a0)+	;set SRC (bootIIG)
 2049  00000CC4  20CD                   	move.l	a5,(a0)+	;& DST (plain text buffer)
 2050  00000CC6  20FC00000010           	move.l	#16,(a0)+	;count
 2051  00000CCC  20BCFFFFFFFF           	move.l	#-1,(a0)	;semiphore for completion
 2052                                   ;
 2053  00000CD2  7005                   	moveq	#5,d0
 2054  00000CD4  23C000F1A114           	move.l	d0,D_CTRL	;burp it in
 2055                                   ;
 2056                                   .semiw:
 2057  00000CDA  4A90                   	tst.l	(a0)		;wait till stuff is burped in
 2058  00000CDC  6BFC                   	bmi	.semiw		;br til we got it
 2059                                   ;
 2060                                   ;
 2061                                   ;  check for continuation
 2062                                   ;
 2063  00000CDE  D9FC00000044           	adda.l	#17*4,a4	;advance to next crypto-blob to read in
 2064  00000CE4  DBFC00000040           	adda.l	#16*4,a5	;advance to next plaintxt block
 2065  00000CEA  201B                   	move.l	(a3)+,d0
 2066  00000CEC  6AAE                   	bpl	deRloop
 2067                                   ;
 2068                                   ;  Now copy plain text to our hash entries
 2069                                   ;
 2070  00000CEE  45F9xxxxxxxx           	lea	plainoff,a2
 2071  00000CF4  49F9xxxxxxxx           	lea	startT1,a4
 2072  00000CFA  7C01                   	moveq	#1,d6
 2073                                   plan2h:
 2074  00000CFC  201A                   	move.l	(a2)+,d0
 2075  00000CFE  2200                   	move.l	d0,d1
 2076  00000D00  0241003F               	andi.w	#%111111,d1	;just interested in block offset
 2077  00000D04  EC88                   	lsr.l	#6,d0		;get block #
 2078                                   ;
 2079  00000D06  43F9xxxxxxxx           	lea	plaintxt,a1	;find block we're looking for
 2080  00000D0C  47F9xxxxxxxx           	lea	Blksgot,a3
 2081                                   plloop:
 2082  00000D12  B05B                   	cmp.w	(a3)+,d0
 2083  00000D14  67xx                   	beq.s	gotpll		;found it
 2084  00000D16  D2FC0040               	adda.w	#$40,a1
 2085  00000D1A  60F6                   	bra	plloop		
 2086                                   gotpll:
 2087  00000D1C  4BF11000               	lea	(a1,d1.w),a5
 2088  00000D20  7A06                   	moveq	#6,d5
 2089                                   fetchone:
 2090  00000D22  28DD                   	move.l	(a5)+,(a4)+
 2091  00000D24  51CDFFFC               	dbra	d5,fetchone	


                                        src/cdboot1.s        Page 39      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2092  00000D28  51CEFFD2               	dbra	d6,plan2h
 2093                                   ;
 2094                                   ;
 2095                                   ;  we now have the three hashblocks that need verification
 2096                                   ;
 2097  00000D2C  47F9xxxxxxxx           	lea	SEMIPTR,a3
 2098  00000D32  26BC00000000           	move.l	#0,(a3)		;shut down DSP program so we can load another
 2099                                   ;
 2100  00000D38  47F900F1A114           	lea	D_CTRL,a3
 2101                                   shutrsa:
 2102  00000D3E  2013                   	move.l	(a3),d0		;wait til it happens
 2103  00000D40  E248                   	lsr.w	#1,d0
 2104  00000D42  65FA                   	bcs	shutrsa
 2105                                   ;
 2106                                   ;
 2107                                   ;   Now, load MD5 stuff into DSP
 2108                                   ;
 2109                                   gotpats:
 2110  00000D44  43F900F1B000           	lea	D_RAM,a1
 2111                                   ;
 2112  00000D4A  207Cxxxxxxxx           	move.l	#MD5_S,a0
 2113  00000D50  247Cxxxxxxxx           	move.l	#MD5_E,a2
 2114                                   ;
 2115  00000D56  2E3CFFFB0000           	move.l	#reladj,d7
 2116  00000D5C  91C7                   	sub.l	d7,a0
 2117  00000D5E  95C7                   	sub.l	d7,a2
 2118  00000D60  23FCxxxxxxxx00F1A110   	move.l	#MD5start,D_PC
 2119                                   loadmd5:
 2120  00000D6A  22D8                   	move.l	(a0)+,(a1)+
 2121  00000D6C  B1CA                   	cmp.l	a2,a0
 2122  00000D6E  65FA                   	bcs	loadmd5
 2123                                   ;
 2124  00000D70  23FCxxxxxxxxxxxxxxxx   	move.l	#Hashoffs,sramo+4	;set DST in burp routine
 2125                                   ;
 2126  00000D7A  23FC0000001400F1A154   	move.l	#$14,SMODE
 2127                                   ;
 2128                                   ;	moveq	#1,d0
 2129                                   ;	jsr	CD_jeri			;send data to Jerry
 2130                                   ;
 2131  00000D84  43F900F1A114           	lea	D_CTRL,a1
 2132  00000D8A  22BC00000001           	move.l	#1,(a1)		;start DSP
 2133                                   ;
 2134                                   ;
 2135                                   ; But first, let's deMD5 the CDtoc
 2136                                   ;
 2137  00000D90  43F900F1B800           	lea	$f1b800,a1	;we need to stuff the TOC inside
 2138  00000D96  2209                   	move.l	a1,d1
 2139  00000D98  45F82C00               	lea	CDtoc,a2	; jerry before this can be done
 2140  00000D9C  303C00FF               	move.w	#255,d0
 2141                                   injerrlp:
 2142  00000DA0  22DA                   	move.l	(a2)+,(a1)+
 2143  00000DA2  51C8FFFC               	dbra	d0,injerrlp
 2144                                   ;
 2145  00000DA6  43F9xxxxxxxx           	lea	MD5head,a1
 2146  00000DAC  22C1                   	move.l	d1,(a1)+
 2147  00000DAE  068100000400           	addi.l	#$400,d1


                                        src/cdboot1.s        Page 40      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2148  00000DB4  2281                   	move.l	d1,(a1)
 2149  00000DB6  5149                   	subq	#8,a1
 2150  00000DB8  7001                   	moveq	#1,d0		;this just does Sram based blocks
 2151  00000DBA  2280                   	move.l	d0,(a1)		;start
 2152                                   ;
 2153                                   .waiTOC:
 2154  00000DBC  4A91                   	tst.l	(a1)		;wait til done
 2155  00000DBE  6AFC                   	bpl	.waiTOC
 2156                                   ;
 2157  00000DC0  41F9xxxxxxxx           	lea	sramo+12,a0
 2158  00000DC6  20BCFFFFFFFF           	move.l	#-1,(a0)
 2159                                   ;
 2160  00000DCC  7005                   	moveq	#5,d0
 2161  00000DCE  23C000F1A114           	move.l	d0,D_CTRL	;burp DSP to deliver MD5result data to Hashoffs
 2162                                   ;
 2163                                   .semiw:
 2164  00000DD4  4A90                   	tst.l	(a0)		;wait till stuff is burped in
 2165  00000DD6  6BFC                   	bmi	.semiw		;br til we got it
 2166                                   ;
 2167                                   ;
 2168  00000DD8  41F9xxxxxxxx           	lea	TOChash,a0
 2169                                   ;
 2170                                   ;	lea	MD5result,a1
 2171  00000DDE  43F9xxxxxxxx           	lea	Hashoffs,a1
 2172                                   ;
 2173  00000DE4  7005                   	moveq	#5,d0		;error code for bad TOC hash
 2174  00000DE6  7403                   	moveq	#3,d2
 2175                                   chkTOCh:
 2176  00000DE8  2218                   	move.l	(a0)+,d1
 2177  00000DEA  B299                   	cmp.l	(a1)+,d1
 2178                                   
 2179                                   	.if	fail2ill
 2180                                 - 	beq	chkTOCg
 2181                                 - 	illegal
 2182                                 - chkTOCg:
 2183                                 - 	.else
 2184  00000DEC  6600F6F6               	bne	failCD		;fail if CDtoc hash doesn't match
 2185                                   	.endif
 2186                                   
 2187  00000DF0  51CAFFF6               	dbra	d2,chkTOCh
 2188                                   ;
 2189                                   ;
 2190                                   ;   Now for the hard part..
 2191                                   ;      let's MD5 the CD block containing the boot segment, then 2 random ones
 2192                                   ;
 2193                                   ;testhas:
 2194  00000DF4  41F9xxxxxxxx           	lea	startT0,a0
 2195  00000DFA  7C02                   	moveq	#2,d6		;3 MD5's to do, including 0th
 2196                                   threhash:
 2197  00000DFC  2018                   	move.l	(a0)+,d0	;start time
 2198  00000DFE  2218                   	move.l	(a0)+,d1	;start pattern
 2199  00000E00  2418                   	move.l	(a0)+,d2	;block count
 2200  00000E02  43F9xxxxxxxx           	lea	MD5semi,a1
 2201                                   ;
 2202  00000E08  23410004               	move.l	d1,4(a1)
 2203  00000E0C  23420008               	move.l	d2,8(a1)	


                                        src/cdboot1.s        Page 41      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2204                                   ;
 2205                                   ;	subq	#4,a1
 2206                                   ;
 2207  00000E10  6100xxxx               	bsr	backup6		;back up d0.l 6 frames
 2208                                   
 2209  00000E14  2F00                   	move.l	d0,-(sp)
 2210  00000E16  7001                   	moveq	#1,d0
 2211  00000E18  4EB83012               	jsr	CD_jeri		;send data to Jerry
 2212  00000E1C  201F                   	move.l	(sp)+,d0
 2213                                   ;
 2214  00000E1E  08C0001F               	bset.l	#31,d0
 2215  00000E22  23C0xxxxxxxx           	move.l	d0,Hsynctim	;save for retry use
 2216  00000E28  33FC0005xxxxxxxx       	move.w	#maxretry,retryz	;n attempts for retry
 2217                                   rehasht:
 2218                                   ;
 2219                                   ;
 2220                                   ;  *** 3-May-95  (wait for "FOUND" in DSP) 
 2221  00000E30  7200                   	moveq	#0,d1
 2222  00000E32  2281                   	move.l	d1,(a1)		;start up Jerry
 2223                                   ;  *** end 3-May-95 addition
 2224                                   ;
 2225  00000E34  2039xxxxxxxx           	move.l	Hsynctim,d0
 2226  00000E3A  4EB8303C               	jsr	CD_read		;just do read
 2227                                   ;
 2228                                   ;	jsr	CD_ack		;wait for found
 2229                                   ;	cmpi.w	#$100,d1	;is it found?
 2230                                   ;	bne	.fnderr		;br if not found
 2231                                   ;
 2232                                   ;------
 2233                                   ;	tst.l	$DFFF10		;clear CD ERR, if any
 2234                                   ;-------
 2235                                   ;
 2236                                   ;	moveq	#0,d1
 2237                                   ;	move.l	d1,(a1)		;start up Jerry
 2238                                   ;
 2239                                   ;
 2240                                   .wao:
 2241  00000E3E  2211                   	move.l	(a1),d1		;wait for completion
 2242  00000E40  6AFC                   	bpl	.wao
 2243                                   ;
 2244  00000E42  4AB900DFFF04           	tst.l	BUTCH+DSCNTRL	;22-May-95 clear DSA_rx if it needs it
 2245                                   
 2246  00000E48  203900DFFF00           	move.l	BUTCH,d0	;check for CD ERR
 2247  00000E4E  23C0xxxxxxxx           	move.l	d0,BUTCHcop	;save for diag
 2248  00000E54  0800000E               	btst.l	#14,d0		;did servo detect read error?
 2249  00000E58  67xx                   	beq.s	.noCDerr	;continue if no error
 2250                                   ;
 2251                                   .fnderr:
 2252  00000E5A  5279xxxxxxxx           	addq.w	#1,retrycnt	;increment global counter (for diag only)
 2253  00000E60  4AB900DFFF10           	tst.l	$DFFF10		;clear CD ERR
 2254  00000E66  5379xxxxxxxx           	subq.w	#1,retryz	;dec retry count and retry
 2255  00000E6C  66C2                   	bne	rehasht
 2256                                   ;
 2257  00000E6E  700A                   	moveq	#10,d0		;retry failure on 2nd read of hash track
 2258  00000E70  D046                   	add.w	d6,d0		;10 for 3rd, 11 for 2nd & 12 for 1st block
 2259  00000E72  6000F670               	bra	failCD


                                        src/cdboot1.s        Page 42      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2260                                   .noCDerr:
 2261  00000E76  08010011               	btst.l	#17,d1		;seek error?
 2262  00000E7A  67DE                   	beq	.fnderr		;br if so
 2263                                   ;
 2264  00000E7C  7007                   	moveq	#7,d0		;assume start pattern time-out error (code 7)
 2265                                   ;
 2266  00000E7E  08010010               	btst.l	#16,d1		;did we time-out looking for start pattern?
 2267                                   
 2268                                   	.if	fail2ill
 2269                                 - 	bne.s	.hashpb	
 2270                                 - 	illegal
 2271                                 - .hashpb:
 2272                                 - 	.else
 2273  00000E82  6700F660               	beq	failCD
 2274                                   	.endif
 2275                                   ;
 2276  00000E86  7000                   	moveq	#0,d0
 2277  00000E88  4EB83012               	jsr	CD_jeri		;stop data to Jerry
 2278                                   ;
 2279  00000E8C  43F9xxxxxxxx           	lea	sramo+12,a1
 2280  00000E92  22BCFFFFFFFF           	move.l	#-1,(a1)
 2281                                   ;
 2282  00000E98  7005                   	moveq	#5,d0
 2283  00000E9A  23C000F1A114           	move.l	d0,D_CTRL	;burp DSP to deliver MD5result data to Hashoffs
 2284                                   ;
 2285                                   .semiw:
 2286  00000EA0  4A91                   	tst.l	(a1)		;wait till stuff is burped in
 2287  00000EA2  6BFC                   	bmi	.semiw		;br til we got it
 2288                                   ;
 2289                                   ;
 2290  00000EA4  3006                   	move.w	d6,d0		;put 0, 1, or 2
 2291  00000EA6  4840                   	swap	d0		;in high word to tell which hash
 2292  00000EA8  303C0006               	move.w	#6,d0		;set error code in case bad hash
 2293                                   ;	lea	MD5result,a1
 2294  00000EAC  43F9xxxxxxxx           	lea	Hashoffs,a1
 2295  00000EB2  7403                   	moveq	#3,d2
 2296                                   chkCDh:
 2297  00000EB4  2219                   	move.l	(a1)+,d1
 2298  00000EB6  B298                   	cmp.l	(a0)+,d1
 2299                                   ;
 2300  00000EB8  67xx                   	beq.s	gooCD
 2301                                   
 2302                                   	.if	fail2ill
 2303                                 - 	illegal
 2304                                 - 	.else
 2305                                   
 2306                                   	.if	!erreport
 2307  00000EBA  6000F628               	bra	failCD		;fail if hash doesn't match
 2308                                   	.endif
 2309                                   	.endif
 2310                                   ;
 2311                                   ;
 2312                                   ;
 2313  00000EBE  E58A                   	lsl.l	#2,d2		;advance over bad hash
 2314  00000EC0  D1C2                   	adda.l	d2,a0
 2315                                   


                                        src/cdboot1.s        Page 43      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2316                                   ;
 2317                                   ;  Error report stuff
 2318                                   ;	
 2319  00000EC2  2439xxxxxxxx           	move.l	blockpic,d2
 2320  00000EC8  0C460001               	cmpi.w	#1,d6
 2321  00000ECC  65xx                   	bcs.s	.later
 2322  00000ECE  66xx                   	bne.s	.booty
 2323  00000ED0  4842                   	swap	d2
 2324  00000ED2  60xx                   	bra.s	.later
 2325                                   .booty:
 2326  00000ED4  7401                   	moveq	#1,d2
 2327                                   .later:
 2328  00000ED6  E74A                   	lsl.w	#3,d2
 2329  00000ED8  2279xxxxxxxx           	move.l	errBASE,a1
 2330  00000EDE  D2FC0020               	adda.w	#$20,a1
 2331  00000EE2  52B12004               	addq.l	#1,4(a1,d2.w)		;advance error count
 2332  00000EE6  53B12000               	subq.l	#1,(a1,d2.w)		;decrement pass (it gets inc'd later)
 2333  00000EEA  E34A                   	lsl.w	#1,d2
 2334                                   
 2335  00000EEC  2279xxxxxxxx           	move.l	errBASE,a1
 2336                                   ;	adda.w	#$4000,a1
 2337  00000EF2  D3FC00008000           	adda.l	#$8000,a1
 2338                                   
 2339  00000EF8  D2C2                   	adda.w	d2,a1
 2340  00000EFA  45F9xxxxxxxx           	lea	Hashoffs,a2
 2341  00000F00  7403                   	moveq	#3,d2
 2342                                   .badh:
 2343  00000F02  22DA                   	move.l	(a2)+,(a1)+		;copy bad hash
 2344  00000F04  51CAFFFC               	dbra	d2,.badh
 2345  00000F08  2279xxxxxxxx           	move.l	errBASE,a1
 2346  00000F0E  D2FC0018               	adda.w	#6*4,a1
 2347  00000F12  5291                   	addq.l	#1,(a1)		;advance error #6 counter
 2348  00000F14  7400                   	moveq	#0,d2
 2349                                   ;
 2350                                   ;
 2351                                   gooCD:
 2352  00000F16  51CAFF9C               	dbra	d2,chkCDh
 2353                                   ;
 2354  00000F1A  51CEFEE0               	dbra	d6,threhash
 2355                                   ;
 2356                                   ;
 2357                                   ;
 2358                                   ;  We pass!
 2359                                   ;
 2360                                   ;
 2361                                   	.if	erreport
 2362                                 - ;
 2363                                 - 	moveq	#0,d0
 2364                                 - 	jsr	CD_jeri		;shut down jerry I2S irq's
 2365                                 - ;
 2366                                 - 	move.l	errBASE,a0
 2367                                 - 	addq.l	#3,(a0)		;advance total count
 2368                                 - ;
 2369                                 - 	move.l	blockpic,d1
 2370                                 - 	addq.l	#1,$28(a0)	;advance fixed block #1
 2371                                 - ;


                                        src/cdboot1.s        Page 44      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2372                                 - 	lsl.w	#3,d1
 2373                                 - 	addq.l	#1,$20(a0,d1.w)	;advance pass count 1st rand block
 2374                                 - 	swap	d1
 2375                                 - 	lsl.w	#3,d1
 2376                                 - 	addq.l	#1,$20(a0,d1.w)	;advance pass count 2nd rand block
 2377                                 - ;
 2378                                 - 	moveq	#-1,d0
 2379                                 - Dlay:
 2380                                 - 	dbra	d0,Dlay
 2381                                 - ;
 2382                                 - 	moveq	#3,d0
 2383                                 - 	move.l	d0,MD5semi	;turn off DSP	
 2384                                 - ;
 2385                                 - ;	move.l	D_FLAGS,d0	;force DSP reg set back to bank 0
 2386                                 - ;	bclr.l	#14,d0
 2387                                 - ;	move.l	d0,D_FLAGS
 2388                                 - ;
 2389                                 - 	move.l	errBASE,a1
 2390                                 - 	adda.l	#$10000,a1
 2391                                 - 	move.l	(a1),a0
 2392                                 - 	move.l	a1,d0
 2393                                 - 	addi.l	#$10000,d0
 2394                                 - 	cmp.l	d0,a0
 2395                                 - 	bcc.s	attop
 2396                                 - 	move.l	blockpic,(a0)+
 2397                                 - attop:
 2398                                 - 	move.l	a0,(a1)
 2399                                 - ;
 2400                                 - 	bsr	outdata
 2401                                 - ;
 2402                                 - 	bra	JER_wait
 2403                                 - ;
 2404                                 - 	.endif
 2405                                   ;
 2406  00000F1E  7001                   	moveq	#1,d0
 2407  00000F20  4EB83012               	jsr	CD_jeri		;send data to Jerry
 2408                                   ;
 2409                                   ;
 2410                                   ;
 2411                                   WePass:
 2412  00000F24  33FC000200198CAC       	move.w	#2,freerun	;stop the GPU
 2413                                   ;
 2414  00000F2C  3039001AE4D2           	move.w	frames,d0
 2415                                   fxwait:
 2416  00000F32  3239001AE4D2           	move.w	frames,d1
 2417  00000F38  9240                   	sub.w	d0,d1
 2418  00000F3A  0C410002               	cmpi.w	#2,d1
 2419  00000F3E  65F2                   	bcs	fxwait
 2420                                   ;
 2421                                   ;16-May-95 test
 2422                                   ;
 2423  00000F40  41FAxxxx               	lea	vidstop(pc),a0
 2424  00000F44  21C80100               	move.l	a0,$100
 2425  00000F48  60xx                   	bra.s	ovvids
 2426                                   ;
 2427                                   vidstop:


                                        src/cdboot1.s        Page 45      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2428  00000F4A  21FC00194C900100       	move.l	#Frame,$100
 2429  00000F52  23FC00000004001AE824   	move.l	#4,$1ae824	;stop obj here
 2430  00000F5C  33FC010000F000E0       	move.w	#$100,INT1
 2431  00000F64  33FC000000F000E2       	move.w	#$0,INT2
 2432  00000F6C  4E73                   	rte
 2433                                   ;
 2434                                   ovvids:
 2435                                   ; *******end 16-May-95 test
 2436                                   ;
 2437                                   ;**	move.w	#$100,INT1	;turn off display this way
 2438                                   ;
 2439  00000F6E  41F82C08               	lea	CDtoc+8,a0	;now find start time of boot track
 2440                                   waitfor1:
 2441  00000F72  2018                   	move.l	(a0)+,d0
 2442  00000F74  2218                   	move.l	(a0)+,d1
 2443  00000F76  E199                   	rol.l	#8,d1
 2444  00000F78  0C010001               	cmpi.b	#1,d1		;1st session #1 track?
 2445  00000F7C  66F4                   	bne	waitfor1
 2446                                   seekit:
 2447  00000F7E  6100xxxx               	bsr	backup6		;back up d0.l 6 frames
 2448                                   ;
 2449                                   ;
 2450                                   ;
 2451                                   ;  We pass!
 2452                                   ;
 2453                                   ;lastlow	equ	$3e80
 2454                                   ;
 2455           =00003A00               lastlow	equ	$3a00
 2456                                   ;
 2457           =00003FC0               hsynctm	equ	$3fc0		;we need this for lastlow temp ram
 2458           =00003FC4               Retryz	equ	$3fc4
 2459                                   ;
 2460                                   ;
 2461  00000F82  41F83A00               	lea	lastlow,a0
 2462  00000F86  43FAxxxx               	lea	CDnext(pc),a1
 2463  00000F8A  223Cxxxxxxxx           	move.l	#(CDnexte-CDnext)/4,d1
 2464                                   cdloop:
 2465  00000F90  20D9                   	move.l	(a1)+,(a0)+
 2466  00000F92  51C9FFFC               	dbra	d1,cdloop
 2467                                   ;
 2468  00000F96  4EF83A00               	jmp	lastlow
 2469                                   ;
 2470                                   ;
 2471                                   ;  bring display to a reasonable state
 2472                                   ;
 2473                                   CDnext:
 2474  00000F9A  08C0001F               	bset.l	#31,d0
 2475                                   ;
 2476  00000F9E  21C03FC0               	move.l	d0,hsynctm	;save for retry use
 2477  00000FA2  31FC00053FC4           	move.w	#maxretry,Retryz	;n attempts for retry
 2478                                   Btretry:
 2479  00000FA8  20383FC0               	move.l	hsynctm,d0
 2480  00000FAC  4EB8303C               	jsr	CD_read		;just do read
 2481                                   ;
 2482  00000FB0  4EB8300C               	jsr	CD_ack		;wait for found
 2483  00000FB4  0C410100               	cmpi.w	#$100,d1	;is it found?


                                        src/cdboot1.s        Page 46      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2484  00000FB8  6600xxxx               	bne	booerr		;br if not found
 2485                                   ;
 2486  00000FBC  4AB900DFFF10           	tst.l	$DFFF10		;clear CD ERR, if any
 2487                                   
 2488  00000FC2  43F9xxxxxxxx           	lea	MD5semi,a1
 2489  00000FC8  7202                   	moveq	#2,d1		;start up a boot thing
 2490                                   
 2491  00000FCA  2281                   	move.l	d1,(a1)		;start up Jerry
 2492                                   ;
 2493                                   ;
 2494                                   bootwait:
 2495  00000FCC  2011                   	move.l	(a1),d0
 2496  00000FCE  6AFC                   	bpl	bootwait	
 2497                                   ;
 2498  00000FD0  203900DFFF00           	move.l	BUTCH,d0	;check for CD ERR
 2499                                   ;17-Apr	move.l	d0,BUTCHcop	;save for diag
 2500  00000FD6  0800000E               	btst.l	#14,d0		;did servo detect read error?
 2501  00000FDA  67xx                   	beq.s	nobooerr	;continue if no error
 2502                                   ;
 2503                                   booerr:
 2504                                   ;17-Apr	addq.w	#1,retrycnt	;increment global counter (for diag only)
 2505  00000FDC  4AB900DFFF10           	tst.l	$DFFF10		;clear CD ERR
 2506  00000FE2  53783FC4               	subq.w	#1,Retryz	;dec retry count and retry
 2507  00000FE6  66C0                   	bne	Btretry		;go for another
 2508                                   ;
 2509  00000FE8  23FC0004000000DFFF00   	move.l	#$40000,BUTCH
 2510  00000FF2  33FC186100F00000       	move.w	#$1861,MEMCON1	;set MEMCON for 8-bit
 2511                                   ;
 2512  00000FFA  4EB900000070           	jsr	intCDboo	;reload cdboot1 from 8-bit CD Bootrom
 2513                                   
 2514  00001000  33FC186500F00000       	move.w	#$1865,MEMCON1
 2515  00001008  23FC0000000000DFFF00   	move.l	#0,BUTCH
 2516                                   ;
 2517  00001012  700D                   	moveq	#13,d0		;retry failure on load of boot block
 2518  00001014  33FC010100F000E0       	move.w	#$101,INT1	;turn display back on
 2519  0000101C  41F9000004E4           	lea	failCD,a0
 2520  00001022  91FCFFFB0000           	sub.l	#reladj,a0
 2521  00001028  4ED0                   	jmp	(a0)
 2522                                   ;
 2523                                   nobooerr:
 2524  0000102A  7003                   	moveq	#3,d0
 2525  0000102C  2280                   	move.l	d0,(a1)		;shut-down DSP command
 2526                                   ;
 2527  0000102E  41F900F1A114           	lea	D_CTRL,a0
 2528                                   notfin:
 2529  00001034  2010                   	move.l	(a0),d0
 2530  00001036  2200                   	move.l	d0,d1
 2531  00001038  E249                   	lsr.w	#1,d1		;wait for DSP to shut itself off
 2532  0000103A  65F8                   	bcs	notfin
 2533                                   ;
 2534                                   ;
 2535  0000103C  41FAxxxx               	lea	stopobj(pc),a0
 2536  00001040  2008                   	move.l	a0,d0
 2537  00001042  06800000000F           	addi.l	#15,d0
 2538  00001048  0240FFF0               	andi.w	#~15,d0
 2539  0000104C  4840                   	swap	d0


                                        src/cdboot1.s        Page 47      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2540  0000104E  23C000F00020           	move.l	d0,OLP
 2541                                   ;
 2542  00001054  41FAxxxx               	lea	NullFrm(pc),a0
 2543  00001058  21C80100               	move.l	a0,$100
 2544                                   ;
 2545  0000105C  7000                   	moveq	#0,d0
 2546  0000105E  23C000F0002A           	move.l	d0,BORD1
 2547  00001064  33C000F00058           	move.w	d0,BG			;black screen
 2548                                   ;
 2549  0000106A  33FCFFFF00F0004E       	move.w	#-1,VI		;turn display off for real
 2550  00001072  33FC010100F000E0       	move.w	#$101,INT1
 2551                                   ;
 2552  0000107A  7000                   	moveq	#0,d0
 2553  0000107C  4EB83012               	jsr	CD_jeri		;turn off jerry I2S irq's
 2554                                   ;
 2555                                   go4it:
 2556  00001080  2079xxxxxxxx           	move.l	MD5result,a0
 2557  00001086  4ED0                   	jmp	(a0)
 2558                                   ;
 2559                                   stopobj:
 2560  00001088  0004000400040004       	dc.w	4,4,4,4
 2561  00001090  0004000400040004       	dc.w	4,4,4,4
 2562  00001098  0004000400040004       	dc.w	4,4,4,4
 2563  000010A0  0004000400040004       	dc.w	4,4,4,4
 2564                                   NullFrm:
 2565  000010A8  33FC010100F000E0       	move.w	#$101,INT1
 2566  000010B0  33FC000000F000E2       	move.w	#$0,INT2
 2567  000010B8  4E73                   	rte
 2568                                   
 2569                                   CDnexte:
 2570                                   ;
 2571                                   ;
 2572                                   ;-----------------------------------------------
 2573                                   ;
 2574                                   ;  Load Public Key and clear all other operands in DSP's deRSA
 2575                                   ;
 2576                                   clrRSAop:
 2577  000010BA  48E7C060               	movem.l	d0-d1/a1/a2,-(sp)
 2578  000010BE  43FAxxxx               	lea	PublicCD(pc),a1
 2579  000010C2  45F9xxxxxxxx           	lea	SEMIPTR+4,a2
 2580  000010C8  7010                   	moveq	#68/4-1,d0
 2581                                   .keyloop:
 2582  000010CA  24D9                   	move.l	(a1)+,(a2)+		;stuff in our Public key
 2583  000010CC  51C8FFFC               	dbra	d0,.keyloop		
 2584                                   ;
 2585  000010D0  7200                   	moveq	#0,d1
 2586  000010D2  303C00C8               	move.w	#200,d0
 2587                                   oper0:
 2588  000010D6  24C1                   	move.l	d1,(a2)+
 2589  000010D8  51C8FFFC               	dbra	d0,oper0		;zero out operands
 2590  000010DC  4CDF0603               	movem.l	(sp)+,d0-d1/a1/a2
 2591                                   
 2592  000010E0  4E75                   	rts
 2593                                   ;
 2594                                   ;  ----------------------------------------
 2595                                   ;


                                        src/cdboot1.s        Page 48      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2596                                   ;
 2597                                   ;    Get a random long in d0 after each call
 2598                                   ;
 2599                                   randf:
 2600  000010E2  48E77C80               	movem.l	a0/d1-d5,-(sp)
 2601                                   ;	
 2602                                   ;  The following random generator provides exactly the same
 2603                                   ;   results as Landon Dyer's version in the ST extended BIOS.
 2604                                   ;
 2605  000010E6  4CFA0003xxxx           	movem.l	seed(pc),d0-d1		;get seed & constant
 2606  000010EC  7400                   	moveq	#0,d2		;clear neg flag
 2607                                   rerand:
 2608  000010EE  4A80                   	tst.l	d0		;check seed
 2609  000010F0  6Exx                   	bgt.s	ov		;br if pos, non-zero (seed ok)
 2610  000010F2  66xx                   	bne.s	ovx		;br if neg, non-zero (need positive)
 2611                                   ;
 2612                                   ;  we have a zero seed--can't let this happen
 2613                                   ;
 2614  000010F4  203900F1003A           	move.l	$f1003a,d0		;use JPIT as a random
 2615  000010FA  4840                   	swap	d0
 2616  000010FC  60F0                   	bra	rerand		;guaranteed non-zero now		
 2617                                   ovx:
 2618  000010FE  4480                   	neg.l	d0		;make positive
 2619  00001100  5242                   	addq	#1,d2		;set neg flag
 2620                                   ov:
 2621  00001102  2600                   	move.l	d0,d3
 2622  00001104  C6C1                   	mulu	d1,d3
 2623                                   ;
 2624  00001106  2800                   	move.l	d0,d4
 2625  00001108  4844                   	swap	d4
 2626  0000110A  C8C1                   	mulu	d1,d4
 2627                                   ;
 2628  0000110C  2A01                   	move.l	d1,d5
 2629  0000110E  4845                   	swap	d5
 2630  00001110  C0C5                   	mulu	d5,d0
 2631                                   ;
 2632  00001112  D044                   	add.w	d4,d0
 2633  00001114  4840                   	swap	d0
 2634  00001116  4240                   	clr.w	d0
 2635  00001118  D083                   	add.l	d3,d0
 2636  0000111A  4A42                   	tst.w	d2
 2637  0000111C  66xx                   	bne.s	ov1
 2638  0000111E  4480                   	neg.l	d0
 2639                                   ov1:
 2640  00001120  5280                   	addq.l	#1,d0
 2641  00001122  41FAxxxx               	lea	seed(pc),a0
 2642  00001126  2080                   	move.l	d0,(a0)		;save seed for next time
 2643                                   ;
 2644  00001128  4CDF013E               	movem.l	(sp)+,a0/d1-d5
 2645  0000112C  4E75                   	rts
 2646                                   ;
 2647                                   ;
 2648                                   ;
 2649                                   seed:
 2650  0000112E  33BA0359               	dc.l	$33ba0359		;seed
 2651                                   constant:


                                        src/cdboot1.s        Page 49      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2652  00001132  44BF19D3               	dc.l	$44bf19d3		;constant
 2653                                   ;
 2654                                   ;
 2655                                   ;
 2656                                   	.if	0
 2657                                 - ;
 2658                                 - ;  --------  Search buffer for header block "ATRI" ------------
 2659                                 - ;
 2660                                 - ; Entry:
 2661                                 - ;  a0 -> start of buffer to scan
 2662                                 - ;  a1 -> end of buffer to scan
 2663                                 - ;
 2664                                 - ; Exit:
 2665                                 - ;  a0 -> start of data block immediately after partition mark found
 2666                                 - ;
 2667                                 - matchead:
 2668                                 - 	move.l	#"ATRI",d0
 2669                                 - 	rol.l	#8,d0
 2670                                 - newchk:
 2671                                 - 	move.l	d0,d1
 2672                                 - 	moveq	#64-2,d2
 2673                                 - ;	moveq	#4-2,d2
 2674                                 - wait1st:
 2675                                 - 	cmp.b	(a0)+,d1
 2676                                 - 	beq.s	wait4
 2677                                 - 	cmp.l	a1,a0
 2678                                 - 	bcs	wait1st
 2679                                 - wait4:
 2680                                 - 	rol.l	#8,d1
 2681                                 - wait4AT:
 2682                                 - 	cmp.b	(a0)+,d1
 2683                                 - 	beq.s	waiti
 2684                                 - 	cmp.l	a1,a0
 2685                                 - 	bcs	newchk
 2686                                 - 	moveq	#-1,d1		;reached end without match
 2687                                 - 	rts
 2688                                 - waiti:
 2689                                 - 	dbra	d2,wait4
 2690                                 - ;
 2691                                 - 	moveq	#0,d1		;good match found
 2692                                 - 	rts
 2693                                 - ;
 2694                                 - 	.endif
 2695                                   ;-------------------------------------------------
 2696                                   ;
 2697                                   ; Entry:
 2698                                   ;  d0.l = seek time (mm:ss:ff)
 2699                                   ;
 2700                                   ; Exit:
 2701                                   ;  d0.l = 6 frames before seek time
 2702                                   ;
 2703                                   backup6:
 2704  00001136  028000FFFFFF           	andi.l	#$ffffff,d0	;strip track # off [31:24]
 2705                                   ;
 2706                                   ;	subq.b	#6,d0		;back up 6 frames
 2707                                   ;	subi.b	#9,d0		;back up 9 frames


                                        src/cdboot1.s        Page 50      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2708  0000113C  04000006               	subi.b	#backfrm,d0	;back up x frames
 2709                                   
 2710  00001140  64xx                   	bcc.s	doseek
 2711                                   
 2712  00001142  0600004B               	addi.b	#75,d0		;adjust for frame underflo
 2713  00001146  E098                   	ror.l	#8,d0		;need to borrow from seconds
 2714  00001148  5300                   	subq.b	#1,d0		;subtract 1 from seconds
 2715  0000114A  64xx                   	bcc.s	doseek1
 2716                                   ;
 2717  0000114C  0600003C               	addi.b	#60,d0		;adjust for seconds underflo
 2718  00001150  E098                   	ror.l	#8,d0		;need to borrow from minutes
 2719  00001152  5300                   	subq.b	#1,d0		;there better be minutes
 2720  00001154  E198                   	rol.l	#8,d0		; since we don't check min underflo
 2721                                   doseek1:
 2722  00001156  E198                   	rol.l	#8,d0
 2723                                   doseek:
 2724  00001158  4E75                   	rts
 2725                                   ;
 2726                                   ;
 2727                                   ;
 2728                                   ;******************************************************
 2729                                   ;
 2730                                   	.if	0
 2731                                 - ;
 2732                                 - ;  Need to do the funny de-scramble thang
 2733                                 - ;
 2734                                 - CDromchk:
 2735                                 - 	lea	GameInit,a0
 2736                                 - ;	lea	GameOver,a1
 2737                                 - ;
 2738                                 - nextsec:
 2739                                 - 	move.l	a0,a1
 2740                                 - 	adda.w	#5000,a1
 2741                                 - 	moveq	#-1,d0
 2742                                 - 	moveq	#3,d1
 2743                                 - headchk:
 2744                                 - 	cmp.w	(a0)+,d0
 2745                                 - 	beq.s	head1
 2746                                 - 	cmp.l	a1,a0
 2747                                 - 	bcs	headchk
 2748                                 - 	bra	weA
 2749                                 - head1:
 2750                                 - 	dbra	d1,headchk
 2751                                 - ;
 2752                                 - goodhead:
 2753                                 - 	addq	#2,a0
 2754                                 - 	move.l	a0,a2
 2755                                 - ;
 2756                                 - ;  found next start
 2757                                 - ;
 2758                                 - 	move.w	#2-1,d3		;just do 2 bytes for id
 2759                                 - 	moveq	#1,d0
 2760                                 - 	moveq	#0,d5
 2761                                 - ;
 2762                                 - ;
 2763                                 - 	move.l	#$8000,d2


                                        src/cdboot1.s        Page 51      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2764                                 - 
 2765                                 - blklp:
 2766                                 - 	move.w	(a0),d1
 2767                                 - 	moveq	#15,d4
 2768                                 - 	moveq	#0,d7
 2769                                 - wordlp:
 2770                                 - 	or.w	d7,d5
 2771                                 - 	lsr.w	#1,d5
 2772                                 - ;
 2773                                 - 	move.w	d1,d7
 2774                                 - 	eor.w	d0,d7
 2775                                 - 	ror.w	#1,d7
 2776                                 - 	and.w	d2,d7
 2777                                 - ;
 2778                                 - 	move.w	d0,d6
 2779                                 - 	lsl.w	#1,d0
 2780                                 - 	eor.w	d0,d6
 2781                                 - 	roxr.w	#2,d6
 2782                                 - 	roxr.w	#2,d0
 2783                                 - 	lsr.w	#1,d1
 2784                                 - 	dbra	d4,wordlp
 2785                                 - ;
 2786                                 - 	or.w	d7,d5
 2787                                 - 	rol.w	#8,d5
 2788                                 - 	move.w	d5,(a0)+
 2789                                 - 	dbra	d3,blklp
 2790                                 - ;
 2791                                 - 	swap	d2		;have we done full sector?
 2792                                 - 	tst.w	d2
 2793                                 - 	bne	secdone		;if so, quit
 2794                                 - ;
 2795                                 - 	move.l	-4(a0),d3	;check this sector id
 2796                                 - 	andi.l	#$ffffff00,d3
 2797                                 - 	move.l	d3,d4
 2798                                 - 	swap	d4
 2799                                 - 	cmp.w	#2,d4		;is it CDrom style sector id?
 2800                                 - 	bne	weA		;br if not
 2801                                 - ;
 2802                                 - 	cmpi.l	#$00021600,d3	;reached desired sector id?
 2803                                 - 	bne	nextsec		;keep looking
 2804                                 - ;
 2805                                 - 	move.w	#1160-1,d3	;yes--this is one of interest
 2806                                 - 	move.w	#$ffff,d2	;so finish all bytes
 2807                                 - 	swap	d2
 2808                                 - 	bra	blklp
 2809                                 - ;
 2810                                 - secdone:
 2811                                 - 	illegal
 2812                                 - ;
 2813                                 - weA:
 2814                                 - 	move.l	#1,G_CTRL
 2815                                 - 	bra	weAudio
 2816                                 - ;
 2817                                 - ;	
 2818                                 - ;
 2819                                 - ;bail:


                                        src/cdboot1.s        Page 52      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2820                                 - ;	move.w	#$96a0,BG
 2821                                 - 	.endif
 2822                                   ;
 2823                                   ;
 2824                                   ;
 2825                                   ;		
 2826                                   ATstrng:	;32103210321032103210321032103210
 2827  0000115A  41544152492041505052   	.dc.b	"ATARI APPROVED DATA HEADER ATRI "
       00001164  4F564544204441544120   
       0000116E  48454144455220415452   
       00001178  4920                   
 2828                                   ;
 2829                                   	.even
 2830                                   Public:
 2831  0000117A  000000                 	dc.b	0,0,0
 2832                                   	.include	"public.key"
    1                                   public:
    2  0000117D  2FC50F79B7961B10        dc.b $2f,$c5,$0f,$79,$b7,$96,$1b,$10
    3  00001185  A2EA46ABA1F01DAF        dc.b $a2,$ea,$46,$ab,$a1,$f0,$1d,$af
    4  0000118D  C5C794C008B98180        dc.b $c5,$c7,$94,$c0,$08,$b9,$81,$80
    5  00001195  5E5B93F5030241FE        dc.b $5e,$5b,$93,$f5,$03,$02,$41,$fe
    6  0000119D  75B71CE8E72279A3        dc.b $75,$b7,$1c,$e8,$e7,$22,$79,$a3
    7  000011A5  D5BE3045F9EA35D9        dc.b $d5,$be,$30,$45,$f9,$ea,$35,$d9
    8  000011AD  8A0A1540B4B4E84E        dc.b $8a,$0a,$15,$40,$b4,$b4,$e8,$4e
    9  000011B5  A6DD17EE4233100D        dc.b $a6,$dd,$17,$ee,$42,$33,$10,$0d
   10  000011BD  F9                      dc.b $f9
   11                                   
 2833                                   PublicCD:
 2834  000011BE  000000                 	dc.b	0,0,0
 2835                                   	.include	"publicd.key"
    1                                   ;public:
    2  000011C1  2C801E3256F3580F        dc.b $2c,$80,$1e,$32,$56,$f3,$58,$0f
    3  000011C9  1F73488A32203EB7        dc.b $1f,$73,$48,$8a,$32,$20,$3e,$b7
    4  000011D1  E8C7031711516F8F        dc.b $e8,$c7,$03,$17,$11,$51,$6f,$8f
    5  000011D9  92DC64C24BAEE6E0        dc.b $92,$dc,$64,$c2,$4b,$ae,$e6,$e0
    6  000011E1  C9CA38350E0703EC        dc.b $c9,$ca,$38,$35,$0e,$07,$03,$ec
    7  000011E9  4E3BA8F31F2F90A6        dc.b $4e,$3b,$a8,$f3,$1f,$2f,$90,$a6
    8  000011F1  43C2CDA0FF2D5B26        dc.b $43,$c2,$cd,$a0,$ff,$2d,$5b,$26
    9  000011F9  8E4AA93B4A63A6AA        dc.b $8e,$4a,$a9,$3b,$4a,$63,$a6,$aa
   10  00001201  27                      dc.b $27
 2836                                   ;
 2837                                   ;
 2838                                   ;
 2839  00001202                         	.bss
 2840                                   ;
 2841                                   ;  The following block of memory is used by de-cryption code..
 2842                                   ;
 2843                                   Hblkcnt:
 2844  00000000 =00000001               	ds.l	1		;# of Hash blocks, this CD
 2845                                   TOChash:
 2846  00000004 =00000004               	ds.l	4		;CDtoc MD5 hash (for $2C00-$2FFF)
 2847                                   ;
 2848                                   ;  We select three Hash blocks to authenticate...
 2849                                   ;
 2850                                   ;
 2851                                   ;	#0


                                        src/cdboot1.s        Page 53      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2852                                   startT0:
 2853  00000014 =00000001               	ds.l	1		;start time for hash block #0
 2854                                   startP0:
 2855  00000018 =00000001               	ds.l	1		;start partition marker pattern
 2856                                   size0:
 2857  0000001C =00000001               	ds.l	1		;# of 64-byte blocks to hash
 2858                                   HBhash0:
 2859  00000020 =00000004               	ds.l	4		;hash for selected hash block #0
 2860                                   ;
 2861                                   ;
 2862                                   ;	#1
 2863                                   startT1:
 2864  00000030 =00000001               	ds.l	1		;start time for hash block #1
 2865                                   startP1:
 2866  00000034 =00000001               	ds.l	1		;start partition marker pattern
 2867                                   size1:
 2868  00000038 =00000001               	ds.l	1		;# of 64-byte blocks to hash
 2869                                   HBhash1:
 2870  0000003C =00000004               	ds.l	4		;hash for selected hash block #1
 2871                                   ;
 2872                                   ;
 2873                                   ;	#2
 2874                                   startT2:
 2875  0000004C =00000001               	ds.l	1		;start time for hash block #2
 2876                                   startP2:
 2877  00000050 =00000001               	ds.l	1		;start partition marker pattern
 2878                                   size2:
 2879  00000054 =00000001               	ds.l	1		;# of 64-byte blocks to hash
 2880                                   HBhash2:
 2881  00000058 =00000004               	ds.l	4		;hash for selected hash block #2
 2882                                   ;
 2883                                   ;
 2884                                   ;
 2885                                   blockpic:
 2886  00000068 =00000001               	ds.l	1	;Hi & Lo words contain randomly selected frag #'s
 2887                                   Hsynctim:
 2888  0000006C =00000001               	ds.l	1	;sync time to CD_read to when rereading hash track
 2889                                   ;
 2890                                   failcode:
 2891  00000070 =00000001               	ds.l	1	;CD-ROM failure code goes here
 2892                                   ;			1 - "ATRI" header not found on hash track
 2893                                   ;			2 - "ATARI APPROVED.." not found
 2894                                   ;			3 - Hash entry count below minimum
 2895                                   ;			4 - Bad RSA block on hash track
 2896                                   ;			5 - Bad TOC hash
 2897                                   ;			6 - Bad segment hash
 2898                                   ;			7 - Time-out looking for sync before MD5 hash
 2899                                   ;			8 - retry failure (CD ERR) on 1st read of hash track
 2900                                   ;			9 - retry failure (CD ERR) on 2nd read of hash track
 2901                                   ;			10- retry failure (CD ERR) on 3rd (random) hash block
 2902                                   ;			11- retry failure (CD ERR) on 2nd (random) hash block 
 2903                                   ;			12- retry failure (CD ERR) on 1st (boot) hash block 
 2904                                   ;			13- retry failure on load of boot block (before exec)
 2905                                   randinit:
 2906  00000074 =00000001               	ds.l	1	;random initialization value
 2907                                   errBASE:


                                        src/cdboot1.s        Page 54      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)


 2908  00000078 =00000001               	ds.l	1	;ptr to base addr of error report
 2909                                   padstart:
 2910  0000007C =00000001               	ds.w	1	;save 1st word of joystick routine (to restart)
 2911                                   retrycnt:
 2912  0000007E =00000001               	ds.w	1	;total count of CD ERR retries attempted
 2913                                   retryz:
 2914  00000080 =00000001               	ds.w	1	;retry count for CD ERR
 2915  00000082 =00000001               	ds.w	1	
 2916                                   BUTCHcop:
 2917  00000084 =00000002               	ds.l	2	;heres a copy of BUTCH before we error out
 2918                                   Blksgot:
 2919  0000008C =00000004               	ds.w	4	;plaintext block #'s we need (64-byte blocks, #0..n)
 2920                                   plainoff:
 2921  00000094 =00000002               	ds.l	2	;offset for each of 2 blocks
 2922                                   ;
 2923                                   Cryptgot:
 2924  0000009C =00000004               	ds.l	4	;cryptext deRSA offsets for above blocks
 2925                                   ;
 2926                                   plaintxt:
 2927  000000AC =00000010               	ds.l	16	;up to 4 plaintext blocks need a home
 2928  000000EC =00000010               	ds.l	16
 2929  0000012C =00000010               	ds.l	16
 2930  0000016C =00000010               	ds.l	16
 2931                                   
 2932                                   ;
 2933                                   ;   The following locations are used as copies of DSP sRAM 
 2934                                   ;
 2935                                   SEMptr:
 2936  000001AC =00000001               	ds.l	1	;readrsa module results dRAM
 2937                                   daRSA:
 2938                                   Hashoffs:
 2939  000001B0 =00000008               	ds.l	8
 2940                                   Hfrags:
 2941  000001D0 =00000044               	ds.l	68	
 2942                                   ;
 2943                                   ;   end de-cryption code memory
 2944                                   ;
 2945                                   errorlog:
 2946  000002E0 =00000001               	ds.l	1	;here's where errors are recorded
 2947  000002E4 =00000001               	ds.l	1
 2948                                   ;
 2949                                   cd1ptr:
 2950  000002E8 =00000001               	ds.l	1
 2951                                   questptr:
 2952  000002EC =00000001               	ds.l	1
 2953                                   cdbackpt:
 2954  000002F0 =00000001               	ds.l	1
 2955                                   arrowptr:
 2956  000002F4 =00000001               	ds.l	1
 2957                                   cd1ram:
 2958  000002F8 =000F0000               	ds.w	$f0000


                                        src/cdboot1.s        Page 55      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)
Symbol Table

          .JSRdisd 000000000000026C  t           A1_FSTEP 0000000000F02214  a           CD_osamp 0000000000003054  a             GPIO_1 0000000000F15000  a 
          .RSAwait 0000000000000AAA  t             A1_INC 0000000000F0221C  a            CD_paus 0000000000003030  a             GPIO_2 0000000000F16000  a 
          .RSAwait 0000000000000CAA  t           A1_PIXEL 0000000000F0220C  a             CD_ptr 000000000000304E  a             GPIO_3 0000000000F17000  a 
            .TOChg 0000000000000AF2  t            A1_STEP 0000000000F02210  a            CD_read 000000000000303C  a             GPIO_4 0000000000F17800  a 
             .badh 0000000000000F02  t            A2_BASE 0000000000F02224  a           CD_setup 0000000000003048  a             GPIO_5 0000000000F17C00  a 
            .booty 0000000000000ED4  t           A2_FLAGS 0000000000F02228  a            CD_spin 0000000000003018  a             GPUEND external  ax
           .bsscop 000000000000027C  t            A2_MASK 0000000000F0222C  a            CD_stop 000000000000301E  a           GPUSTART external  ax
          .bssrest 0000000000000396  t           A2_PIXEL 0000000000F02230  a          CD_switch 000000000000306C  a           GPU_done external  ax
           .bytelp 0000000000000460  t            A2_STEP 0000000000F02234  a             CD_toc 0000000000002C00  a           GPU_init 0000000000000920  t 
            .check 00000000000009E2  t            ADDDSEL 0000000000020000  a           CD_umute 000000000000302A  a          GPU_state external  ax
            .check 0000000000000BD8  t             ASICLK 0000000000F10034  a           CD_upaus 0000000000003036  a             G_CTRL 0000000000F02114  a 
             .chkp 000000000000078E  t            ASICTRL 0000000000F10032  a           CD_uread 0000000000003042  a          G_DIVCTRL 0000000000F0211C  a 
           .contin 0000000000000CA8  t            ASIDATA 0000000000F10030  a            CDfront 000000000008000C  a              G_END 0000000000F0210C  a 
           .doKart 000000000000023C  t            ASISTAT 0000000000F10032  a             CDnext 0000000000000F9A  t           G_ENDRAM 0000000000F04000  a 
           .fnderr 00000000000009FE  t            ATstrng 000000000000115A  t            CDnexte 00000000000010BA  t            G_FLAGS 0000000000F02100  a 
           .fnderr 0000000000000BF4  t               BASE 0000000000F00000  a             CDplus 000000000000066A  t           G_HIDATA 0000000000F02118  a 
           .fnderr 0000000000000E5A  t            BCOMPEN 0000000004000000  a              CDtoc 0000000000002C00  a             G_MTXA 0000000000F02108  a 
           .frwait 00000000000005F0  t                 BG 0000000000F00058  a           CHRO_CLK 0000000000F10014  a             G_MTXC 0000000000F02104  a 
          .frwaitx 0000000000000658  t           BIOS_VER 0000000000003004  a            CLIP_A1 0000000000000040  a               G_PC 0000000000F02110  a 
          .fullpal 0000000000000784  t            BKGWREN 0000000010000000  a               CLK1 0000000000F10010  a              G_RAM 0000000000F03000  a 
            .hiclr 000000000000046A  t              BORD1 0000000000F0002A  a               CLK2 0000000000F10012  a           G_REMAIN 0000000000F0211C  a 
          .keyloop 00000000000010CA  t              BORD2 0000000000F0002C  a               CLUT 0000000000F00400  a           GameInit 0000000000004000  a 
            .later 0000000000000ED6  t              BUSHI 0000000020000000  a             CMPDST 0000000002000000  a           GameOver 0000000000024000  a 
            .mustb 0000000000000A94  t              BUTCH 0000000000DFFF00  a           Cryptgot 000000000000009C  b                HBB 0000000000F00030  a 
          .noCDerr 0000000000000A18  t           BUTCHcop 0000000000000084  b               DAC1 0000000000F1A140  a                HBE 0000000000F00032  a 
          .noCDerr 0000000000000C0E  t              B_CMD 0000000000F02238  a               DAC2 0000000000F1A144  a            HBhash0 0000000000000020  b 
          .noCDerr 0000000000000E76  t         B_COMPLETE 0000000000000000  a            DCOMPEN 0000000008000000  a            HBhash1 000000000000003C  b 
           .notJSR 0000000000000282  t            B_COUNT 0000000000F0223C  a             DSAcmd 0000000000000706  t            HBhash2 0000000000000058  b 
           .noxchk 000000000000060E  t             B_DSTD 0000000000F02248  a            DSCNTRL 0000000000000004  a                 HC 0000000000F00004  a 
            .noxit 0000000000000470  t             B_DSTZ 0000000000F02250  a            DSP2RAM external  ax              HDB1 0000000000F00038  a 
         .repaller 0000000000000776  t               B_I0 0000000000F02288  a              DSP_E 000000000080352E  a               HDB2 0000000000F0003A  a 
           .selclp 0000000000000AFA  t               B_I1 0000000000F02284  a              DSP_S 0000000000803202  a                HDE 0000000000F0003C  a 
            .semiw 0000000000000C3A  t               B_I2 0000000000F02280  a           DSP_wait 00000000000003F6  t                HEQ 0000000000F00054  a 
            .semiw 0000000000000C7A  t               B_I3 0000000000F0227C  a              DSTA2 0000000000000800  a                 HP 0000000000F0002E  a 
            .semiw 0000000000000CDA  t             B_IINC 0000000000F02270  a              DSTEN 0000000000000008  a                 HS 0000000000F00034  a 
            .semiw 0000000000000DD4  t             B_PATD 0000000000F02268  a             DSTENZ 0000000000000010  a                HVS 0000000000F00036  a 
            .semiw 0000000000000EA0  t             B_SRCD 0000000000F02240  a             DSTWRZ 0000000000000020  a           Hashoffs 00000000000001B0  b 
            .semiw 0000000000000A44  t            B_SRCZ1 0000000000F02258  a            DS_DATA 000000000000000A  a            Hblkcnt 0000000000000000  b 
            .semiw 0000000000000A84  t            B_SRCZ2 0000000000F02260  a             D_CTRL 0000000000F1A114  a             Hfrags 00000000000001D0  b 
            .semiw 0000000000000ADC  t             B_STOP 0000000000F02278  a          D_DIVCTRL 0000000000F1A11C  a           Hsynctim 000000000000006C  b 
          .shutDSP 0000000000000682  t               B_Z0 0000000000F02298  a              D_END 0000000000F1A10C  a            I2CNTRL 0000000000000010  a 
            .tablp 000000000000045A  t               B_Z1 0000000000F02294  a           D_ENDRAM 0000000000F1D000  a            I2SDAT2 0000000000000028  a 
           .testwt 00000000000007F0  t               B_Z2 0000000000F02290  a            D_FLAGS 0000000000F1A100  a               INT1 0000000000F000E0  a 
          .testwt1 00000000000007F6  t               B_Z3 0000000000F0228C  a           D_HIDATA 0000000000F1A118  a               INT2 0000000000F000E2  a 
         .txdelay0 000000000000071E  t             B_ZINC 0000000000F02274  a             D_MTXA 0000000000F1A108  a           JER_wait 0000000000000926  t 
          .txready 0000000000000718  t            Blksgot 000000000000008C  b             D_MTXC 0000000000F1A104  a               JOY1 0000000000F14000  a 
          .txwait1 000000000000071C  t            Btretry 0000000000000FA8  t               D_PC 0000000000F1A110  a               JOY2 0000000000F14002  a 
           .waiTOC 0000000000000DBC  t           CDREADER external  ax             D_RAM 0000000000F1B000  a              JPIT1 0000000000F10000  a 
            .waitg 000000000000028A  t             CD_ack 000000000000300C  a           D_REMAIN 0000000000F1A11C  a              JPIT2 0000000000F10002  a 
              .wao 0000000000000E3E  t           CD_getoc 000000000000305A  a             Do_DSP 0000000000000400  t              JPIT3 0000000000F10004  a 
              .xit 000000000000046E  t            CD_init 0000000000003000  a             Do_JER 0000000000000930  t              JPIT4 0000000000F10006  a 
           A1_BASE 0000000000F02200  a           CD_initf 0000000000003066  a            FIFODAT 0000000000000024  a            JUMPVEC 0000000000800404  a 
           A1_CLIP 0000000000F02208  a           CD_initm 0000000000003060  a              FLAGS 0000000000800408  a              J_INT 0000000000F10020  a 
           A1_FINC 0000000000F02220  a            CD_jeri 0000000000003012  a              Frame 0000000000194C90  a           KartRest 0000000000000386  t 
          A1_FLAGS 0000000000F02204  a            CD_mode 0000000000003006  a              GOURD 0000000000001000  a            Kartblk 00000000000002AA  t 
         A1_FPIXEL 0000000000F02218  a            CD_mute 0000000000003024  a             GPIO_0 0000000000F14800  a           Kartblke 0000000000000386  t 


                                        src/cdboot1.s        Page 56      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)
Symbol Table

             LBUFA 0000000000F00800  a             PIXEL1 0000000000000000  a                 VC 0000000000F00006  a              YADD0 0000000000000000  a 
             LBUFB 0000000000F01000  a            PIXEL16 0000000000000020  a                VDB 0000000000F00046  a              YADD1 0000000000040000  a 
             LBUFC 0000000000F01800  a             PIXEL2 0000000000000008  a                VDE 0000000000F00048  a           YSIGNADD 0000000000000000  a 
             LFU_A 0000000001000000  a            PIXEL32 0000000000000028  a                VEB 0000000000F0004A  a           YSIGNSUB 0000000000100000  a 
            LFU_AN 0000000000800000  a             PIXEL4 0000000000000010  a                VEE 0000000000F0004C  a              ZBUFF 0000000000002000  a 
         LFU_CLEAR 0000000000000000  a             PIXEL8 0000000000000018  a                 VI 0000000000F0004E  a            ZMODEEQ 0000000000080000  a 
             LFU_D 0000000001400000  a             Public 000000000000117A  t              VMODE 0000000000F00028  a            ZMODEGT 0000000000100000  a 
            LFU_NA 0000000000400000  a           PublicCD 00000000000011BE  t                 VP 0000000000F0003E  a            ZMODELT 0000000000040000  a 
           LFU_NAN 0000000000200000  a            RDRSA_E 000000000080429E  a                 VS 0000000000F00044  a             ZOFFS0 0000000000000000  a 
          LFU_NOTD 0000000000A00000  a            RDRSA_S 0000000000803DD2  a              WID10 0000000000001A00  a             ZOFFS1 0000000000000040  a 
          LFU_NOTS 0000000000600000  a          ROMCONFIG 0000000000800400  a            WID1024 0000000000005000  a             ZOFFS2 0000000000000080  a 
          LFU_NSAD 0000000000400000  a         ROM_AMSINE 0000000000F1D400  a             WID112 0000000000003600  a             ZOFFS3 00000000000000C0  a 
         LFU_NSAND 0000000000200000  a        ROM_CHIRP16 0000000000F1D800  a              WID12 0000000000001C00  a             ZOFFS4 0000000000000100  a 
         LFU_NSORD 0000000001600000  a          ROM_DELTA 0000000000F1DC00  a             WID128 0000000000003800  a             ZOFFS5 0000000000000140  a 
        LFU_NSORND 0000000000E00000  a          ROM_NOISE 0000000000F1DE00  a            WID1280 0000000000005200  a             ZOFFS6 0000000000000180  a 
       LFU_N_SXORD 0000000000C00000  a           ROM_NTRI 0000000000F1DA00  a              WID14 0000000000001E00  a             ZOFFS7 00000000000001C0  a 
           LFU_ONE 0000000001E00000  a           ROM_SINE 0000000000F1D200  a            WID1536 0000000000005400  a             action 00000000001AE524  a 
       LFU_REPLACE 0000000001800000  a        ROM_SINE12W 0000000000F1D600  a              WID16 0000000000002000  a              arrow external  ax
             LFU_S 0000000001800000  a          ROM_TABLE 0000000000F1D000  a             WID160 0000000000003A00  a           arrowptr 00000000000002F4  b 
           LFU_SAD 0000000001000000  a            ROM_TRI 0000000000F1D000  a            WID1792 0000000000005600  a             arrowx external  ax
          LFU_SAND 0000000000800000  a               RRXD 0000000000F1A14C  a             WID192 0000000000003C00  a              audio 000000000019203E  a 
          LFU_SORD 0000000001C00000  a              RSA_E 00000000008038A6  a               WID2 0000000000000800  a            backfrm 0000000000000006  a 
         LFU_SORND 0000000001A00000  a              RSA_S 000000000080352E  a              WID20 0000000000002200  a            backup6 0000000000001136  t 
         LFU_SXORD 0000000001200000  a               RSAd 0000000000000AB6  t            WID2048 0000000000005800  a           beasties 00000000001AE048  a 
           LFU_XOR 0000000001200000  a             RSAgpu external  ax            WID224 0000000000003E00  a              blist 00000000001AEC7C  a 
          LFU_ZERO 0000000000000000  a               RSAx 0000000000000C54  t              WID24 0000000000002400  a           blockpic 0000000000000068  b 
               LPH 0000000000F00008  a               RTXD 0000000000F1A14C  a             WID256 0000000000004000  a              board 00000000001B00F8  a 
               LPV 0000000000F0000A  a           RanGetEE 0000000000080000  a            WID2560 0000000000005A00  a             booerr 0000000000000FDC  t 
              LRXD 0000000000F1A148  a           RanPutEE 0000000000080004  a              WID28 0000000000002600  a           bootwait 0000000000000FCC  t 
              LTXD 0000000000F1A148  a             Retryz 0000000000003FC4  a            WID3072 0000000000005C00  a                cd1 external  ax
             MD5_E 0000000000803DD2  a           RunBeast 0000000000195B4C  a              WID32 0000000000002800  a             cd1ptr 00000000000002E8  b 
             MD5_S 00000000008038A6  a            SBCNTRL 0000000000000014  a             WID320 0000000000004200  a             cd1ram 00000000000002F8  b 
           MD5head external  ax           SB_TIME 0000000000000020  a            WID3584 0000000000005E00  a               cd1x external  ax
         MD5result external  ax              SCLK 0000000000F1A150  a             WID384 0000000000004400  a            cd_bios external  ax
           MD5semi external  ax           SEMIPTR external  ax              WID4 0000000000001000  a           cd_biosx external  ax
          MD5start external  ax            SEMptr 00000000000001AC  b              WID40 0000000000002A00  a             cdback external  ax
           MEMCON1 0000000000F00000  a              SETUP external  ax            WID448 0000000000004600  a           cdbackpt 00000000000002F0  b 
           MEMCON2 0000000000F00002  a              SMODE 0000000000F1A154  a              WID48 0000000000002C00  a            cdbackx external  ax
              NFrm 0000000000000374  t              SRCEN 0000000000000001  a             WID512 0000000000004800  a           cdbioset 000000000000004E  t 
              NOGO 0000000000000080  a             SRCENX 0000000000000004  a              WID56 0000000000002E00  a            cdfront external  ax
           NullFrm 00000000000010A8  t             SRCENZ 0000000000000002  a               WID6 0000000000001400  a           cdfrontx external  ax
               OB0 0000000000F00010  a           SRCSHADE 0000000040000000  a              WID64 0000000000003000  a             cdfset 0000000000000038  t 
               OB1 0000000000F00012  a              SSTAT 0000000000F1A150  a             WID640 0000000000004A00  a             cdloop 0000000000000F90  t 
               OB2 0000000000F00014  a            SUBDATA 0000000000000018  a             WID768 0000000000004C00  a           checkout 000000000000049E  t 
               OB3 0000000000F00016  a            SUBDATB 000000000000001C  a               WID8 0000000000001800  a              chkCD 0000000000000866  t 
               OBF 0000000000F00026  a           Start_CD 00000000000003DC  t              WID80 0000000000003200  a             chkCDh 0000000000000EB4  t 
               ODP 0000000000F00024  a              TEST1 0000000000F00056  a             WID896 0000000000004E00  a           chkCDpow 0000000000000884  t 
               OLP 0000000000F00020  a            TOCagin 00000000000003AA  t              WID96 0000000000003400  a            chkTOCh 0000000000000DE8  t 
           ObTypes 0000000000196AA8  a            TOChash 0000000000000004  b             WePass 0000000000000F24  t               chkp 0000000000000576  t 
           PATDSEL 0000000000010000  a             TOPBEN 0000000000004000  a              XADD0 0000000000020000  a           clearsub 000000000000043E  t 
              PIT0 0000000000F00050  a             TOPNEN 0000000000008000  a            XADDINC 0000000000030000  a           cleartoc 0000000000000874  t 
              PIT1 0000000000F00052  a              UPDA1 0000000000000200  a            XADDPHR 0000000000000000  a           clrRSAop 00000000000010BA  t 
            PITCH1 0000000000000000  a             UPDA1F 0000000000000100  a            XADDPIX 0000000000010000  a           constant 0000000000001132  t 
            PITCH2 0000000000000001  a              UPDA2 0000000000000400  a            XMDMtab 000000000000044E  t            cursimg 0000000000199A18  a 
            PITCH4 0000000000000002  a                VBB 0000000000F00040  a           XSIGNADD 0000000000000000  a              cursx 00000000001AE520  a 
            PITCH8 0000000000000003  a                VBE 0000000000F00042  a           XSIGNSUB 0000000000080000  a              cursy 00000000001AE522  a 


                                        src/cdboot1.s        Page 57      4:55:08 pm 20-Jun-2021        RMAC 2.1.01 (Linux/OSX)
Symbol Table

             daRSA 00000000000001B0  b              loram 0000000000001000  a               seed 000000000000112E  t 
          davesobj 00000000001AE148  a           maxretry 0000000000000005  a             seekit 0000000000000F7E  t 
          davesvec 0000000000199994  a            multisc 000000000000068E  t           seqblock 0000000000000000  a 
           deRloop 0000000000000C9C  t             myFont 0000000000198CB0  a            sessclr 00000000000006F2  t 
              del0 0000000000000860  t            neednot 0000000000000B48  t            setKblk 00000000000002A0  t 
             delay 000000000000085E  t           newstart 00000000000000D6  t            shutrsa 0000000000000D3E  t 
             dlist 00000000001AEC80  a             nextgr 000000000000009A  t              size0 000000000000001C  b 
             dojsr 000000000000034C  t             nflash 000000000000034A  t              size1 0000000000000038  b 
          donemiss 00000000000005D0  t            no_ksel 0000000000194F66  a              size2 0000000000000054  b 
            doseek 0000000000001158  t           nobooerr 000000000000102A  t               skid 00000000001AF05E  a 
           doseek1 0000000000001156  t           noecrypt 0000000000000000  a             skidoo 0000000000195076  a 
             dwait 0000000000000484  t              notTO 00000000000008BA  t           skipKart 00000000000003A2  t 
               end external  ax           notdoub 0000000000000BA8  t              sramo external  ax
          ergraflp 00000000000000A0  t             notfin 0000000000001034  t              start 0000000000000000  t 
           ergrafx 00000000000000B6  t            nothblk 0000000000000B82  t            startP0 0000000000000018  b 
           errBASE 0000000000000078  b            notless 0000000000000B42  t            startP1 0000000000000034  b 
          err_flag 0000000000003E00  a             notpre 0000000000000BA0  t            startP2 0000000000000050  b 
           errdRAM 0000000000000000  a             ntermd 00000000000004FC  t            startT0 0000000000000014  b 
          erreport 0000000000000000  a              offer 00000000000005E0  t            startT1 0000000000000030  b 
          errorlog 00000000000002E0  b              oper0 00000000000010D6  t            startT2 000000000000004C  b 
          fail2ill 0000000000000000  a                 ov 0000000000001102  t              stopo 0000000000000354  t 
           failBLK 0000000000000B0E  t                ov1 0000000000001120  t            stopobj 0000000000001088  t 
            failCD 00000000000004E4  t             ovrids 0000000000000302  t           termdis0 00000000000004EA  t 
          failcode 0000000000000070  b             ovvids 0000000000000F6E  t           termdis1 00000000000004F0  t 
          fetchone 0000000000000D22  t                ovx 00000000000010FE  t           termdis2 00000000000004C2  t 
          findhash 0000000000000986  t            pad_now 00000000001AE00C  a           termdis3 00000000000004D6  t 
            firreq 0000000000000B9E  t           padstart 000000000000007C  b           threhash 0000000000000DFC  t 
          firshash 00000000000009BC  t                pal 00000000001FD426  a           twofrags 0000000000000A5E  t 
            frames 00000000001AE4D2  a               pauz 000000000000091E  t              uptoc 0000000000000994  t 
           framsum 00000000000006C8  t           plainoff 0000000000000094  b           videstop 00000000000002D0  t 
              free 0000000000192018  a           plaintxt 00000000000000AC  b            vidstop 0000000000000F4A  t 
           freerun 0000000000198CAC  a             plan2h 0000000000000CFC  t                vlm external  ax
           fullpal 000000000000056C  t             plloop 0000000000000D12  t           vlm_mode 00000000001AE02A  a 
            fxwait 0000000000000F32  t             powBAD 0000000000000890  t            vlmlogo 000000000019ADD0  a 
            fzwait 00000000000002B0  t              powok 00000000000008A8  t             vlmset 0000000000000020  t 
             gloop 00000000000001C4  t              powup 0000000000000734  t             vlmtim 00000000001AF06E  a 
                gm 0000000000196814  a              print 000000000019483A  a               vlmx external  ax
             go4it 0000000000001080  t             public 000000000000117D  t               wait 000000000000021A  t 
              goag 000000000019207A  a              ques2 00000000000005D6  t           waitfor1 0000000000000F72  t 
            gooBLK 0000000000000B14  t              quest external  ax           weAudio 00000000000008FA  t 
             gooCD 0000000000000F16  t           questptr 00000000000002EC  b             x4loop 0000000000000424  t 
           gotpats 0000000000000D44  t             questx external  ax          xferloop 0000000000000954  t 
            gotpll 0000000000000D1C  t              randf 00000000000010E2  t            xmdmtab 0000000000F1C400  a 
            gotpow 000000000000081C  t            randfAD 0000000000080008  a 
          hashoffs external  ax          randinit 0000000000000074  b 
            hfragx 0000000000000BB2  t            readpad 0000000000196446  a 
           hsynctm 0000000000003FC0  a            rehasht 0000000000000E30  t 
          iansdoit 00000000001AC1A0  a             reladj FFFFFFFFFFFB0000  t 
           imatrix 00000000001AF068  a            relocad 0000000000050000  a 
          injerrlp 0000000000000DA0  t             reloop 0000000000000082  t 
          intCDboo 0000000000000070  t           repaller 000000000000055A  t 
            jumper 000000000000006E  t             rerand 00000000000010EE  t 
           keyloop 00000000000001D6  t           retrycnt 000000000000007E  b 
           lastlow 0000000000003A00  a             retryz 0000000000000080  b 
           loadmd5 0000000000000D6A  t           secnhash 0000000000000BC4  t 
             loop2 0000000000000B70  t             secsum 00000000000006DE  t 

