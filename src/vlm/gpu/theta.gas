; ******************************************************************************
; This is Jeff Minter's Virtual Light Machine for the Atari Jaguar.
;
; %TuuuuuuuuuuuuuuuuuunTj-   _f555555555F6{         %uLLLLL7'..       ..%nLLLLuu
; _;^)iiiiiiiiiiiiiii)!#j- .`_?[[[[[[[[12m{         _;;/"//|1o)      `[ol//"/*Tu
;   ./""""""""""""""""}Jj- .`_l{sssssss*2m{            ':'':|)la!. <a[\)=''''lTu
;  .`=+/////////////=^*Cu_ .`_xlllllllcs3m{           .'''''''+>)?[l><'''''''lTu
;   .__,^^========^=r*x)<. .`_i%vvvvvvvc3ms           ._''''''___vx"__''''''_lTu
;      _,,^^^^^^^,';L#%    .`_<>>>>>>>>v2mL}}}}**r`   .__________--_________-cTu
;      `__:::,,::"ii{*|    .`_|\))))))|<toozzz7Cq2_   .---------------------`cTu
;       ..-__''-.cT7`      .`-+/////////======^!6y_   .``````````````````````cTu
;       ..``-__""la]-      .`-;^^^^^^^^^^^^^^^:!qy_   .`````````````````````.c#n
;         ..``'tzi         .``''''''''''''''''-rwL_    ..................... ioa
;            ..``.         .`````````````````  .``                           ...
;
; theta.gas
;
; This module is loaded from 'MainModuleRunLoop' in omega.gas. 
; It is responsible for the 'Drawing Particle Motion' sub-effect. This sub-effect is
; used in the following Bank-Effect combinations:
;
; Bank 2-1: Sub-Effect 6 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 2-2: Sub-Effect 6 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 2-3: Sub-Effect 6 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 2-4: Sub-Effect 6 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 7-1: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 7-2: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 7-3: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 7-4: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 7-5: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 7-6: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 7-7: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 7-8: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 7-9: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 8-1: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 8-2: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
; Bank 8-3: Sub-Effect 5 Do particle motion            : 0000000D     - GPU Module: 00060000    
;
; ******************************************************************************
.include "../../jaguar.inc"
.include "../../blitter.inc"
.include "../vlm.inc"

fx_in_buf            EQU in_buf+$8
results_in_buf       EQU in_buf + $C
loaded_module        EQU  $F03000 ;l RW GPU Internal sRAM
_post_gpu_routine    EQU $15
_object_counter      EQU $18
fx_obj               REGEQU r3
_fxobj               EQU $17
_results             EQU $19

_particleloop_ctr    REGEQU r30
_MaybeLoop           REGEQU r7
_ParticleLoop        REGEQU r0
_TightLoop           REGEQU r10
_enter_particle_loop REGEQU r1
dstoffx_             REGEQU r16
dstoffy_             REGEQU r17
dstoffz_             REGEQU r18
vectorx_             REGEQU r19
vectory_             REGEQU r20
deltaz_              REGEQU r21
cvx_                 REGEQU r22
cvy_                 REGEQU r23
_i2_                 REGEQU r5
_i3_                 REGEQU r22
_i4_                 REGEQU r23
_i5_                 REGEQU r24
phase5_              REGEQU r24
_i1_                 REGEQU r26
coly_                REGEQU r1
colx_                REGEQU r2
dvf_ws_x_            REGEQU r2
i_                   REGEQU r2

; Position to load this module in GPU RAM.
.org $00f03000

; *******************************************************************
;
; *******************************************************************
                   movei   #in_buf+$20, r14
                   movei   #in_buf, r0
                   load    (r0), r1
                   addq    #$c, r1 ; Point at 'results' in in_buf.
                   load    (r1), r2
                   load    (r2), r4
                   load    (r4), r6
                   move    r4, r11

                   ; Get Destination position: X 
                   movei   #dstoffx, r0
                   add     fx_obj, r0
                   load    (r0), dstoffx_

                   ; Get Destination position: Y 
                   movei   #dstoffy, r0
                   add     fx_obj, r0
                   load    (r0), dstoffy_

                   movei   #$C00000, r1

                   ; Get Destination position: Z 
                   movei   #dstoffz, r0
                   add     fx_obj, r0
                   load    (r0), dstoffz_

                   sub     r1, dstoffx_
                   sub     r1, dstoffy_
                   
                   ; Get Vector: X
                   movei   #vectorx, r0
                   add     fx_obj, r0
                   load    (r0), vectorx_

                   ; Get Vector: Y
                   movei   #vectory, r0
                   add     fx_obj, r0
                   load    (r0), vectory_

                   ; Get Delta: Z
                   movei   #deltaz, r0
                   add     fx_obj, r0
                   load    (r0), deltaz_

                   sharq   #4, vectorx_
                   sharq   #4, vectory_
                   sharq   #4, deltaz_
                   
                   ; Get Colour generator vector: X
                   movei   #cvx, r0
                   add     fx_obj, r0
                   load    (r0), cvx_

                   ; Get Colour generator vector: Y
                   movei   #cvy, r0
                   add     fx_obj, r0
                   load    (r0), cvy_
                   
                   ; Get Delta Phase 2
                   movei   #phase5, r0
                   add     fx_obj, r0
                   load    (r0), phase5_

                   shlq    #1, cvx_
                   shlq    #1, cvy_
                   sharq   #1, phase5_
                   add     cvx_, vectorx_
                   add     cvy_, vectory_
                   add     phase5_, deltaz_
                   movei   #32768, r1

                   ; Get Intensity 3
                   movei   #_i3, r0
                   add     fx_obj, r0
                   load    (r0), _i3_

                   ; Get Intensity 4
                   movei   #_i4, r0
                   add     fx_obj, r0
                   load    (r0), _i4_

                   ; Get Intensity 5
                   movei   #_i5, r0
                   add     fx_obj, r0
                   load    (r0), _i5_

                   sub     r1, _i3_
                   sub     r1, _i4_
                   sub     r1, _i5_

                   ; Get Intensity 1
                   movei   #_i1, r0
                   add     fx_obj, r0
                   load    (r0), _i1_

                   bset    #$0, _i1_
                   cmpq    #$0, _i1_
                   jr    nz,DontResetIntensi 
                   nop
                   moveq   #1, _i1_ ; Reset intensity 1

                   ; Get Base colour: Y
DontResetIntensi:  movei   #coly, r0
                   add     fx_obj, r0
                   load    (r0), coly_

                   ; Get Base colour: X
                   movei   #colx, r0
                   add     fx_obj, r0
                   load    (r0), colx_

                   movei   #$1fffff, r29
                   move    colx_, r0
                   move    r29, r30
                   move    r0, r31
                   move    coly_, r25
                   and     r30, r31
                   and     r30, r25
                   shrq    #1, r30
                   sub     r30, r31
                   jr      nn,DontResetColour ; #$00000104
                   nop

                   neg     r31

DontResetColour:   sub     r30, r25
                   jr      nn,DontResetColourY ; #$0000010C
                   nop
                   neg     r25

DontResetColourY:  shrq    #16, r31
                   shrq    #16, r25
                   shlq    #4, r31
                   or      r31, r25
                   shlq    #8, r25

                   ; Get Intensity 2
                   movei   #_i2, r0
                   add     fx_obj, r0
                   load    (r0), _i2_

                   addq    #4, r4
                   shrq    #4, _i2_
                   movei   #MaybeLoop, _MaybeLoop
                   xor     r12, r12
                   movei   #EnterParticleLoop, _enter_particle_loop

                   ; Get  DVF window size: X
                   movei   #dvf_ws_x, r0
                   add     fx_obj, r0
                   load    (r0), dvf_ws_x_

                   subq    #1, dvf_ws_x_

                   ; Update  DVF window size: X
                   movei   #dvf_ws_x, r0
                   add     fx_obj, r0
                   store   dvf_ws_x_, (r0)

                   cmpq    #$0, dvf_ws_x_
                   jump    nn,(_enter_particle_loop)
                   nop

                   ; Reset the DVF Window Size

                   ; Get 'Number of Iterations'
                   movei   #i, r0
                   add     fx_obj, r0
                   load    (r0), i_

                   shrq    #16, i_

                   ; Update the DVF Window Size: X
                   movei   #dvf_ws_x, r0
                   add     fx_obj, r0
                   store   i_, (r0)

                   movei   #500, r30
                   sub     r6, r30
                   jump    n,(_enter_particle_loop)
                   nop

                   addq    #1, r6
                   store   r6, (r11)
                   move    r4, r9
                   movei   #TightLoop, _TightLoop
TightLoop:         addq    #14, r9
                   loadw   (r9), r0
                   cmpq    #$0, r0
                   jr      z,StoreNewData ; #$0000018A
                   nop
                   jump    (_TightLoop)

                   addq    #$12, r9
StoreNewData:      move    r9, r1
                   movei   #65535, r0
                   subq    #14, r1
                   storew  r0, (r9)
                   store   dstoffx_, (r1)
                   addq    #4, r1
                   store   dstoffy_, (r1)
                   addq    #4, r1
                   store   dstoffz_, (r1)
                   addq    #4, r1
                   storew  r25, (r1)
                   addq    #2, r1
                   storew  _i1_, (r1)
                   addq    #2, r1
                   store   vectorx_, (r1)
                   addq    #4, r1
                   store   vectory_, (r1)
                   addq    #4, r1
                   store   deltaz_, (r1)
                   addq    #$12, r9

                   ; -------------------------------------------------------------------
                   ; Loop
                   ; -------------------------------------------------------------------
EnterParticleLoop: movei   #511, _particleloop_ctr ; Loop 512 times.
ParticleLoop:      addq    #$e, r4
                   loadw   (r4), r8
                   cmpq    #$0, r8
                   jump    z,(_MaybeLoop)
                   nop
                   move    r4, r0
                   move    r4, r1
                   subq    #$e, r0
                   addq    #2, r1
                   load    (r1), r20
                   load    (r0), r21
                   add     r20, r21
                   store   r21, (r0)
                   add     _i3_, r20
                   addq    #4, r0
                   store   r20, (r1)
                   addq    #4, r1
                   load    (r1), r20
                   load    (r0), r21
                   add     r20, r21
                   store   r21, (r0)
                   add     _i4_, r20
                   addq    #4, r0
                   store   r20, (r1)
                   addq    #4, r1
                   load    (r1), r20
                   load    (r0), r21
                   add     r20, r21
                   store   r21, (r0)
                   add     _i5_, r20
                   addq    #4, r0
                   store   r20, (r1)
                   addq    #4, r1
                   sub     _i2_, r8
                   cmpq    #1, r8
                   jr      nn,SkipR8 ; #$0000020A
                   nop
                   xor     r8, r8
                   addq    #1, r12
SkipR8:            storew  r8, (r4)
                   subq    #1, r6
MaybeLoop:         movei   #ParticleLoop, _ParticleLoop
                   addq    #$12, r4
                   subq    #1, _particleloop_ctr ; Decrement the loop counter.
                   jr      n,ReturnToOmega ; If we've reached zero, return to omega.gas.
                   cmpq    #$0, r6 ; Is it zero yet?
                   jump    nn,(_ParticleLoop) ; If not, loop again to ParticleLoop.
                   nop

; *******************************************************************
; ReturnToOmega
; *******************************************************************
ReturnToOmega:     load    (r11), r0
                   sub     r12, r0
                   store   r0, (r11)
                   load    (r14+_post_gpu_routine), r0
                   jump    (r0)
                   nop
                   add     r0, r0
                   add     r0, r0
; vim:ft=asm68k ts=20
