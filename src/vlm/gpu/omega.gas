; *******************************************************************
; omega.gas
; 
; *******************************************************************
.include "../../jaguar.inc"
.include "../../blitter.inc"
.include "../vlm.inc"
.org $00f03a78

; *******************************************************************
; 
; *******************************************************************
fx_in_buf EQU in_buf+$8
results_in_buf EQU in_buf + $C
LOADED_MODULE		equ	$F03000	;l RW GPU Internal sRAM

; *******************************************************************
; fmult
; *******************************************************************
        MACRO fmult     ;multiply 2 thangs, uses r2-r4, returns in first reg.
        move \2,r30    ;(preserves second Thang)
        moveq #0,r27
        move r27,r28
        abs \1
        addc r28,r27
        abs \2
        addc r28,r27
        move \2,r28
        mult \1,r28
        move \1,r29
        shrq #16,r28
        shrq #16,r29
        mult \2,r29
        shrq #16,\2
        add r29,r28
        move \2,r29
        mult \1,r29
        shrq #16,\1
        add r29,r28
        mult \2,\1
        shlq #16,\1
        add r28,\1
        btst #0,r27
        jr z,\~fmptt
        move r30,\2
        neg \1
\~fmptt:
        ENDM
; *******************************************************************
; omega_start
; *******************************************************************
omega_start:
                    movei   #in_buf+$20, r14

                    ;Set the 'sync' signal.
SetSync:            movei   #sync, r0 ; Point r0 at sync.
                    moveq   #1, r1 ; Load 1 to r1.
                    store   r1, (r0) ; Store 1 in sync.
                    ; Wait for sync to get updated to 1.
LoopUntilSet:       load    (r0), r1 ; Check sync.
                    cmpq    #$0, r1 ; Is it still zero?
                    jr      nz,LoopUntilSet ; If so, loop again.
                    nop

                    movei   #fx_in_buf, r2
                    moveq   #$5, r1
                    load    (r2), r0
                    or      r1, r1
                    store   r1, (r14+$18)
routine17:          movei   #routine4, r2
                    load    (r0), r3
                    addq    #4, r0
                    cmpq    #$0, r3
                    jump    z,(r2)
                    nop
                    or      r3, r3
                    or      r0, r0
                    store   r3, (r14+$17)
                    store   r0, (r14+$19)
                    movei   #$000a0000, r1
                    movei   #routine3, r2
                    movei   #RunGPUModule, r0
                    or      r2, r2
                    store   r2, (r14+$15)
                    jump    (r0)
                    nop
routine3:           movei   #routine2, r0
                    cmpq    #$0, r1
                    jump    z,(r0)
                    nop
routine35:          move    r26, r20
                    movei   #$0000003f, r1
                    and     r1, r20
                    movei   #$00000600, r0
                    mult    r0, r20
                    add     r27, r20
                    move    r20, r3
                    movei   #routine5, r1
                    movei   #$000000f8, r0
                    add     r3, r0
                    load    (r0), r2
                    cmpq    #$0, r2
                    jump    z,(r1)
                    nop
                    movei   #dscreen, r0
                    load    (r0), r1
                    movei   #$00000000, r0
                    add     r3, r0
                    store   r1, (r0)
                    movei   #$000000fc, r0
                    add     r3, r0
                    load    (r0), r1
                    moveta  r26, r26
                    moveta  r27, r27
                    moveta  r24, r24
                    moveta  r25, r25
                    movei   #routine6, r2
                    movei   #RunGPUModule, r0
                    or      r2, r2
                    store   r2, (r14+$15)
                    jump    (r0)
                    nop

routine6:           movefa  r3, r3
                    movefa  r14, r14
                    movefa  r26, r26
                    movefa  r27, r27
                    movefa  r24, r24
                    movefa  r25, r25
routine5:           add     r25, r26
                    movei   #routine35, r0
                    subq    #1, r24
                    jump    nz,(r0)
                    nop
                    movefa  r29, r29
                    addq    #2, r29
                    loadw   (r29), r0
                    addq    #1, r0
                    storew  r0, (r29)
routine2:
                    load    (r14+$17), r3
                    movei   #draw_screen, r0
                    load    (r0), r1
                    movei   #$00000000, r0
                    add     r3, r0
                    store   r1, (r0)
                    movei   #trig, r0
                    load    (r0), r1
                    movei   #$000000f0, r0
                    add     r3, r0
                    store   r1, (r0)
                    xor     r1, r1
                    movei   #screen_ready+$8, r0
                    store   r1, (r0)
                    movei   #$000000fc, r0
                    add     r3, r0
                    load    (r0), r1
                    movei   #routine36, r2
                    movei   #RunGPUModule, r0
                    or      r2, r2
                    store   r2, (r14+$15)
                    jump    (r0)
                    nop
routine36:          movefa  r3, r3
                    movefa  r14, r14
                    movei   #$00000300, r0
                    moveq   #$7, r1
                    add     r0, r3
                    movei   #routine7, r20
                    move    r3, r22
routine7:           load    (r22), r21
                    addq    #4, r22
                    load    (r22), r0
                    addq    #8, r22
                    load    (r22), r4
                    subq    #$c, r22
                    cmpq    #$6, r4
                    jr    nz,routine123 ; #$0000016C
                    nop
                    xor     r0, r0
routine123:
                    add     r0, r21
                    store   r21, (r22)
                    addq    #16, r22
                    subq    #1, r1
                    jump    nn,(r20)
                    nop
                    movei   #in_buf+4, r0 ; oscvals
                    load    (r0), r4
                    addq    #16, r0
                    movei   #$0000ffff, r20
                    movei   #$000000ff, r21
                    movei   #8, r22
                    movei   #routine9, r23
                    movei   #routine11, r24
routine9:           load    (r3), r10
                    addq    #8, r3
                    load    (r3), r11
                    addq    #4, r3
                    load    (r3), r12
                    addq    #4, r3
                    cmpq    #$7, r12
                    jr    n,routine147 ; #ZOFFS7
                    move    r12, r1
                    subq    #$7, r1
                    load    (r0), r2
                    shlq    #2, r1
                    subq    #8, r2
                    add     r1, r2
                    load    (r2), r12
                    jump    (r24)
routine147:
                    cmpq    #PITCH8, r12
                    jr    nz,routine157 ; #$000001CA
                    move    r10, r12
                    shrq    #8, r12
                    jump    (r24)
routine157:
                    move    r10, r15
                    shrq    #16, r10
                    and     r21, r10
                    add     r10, r11
                    loadb   (r11), r12
                    addq    #1, r11
                    loadb   (r11), r13
                    shrq    #8, r15
                    sub     r12, r13
                    and     r21, r15
                    shlq    #8, r12
                    imult   r15, r13
                    add     r13, r12
routine11:          storew  r12, (r4)
                    addq    #2, r4
                    subq    #1, r22
                    jump    nz,(r23)
                    nop
                    movei   #in_buf+$c, r0 ; results
                    load    (r14+$17), r22
                    movei   #$0000003f, r26
                    movei   #ZOFFS4, r2
                    move    r22, r23
                    move    r22, r25
                    add     r2, r25
                    add     r2, r23
                    add     r2, r25
                    load    (r0), r24
routine16:          loadw   (r23), r1
                    movei   #routine12, r2
                    addq    #2, r23
                    cmpq    #$0, r1
                    jump    z,(r2)
                    shlq    #16, r1
                    loadw   (r23), r2
                    or      r2, r1
                    movei   #$0000003f, r0
                    sub     r26, r0
                    shlq    #PITCH8, r0
                    move    r0, r2
                    shlq    #2, r0
                    add     r2, r0
                    movei   #in_buf+$10, r2 ; pbinfo
                    load    (r2), r27
                    add     r27, r0
                    moveq   #$1e, r27
                    add     r27, r0
                    subq    #$c, r2
                    load    (r2), r8
                    move    r1, r28
                    move    r25, r21
                    move    r0, r4
                    move    r8, r16
                    move    r28, r19
                    addq    #16, r16
                    shrq    #16, r28
                    shrq    #1, r19
                    addq    #16, r16
                    moveq   #8, r3
                    movei   #$00007fff, r5
                    movei   #routine14, r7
                    and     r5, r19
                    move    r5, r27
                    shlq    #1, r27
                    movei   #routine15, r10
                    movei   #TOPNEN, r17
                    xor     r18, r18
routine14:          btst    #$0, r28
                    jump    z,(r10)
                    nop
                    loadw   (r8), r1
                    sub     r17, r1
                    imult   r1, r5
                    sharq   #16, r5
                    add     r5, r18
routine15:          btst    #8, r28
                    jr    z,GPULoad7 ; #$00000290
                    shrq    #1, r28
                    loadw   (r16), r27
GPULoad7:
                    addq    #2, r16
                    subq    #1, r3
                    jump    nz,(r7)
                    addq    #2, r8
                    mult    r27, r19
                    shrq    #16, r19
                    imult   r19, r18
                    sharq   #$f, r18
                    cmpq    #$0, r18
                    jr    nn,routine249 ; #$000002A6
                    add     r17, r18
routine249:
                    or      r18, r18
                    store   r18, (r14+$16)
                    move    r18, r5
                    load    (r14+$17), r6
                    addq    #PITCH8, r4
                    loadb   (r4), r9
                    addq    #1, r4
                    loadw   (r4), r0
                    addq    #2, r4
                    shlq    #2, r0
                    load    (r4), r8
                    add     r0, r6
                    move    r8, r10
                    xor     r7, r7
                    shrq    #1, r10
                    btst    #$7, r9
                    jr    z,routine267 ; #$000002CC
                    bclr    #$7, r9
                    moveq   #1, r7
routine267:
                    movei   #routine33, r0
                    cmpq    #2, r9
                    jump    z,(r0)
                    nop
                    mult    r5, r8
                    shrq    #16, r8
                    movei   #routine34, r0
                    jump    (r0)
                    nop

routine33:          fmult r8,r5

routine302:
                    cmpq    #$0, r21
                    jr    nz,routine306 ; #$00000324
                    nop
routine34:          cmpq    #1, r7
                    jr    nz,routine309 ; #$00000328
routine306:
                    nop
                    sub     r10, r8
routine309:
                    cmpq    #$0, r21
                    jr    z,routine313 ; #$00000332
                    nop
                    load    (r21), r0
                    add     r0, r8
routine313:
                    store   r8, (r6)
                    load    (r14+$16), r0
                    or      r0, r0
                    storew  r0, (r24)
routine12:          addq    #2, r24
                    addq    #2, r23
                    addq    #4, r25
                    addq    #4, r22
                    movei   #routine16, r0
                    subq    #1, r26
                    jump    nn,(r0)
                    nop
                    load    (r14+$19), r0
routine4:
                    load    (r14+$18), r2
                    subq    #1, r2
                    movei   #routine17, r3
                    or      r2, r2
                    store   r2, (r14+$18)
                    jump    nn,(r3)
                    nop

                    movei   #SetScreenReady, r2
                    movei   #$30000, r1
                    movei   #RunGPUModule, r0
                    or      r2, r2
                    store   r2, (r14+$15)
                    jump    (r0)
                    nop

                    ; Signal that a screen is ready for display
                    ; by setting screen_ready.
SetScreenReady:     moveq   #1, r0 ; Store 1 in r0.
                    movei   #screen_ready, r1 ; Point r1 at screen_ready.
                    store   r0, (r1) ; Store 1 in screen_ready.
                    movei   #SetSync, r0 ; Loop back to top!
                    jump    (r0) ; Loop back to top!
                    nop

; *******************************************************************
; waitblit
; *******************************************************************
        MACRO waitblit  ; Wait for the GPULoad to stop
      \~waitt:
        load (blit_cmd),r21
        btst #0,r21
        jr z,\~waitt
        nop
        ENDM

; *******************************************************************
; GPULoad
; Load the selected GPU module.
;
; There is a trick at work here. The 'omega' module
; orchestrates the loading of the others. Notice that 'omega' is loaded to 
; address $F03A78 in the GPU's RAM. It loads all the other modules as they
; are required. It can do this because all the others get loaded to $F03000 in 
; the GPU's RAM and none of them is longer than $A78 bytes! This means
; that 'omega' can stay resident in RAM at $F03a78 and load the others to $F03000 
; without getting overwritten by them!
; *******************************************************************
GPULoad:
                    blit_cmd REGEQU r20
                    a1_base REGEQU r20
                    a2_base REGEQU r21
                    source_screen REGEQU r1

                    ; Make sure the blitter has stopped.
                    movei   #B_CMD, r20
                    waitblit

                    movei   #A1_BASE, a1_base
                    movei   #A2_BASE, a2_base

                    ; Set up the a1_base address.
                    move    source_screen, r25
                    movei   #$fffffff8, r26
                    move    r25, r24
                    and     r26, r25
                    sub     r25, r24
                    store   r25, (a1_base)
                    addq    #4, a1_base
                    movei   #$00004020, r22
                    store   r22, (a1_base)
                    addq    #8, a1_base
                    shrq    #1, r24
                    store   r24, (a1_base)

                    ; Set up the a2_base address.
                    move    r0, r25
                    move    r0, r23
                    and     r26, r25
                    sub     r25, r23
                    store   r25, (a2_base)
                    addq    #4, a2_base
                    store   r22, (a2_base)
                    addq    #8, a2_base
                    shrq    #1, r23
                    store   r23, (a2_base)

                    ; Set up the counter.
                    shrq    #1, r2
                    movei   #B_COUNT, r25
                    bset    #16, r2
                    store   r2, (r25)

                    ; Make the blit command.
                    movei  #SRCEN|LFU_AN|LFU_A,r22
                    or      r23, r24 ; Are a1 and a2 the same?
                    jr      z,JustBlit ; If so, adjust blitter command.
                    nop
.aligned:           movei  #SRCEN|SRCENX|LFU_AN|LFU_A,r22

JustBlit:           movei   #B_CMD, blit_cmd ; Point blit_cmd to the blit command register.
                    store   r22, (blit_cmd) ; Issue the blit command.
                    waitblit ; Wait for it to finish.
                    load    (r14+$15), r20
                    jump    (r20)
                    nop

; *******************************************************************
; RunGPUModule
; Figure out which GPU module we've been asked to run, load it using
; GPULoad and then run it.
; *******************************************************************
RunGPUModule:           
                    gpu_load REGEQU r6

                    ; Check if the module has already been loaded?
                    moveta  r3, r3
                    moveta  r14, r14
                    move    r1, r4
                    move    r1, r5
                    shlq    #16, r4
                    shrq    #16, r5
                    shrq    #16, r4
                    movei   #screen_ready+$c, r0
                    store   r4, (r0)
                    movei   #LOADED_MODULE, r0
                    movei   #previously_loaded_module, r1
                    load    (r1), r2
                    cmp     r2, r5
                    jump    z,(r0)
                    nop
                    store   r5, (r1)

                    movei   #mods, r0 ; Point r0 at the list of modules.

                    ; Select which module to use.
                    load    (r0), r4
                    shlq    #2, r5
                    add     r4, r5
                    load    (r5), r4
                    load    (r4), r1
                    addq    #4, r4
                    load    (r4), r2
                    addq    #4, r4
                    move    r4, r0 ; Point r0 at our selected module in 'mods'.

                    ; Load the selected GPU module.
                    load    (r14+$15), r4 ; Store our 'post-GPU' routine in r4.
                    movei   #GPURun, r5
                    movei   #GPULoad, gpu_load
                    movei   #$8000, r20
                    or      r5, r5
                    add     r20, source_screen
                    store   r5, (r14+$15)
                    jump    (gpu_load)
                    nop

                    ; This invokes the 'post-GPU' routine somehow!
GPURun:             or      r4, r4
                    store   r4, (r14+$15)
                    movei   #LOADED_MODULE, r0
                    jump    (r0)
                    nop
                    dc.b    $00,$00,$00,$00,$00,$00
previously_loaded_module:
                    dc.b    $ff,$ff,$00,$00,$00,$00,$00,$00
; vim:ft=asm68k ts=2
