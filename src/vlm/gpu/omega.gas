; ******************************************************************************
; This is Jeff Minter's Virtual Light Machine for the Atari Jaguar.
;
; %TuuuuuuuuuuuuuuuuuunTj-   _f555555555F6{         %uLLLLL7'..       ..%nLLLLuu
; _;^)iiiiiiiiiiiiiii)!#j- .`_?[[[[[[[[12m{         _;;/"//|1o)      `[ol//"/*Tu
;   ./""""""""""""""""}Jj- .`_l{sssssss*2m{            ':'':|)la!. <a[\)=''''lTu
;  .`=+/////////////=^*Cu_ .`_xlllllllcs3m{           .'''''''+>)?[l><'''''''lTu
;   .__,^^========^=r*x)<. .`_i%vvvvvvvc3ms           ._''''''___vx"__''''''_lTu
;      _,,^^^^^^^,';L#%    .`_<>>>>>>>>v2mL}}}}**r`   .__________--_________-cTu
;      `__:::,,::"ii{*|    .`_|\))))))|<toozzz7Cq2_   .---------------------`cTu
;       ..-__''-.cT7`      .`-+/////////======^!6y_   .``````````````````````cTu
;       ..``-__""la]-      .`-;^^^^^^^^^^^^^^^:!qy_   .`````````````````````.c#n
;         ..``'tzi         .``''''''''''''''''-rwL_    ..................... ioa
;            ..``.         .`````````````````  .``                           ...
;
; omega.gas
;
; This module is loaded from 'titlescr' in vlm.s. It is responsible for 
; orchestrating the VLM's GPU workload.
; 
; We iterate through all 6 fx_objs in the effect and load and run the GPU
; module associated with each. Before an fxobj's module is run we run
; the dbeast module first. When all 6 fxobjs have been 'run', we run
; the 'psi' GPU module to finish off.
;
; ******************************************************************************

.include "../../jaguar.inc"
.include "../../blitter.inc"
.include "../vlm.inc"

fx_in_buf         EQU in_buf+$8
results_in_buf    EQU in_buf + $C
loaded_module     EQU  $F03000 ;l RW GPU Internal sRAM
_post_gpu_routine EQU $15
_object_counter   EQU $18
fx_obj            REGEQU r3
_fxobj            EQU $17
_results          EQU $19
_dbeast           EQU $a0000
_psi              EQU $30000
_fxobj_r22        REGEQU r22
_fxobj_r23        REGEQU r23
_fxobj_r25        REGEQU r25
_bigloop_ctr      REGEQU r26
_results_r24      REGEQU r24

.org $00f03a78
; *******************************************************************
; MACROS
; Some macros used by omega.gas
; *******************************************************************
; -------------------------------------------------------------------
; fmult
; -------------------------------------------------------------------
        MACRO fmult     ;multiply 2 thangs, uses r2-r4, returns in first reg.
        move \2,r30    ;(preserves second Thang)
        moveq #0,r27
        move r27,r28
        abs \1
        addc r28,r27
        abs \2
        addc r28,r27
        move \2,r28
        mult \1,r28
        move \1,r29
        shrq #16,r28
        shrq #16,r29
        mult \2,r29
        shrq #16,\2
        add r29,r28
        move \2,r29
        mult \1,r29
        shrq #16,\1
        add r29,r28
        mult \2,\1
        shlq #16,\1
        add r28,\1
        btst #0,r27
        jr z,\~fmptt
        move r30,\2
        neg \1
\~fmptt:
        ENDM

; -------------------------------------------------------------------
; waitblit
; -------------------------------------------------------------------
        MACRO waitblit  ; Wait for the GPULoad to stop
      \~waitt:
        load (blit_cmd),r21
        btst #0,r21
        jr z,\~waitt
        nop
        ENDM

; *******************************************************************
; RunFXObjModules
;
; Iterate through all 6 fx_objs in the effect and load and run the GPU
; module associated with each. Before an fxobj's module is run we run
; the dbeast module first. When all 6 fxobjs have been 'run', we run
; the 'psi' GPU module to finish off.
;
; It looks like this is a 'main loop' and will keep running forever,
; signalling 'screen ready', then cycling back to RunFXObjModulesLoop to start again
;  after updating each of the 6 fxobjs.
; *******************************************************************

RunFXObjModules:    movei   #in_buf+$20, r14

                    ; ----------------------------------------------------------------
                    ; The top of the main 'run fx obj' modules loop.
                    ; This will keep looping, running the GPU modules for all 6 fx objs
                    ; in the effect, setting the 'sync' and 'screen_ready' signals at 
                    ; each iteration.
                    ; ----------------------------------------------------------------
RunFXObjModulesLoop:
                    ; Set the 'sync' signal.
                    movei   #sync, r0                   ; Point r0 at sync.
                    moveq   #1, r1                      ; Load 1 to r1.
                    store   r1, (r0)                    ; Store 1 in sync.
                    
                    ; ----------------------------------------------------------------
                    ; We've set sync to '1' so we wait for Frame to signal that it is
                    ; ready for a new frame by resetting 'sync' to 0.
                    ; ----------------------------------------------------------------
WaitForSync:        load    (r0), r1                    ; Check sync.
                    cmpq    #$0, r1                     ; Is it still non-zero?
                    jr      nz,WaitForSync              ; If so, loop again.
                    nop
                    
                    ; 'sync' has been reset to zero so its safe to build a new frame.
                    ; Loop through all 6 fx objects.
                    movei   #fx_in_buf, r2              ; Point r2 at the sub-effect fx obj.
                    moveq   #5, r1                      ; We are going to loop through all 6 fx objects.
                    load    (r2), r0                    ; Point r0 at the sub-effect fx obj.
                    or      r1, r1                      ; Make sure current counter is loaded.
                    store   r1, (r14+_object_counter)   ; Store the current count.
                    
                    ; ----------------------------------------------------------------
                    ; Loop through all 6 fx objects.
                    ; ----------------------------------------------------------------
LoopThroughFXObjs:  movei   #GoToNext, r2
                    load    (r0), fx_obj                ; Point r3 at the fxobject.
                    addq    #4, r0                      ; Add 4 so that r0 points at the results object.
                    cmpq    #$0, fx_obj                 ; Is the fx object zeros?
                    jump    z,(r2)                      ; If so, go to GoToNext.
                    nop
                    
                    ; We have an fx object to process.
                    or      fx_obj, fx_obj              ; Make sure fxobj is loaded.
                    or      r0, r0                      ; Make sure results object is loaded.
                    store   fx_obj, (r14+_fxobj)        ; Stash the fx object.
                    store   r0, (r14+_results)          ; Stash the results object.
                    
                    ; ----------------------------------------------------------------
                    ; Run the dbeast module first.
                    ; ----------------------------------------------------------------
                    movei   #_dbeast, r1                  ; Index into 'mods' -> dbeast
                    movei   #FinishedDBeast, r2           ; Pick up at FinishedDBeast when finished.
                    movei   #RunGPUModule, r0
                    or      r2, r2                        ; Make sure ResumeLoop is ready.
                    store   r2, (r14+_post_gpu_routine)   ; Store it as our post-GPU routine.
                    jump    (r0)                          ; Run the dbeast GPU module.
                    nop

                    ; ----------------------------------------------------------------
                    ; When finished running the dbeast module we resume here.
                    ; Whatever we're checking here, it if it's true we skip
                    ; the main module run loop below.
                    ; ----------------------------------------------------------------
FinishedDBeast:     movei   #PostMainModuleRun, r0
                    cmpq    #$0, r1
                    jump    z,(r0)
                    nop

                    ; ----------------------------------------------------------------
                    ; Main Module Run Loop
                    ; Keep loopin in here until something.
                    ; This is an inner loop that keeps running the fx obj's GPU module.
                    ; It depends on decrementring r24 to zero before it stops.
                    ; ----------------------------------------------------------------
MainModuleRunLoop:  move    r26, r20
                    movei   #$0000003f, r1
                    and     r1, r20
                    movei   #$00000600, r0
                    mult    r0, r20
                    add     r27, r20
                    move    r20, r3

                    movei   #JumpToNext, r1
                    movei   #info, r0
                    add     r3, r0
                    load    (r0), r2
                    cmpq    #$0, r2
                    jump    z,(r1)
                    nop

                    ; Inspect the fxobj to get the module to run. At offset $FC in fxobj we will find
                    ; the 'gpu' index. When shifted 16 bits to the left this gives us an index into the
                    ; 'mods' array. So for example '$90000' is index 9 into the 10th object in 'mods',
                    ; which is 'shu'.
                    movei   #dscreen, r0                  ; Put dscreen in r0..
                    load    (r0), r1                      ; .. and point r1 at the address of dscreen.
                    movei   #$00000000, r0                ; Make r0 zero.
                    add     fx_obj, r0                    ; And make r0 point to the first byte in fx_obj.
                    store   r1, (r0)                      ; Store pointer to draw screen in first 4 bytes of fx_obj.
                    movei   #gpu, r0                      ; Put the offset for the GPU routine ($FC/252) in r0.
                    add     r3, r0                        ; Add the fxobj address to it to get our index for the gpu module in 'mods'.
                    load    (r0), r1                      ; Point r1 at our index into 'mods'.
                    moveta  r26, r26
                    moveta  r27, r27
                    moveta  r24, r24
                    moveta  r25, r25
                    movei   #FinishedGPUModule, r2
                    movei   #RunGPUModule, r0
                    or      r2, r2
                    store   r2, (r14+_post_gpu_routine)
                    jump    (r0)
                    nop

                    ; We come back here after we finish running the GPU module loaded above.
FinishedGPUModule:  movefa  r3, r3
                    movefa  r14, r14
                    movefa  r26, r26
                    movefa  r27, r27
                    movefa  r24, r24
                    movefa  r25, r25

JumpToNext:         add     r25, r26
                    movei   #MainModuleRunLoop, r0
                    subq    #1, r24
                    jump    nz,(r0) ; Keep looping until r24 reaches zero.
                    nop
                    
                    ; ----------------------------------------------------------------
                    ; Do more stuff
                    ; ----------------------------------------------------------------
                    movefa  r29, r29
                    addq    #2, r29
                    loadw   (r29), r0
                    addq    #1, r0
                    storew  r0, (r29)

                    ; ----------------------------------------------------------------
                    ; Run the sub-effect's module again, but just the once.
                    ; ----------------------------------------------------------------
PostMainModuleRun:  ; Store draw_screen at the start of the fxobj for some reason.
                    load    (r14+_fxobj), fx_obj   ; Load the fx obj to fx_obj (r3).
                    movei   #draw_screen, r0       ; Store draw_screen..
                    load    (r0), r1               ; .. in r1.
                    movei   #$00000000, r0         ; Point r0
                    add     fx_obj, r0             ; .. at fx_obj.
                    store   r1, (r0)               ; Store pointer to draw screen in first 4 bytes of fx_obj.

                    _trig REGEQU r1
                    ; Store trig in the 'height' slot in the fxobj.
                    movei   #trig, r0                     ; Point r1..
                    load    (r0), _trig                      ; .. at 'trig'.
                    movei   #height, r0                   ; Get the offset to 'height' in fxobj..
                    add     fx_obj, r0                    ; .. add the fx_obj address to point r0 at its position.
                    store   _trig, (r0)                      ; Store 'trig' in the 'height' of the fxobj.
                    xor     _trig, _trig                        ; Make sure r1 is ready.

                    movei   #draw_screen+$4, r0
                    store   _trig, (r0)

                    ; Run the GPU module for the fxobj using the height and screen provided above.
                    movei   #gpu, r0                      ; Put the offset to the gpu index in r0.
                    add     fx_obj, r0                    ; Add the fx_obj address to it.
                    load    (r0), r1                      ; Store the gpu index in r1.
                    movei   #UpdateOSCBank, r2
                    movei   #RunGPUModule, r0
                    or      r2, r2
                    store   r2, (r14+_post_gpu_routine)   ; Stash the post-GPU routine.
                    jump    (r0)                          ; Load the fx obj's GPU module.
                    nop

                    _update_osc_loop      REGEQU r20
                    fx_obj_oscbank        REGEQU r3
                    fx_obj_oscbank_curpos REGEQU r22

                    ; ----------------------------------------------------------------
                    ; Update the oscbank in the fxobj.
                    ; Each entry in the oscbank consists of:
                    ;   Element 1 - Bytes 1-4 - Initial Value
                    ;   Element 2 - Bytes 4-8 - Value to increment 'Initial Value' by.
                    ; This loop increments Element 1 with the value of Element 2 for each
                    ; entry.
                    ; ----------------------------------------------------------------
UpdateOSCBank:      movefa  fx_obj, fx_obj
                    movefa  r14, r14
                    movei   #768, r0 ; Store 768 in r0, this will help point us to the oscbank in the fxobj.

                    moveq   #$7, r1                      ; Loop 8 times.
                    add     r0, fx_obj_oscbank                   ; Point to the oscbank in the fxobj.
                    movei   #OSCLoop, _update_osc_loop   ; Set up our loop
                    move    fx_obj_oscbank, fx_obj_oscbank_curpos           ; Stash start position in oscbank.
OSCLoop:            load    (fx_obj_oscbank_curpos), r21            ; Store the first element of the oscbank entry in r21.
                    addq    #4, fx_obj_oscbank_curpos               ; Move to the second element of this oscbank entry.
                    load    (fx_obj_oscbank_curpos), r0             ; Store it in r0.
                    addq    #8, fx_obj_oscbank_curpos               ; Move to the third element of this oscbank entry.
                    load    (fx_obj_oscbank_curpos), r4             ; Store it in r4.
                    subq    #12, fx_obj_oscbank_curpos              ; Point bank to the start of this oscbank entry.
                    cmpq    #$6, r4
                    jr    nz,SkipXOR                     ; #$0000016C
                    nop
                    xor     r0, r0
SkipXOR:            add     r0, r21                      ; Increment the initial value (r21) by the increment (r0).
                    store   r21, (fx_obj_oscbank_curpos)            ; Store the updated value.
                    addq    #16, fx_obj_oscbank_curpos              ; Move to the next entry in the oscbank.
                    subq    #1, r1
                    jump    nn,(_update_osc_loop)
                    nop

                    _osc_vals_loop REGEQU r23
                    _osc_loop_counter REGEQU r22
                    _osc_vals REGEQU r4
                    _delayf REGEQU r0
                    _next_osc_val REGEQU r24
                    _oscbank_cur REGEQU r10
                    _oscbank_sines REGEQU r11
                    _oscbank_4 REGEQU r12
                    _255 REGEQU r21
                    _65535 REGEQU r20

                    ; ----------------------------------------------------------------
                    ; Use the updated OSC Bank from above to populate the 'oscvals'.
                    ; 
                    ; ----------------------------------------------------------------
                    movei   #in_buf+4, r0 ; Load address for oscvals to r0.
                    load    (r0), _osc_vals ; Store the address in r4.
                    addq    #16, _delayf ; Now point r0 at 'delayf' in the in_buf.
                    movei   #65535, r20
                    movei   #255, _255
                    movei   #8, _osc_loop_counter ; Loop 9 times
                    movei   #OSCValsLoop, _osc_vals_loop
                    movei   #NextOSCVal, _next_osc_val
OSCValsLoop:        load    (fx_obj_oscbank), _oscbank_cur
                    addq    #8, fx_obj_oscbank ; Advance to p_sines element in entry.
                    load    (fx_obj_oscbank), _oscbank_sines ; Store in _oscbank_sines
                    addq    #4, fx_obj_oscbank ; Advance to last element in entry
                    load    (fx_obj_oscbank), _oscbank_4 ; Store in _oscbank_4
                    addq    #4, fx_obj_oscbank ; Advance fx_obj_oscbank to the position of the next entry.
                    cmpq    #7, _oscbank_4
                    jr    n,routine7 ; #ZOFFS7
                    move    _oscbank_4, r1
                    subq    #7, r1
                    load    (_delayf), r2
                    shlq    #2, r1
                    subq    #8, r2
                    add     r1, r2
                    load    (r2), _oscbank_4
                    jump    (_next_osc_val)
routine7:           cmpq    #3, _oscbank_4
                    jr    nz,routine157 ; #$000001CA
                    move    _oscbank_cur, _oscbank_4
                    shrq    #8, _oscbank_4
                    jump    (_next_osc_val)
routine157:         move    _oscbank_cur, r15
                    shrq    #16, _oscbank_cur
                    and     _255, _oscbank_cur
                    add     _oscbank_cur, _oscbank_sines
                    loadb   (_oscbank_sines), _oscbank_4
                    addq    #1, _oscbank_sines
                    loadb   (_oscbank_sines), r13
                    shrq    #8, r15
                    sub     _oscbank_4, r13
                    and     _255, r15
                    shlq    #8, _oscbank_4
                    imult   r15, r13
                    add     r13, _oscbank_4
NextOSCVal:         storew  _oscbank_4, (_osc_vals) ; Store _oscbank_4 in oscvals.
                    addq    #2, _osc_vals ; Advance two bytes in oscvals.
                    subq    #1, _osc_loop_counter ; Decrement our counter.
                    jump    nz,(_osc_vals_loop) ; Loop if not zero yet.
                    nop

                    ; ----------------------------------------------------------------
                    ; A Big Inner Loop of some sort.
                    ; A big loop controlled by r26, which we do 64 times.
                    ; I suspect we're doing something to each of the 64 values
                    ; in the first 256 bytes of the fxobj?
                    ; ----------------------------------------------------------------
                    movei   #results_in_buf, r0 ; results
                    load    (r14+_fxobj), _fxobj_r22 ; Point r22 at the fxobj
                    movei   #63, _bigloop_ctr
                    movei   #256, r2
                    move    _fxobj_r22, _fxobj_r23
                    move    _fxobj_r22, _fxobj_r25
                    add     r2, _fxobj_r25
                    add     r2, _fxobj_r23
                    add     r2, _fxobj_r25
                    load    (r0), _results_r24
BigLoop64:          loadw   (_fxobj_r23), r1
                    movei   #BigLoopSkipToNext, r2
                    addq    #2, _fxobj_r23
                    cmpq    #$0, r1
                    jump    z,(r2)

                    shlq    #16, r1
                    loadw   (_fxobj_r23), r2
                    or      r2, r1
                    movei   #$0000003f, r0
                    sub     _bigloop_ctr, r0
                    shlq    #PITCH8, r0
                    move    r0, r2
                    shlq    #2, r0
                    add     r2, r0
                    movei   #in_buf+$10, r2 ; pbinfo
                    load    (r2), r27
                    add     r27, r0
                    moveq   #$1e, r27
                    add     r27, r0
                    subq    #$c, r2
                    load    (r2), r8
                    move    r1, r28
                    move    _fxobj_r25, r21
                    move    r0, r4
                    move    r8, r16
                    move    r28, r19
                    addq    #16, r16
                    shrq    #16, r28
                    shrq    #1, r19
                    addq    #16, r16

                    ; ----------------------
                    ; A little inner loop.
                    ; ----------------------
                    moveq   #8, r3
                    movei   #$00007fff, r5
                    movei   #LittleInnerLoop, r7
                    and     r5, r19
                    move    r5, r27
                    shlq    #1, r27
                    movei   #routine15, r10
                    movei   #TOPNEN, r17
                    xor     r18, r18
LittleInnerLoop:    btst    #$0, r28
                    jump    z,(r10)
                    nop
                    loadw   (r8), r1
                    sub     r17, r1
                    imult   r1, r5
                    sharq   #16, r5
                    add     r5, r18
routine15:          btst    #8, r28
                    jr    z,SkipTwoLines ; #$00000290
                    shrq    #1, r28
                    loadw   (r16), r27
SkipTwoLines:       addq    #2, r16
                    subq    #1, r3
                    jump    nz,(r7)
                    ; ----------------------
                    ; End of Little Inner Loop
                    ; ---------------------

                    ; ----------------------------------------------------------------
                    ; Something something
                    ; ----------------------------------------------------------------
                    addq    #2, r8
                    mult    r27, r19
                    shrq    #16, r19
                    imult   r19, r18
                    sharq   #$f, r18
                    cmpq    #$0, r18
                    jr    nn,routine249 ; #$000002A6
                    add     r17, r18
routine249:         or      r18, r18
                    store   r18, (r14+$16)
                    move    r18, r5
                    load    (r14+_fxobj), r6
                    addq    #PITCH8, r4
                    loadb   (r4), r9
                    addq    #1, r4
                    loadw   (r4), r0
                    addq    #2, r4
                    shlq    #2, r0
                    load    (r4), r8
                    add     r0, r6
                    move    r8, r10
                    xor     r7, r7
                    shrq    #1, r10
                    btst    #$7, r9
                    jr    z,routine267 ; #$000002CC
                    bclr    #$7, r9
                    moveq   #1, r7
routine267:         movei   #routine33, r0
                    cmpq    #2, r9
                    jump    z,(r0)
                    nop
                    mult    r5, r8
                    shrq    #16, r8
                    movei   #routine34, r0
                    jump    (r0)
                    nop
routine33:          fmult r8,r5
routine302:         cmpq    #$0, r21
                    jr    nz,routine306 ; #$00000324
                    nop
routine34:          cmpq    #1, r7
                    jr    nz,routine309 ; #$00000328
routine306:         nop
                    sub     r10, r8
routine309:         cmpq    #$0, r21
                    jr    z,routine313 ; #$00000332
                    nop
                    load    (r21), r0
                    add     r0, r8
routine313:         store   r8, (r6)
                    load    (r14+$16), r0
                    or      r0, r0
                    storew  r0, (_results_r24)

                    ; ----------------------------------------------------------------
                    ; Clean up and go to next in Big Loop
                    ; ----------------------------------------------------------------
BigLoopSkipToNext:  addq    #2, _results_r24
                    addq    #2, _fxobj_r23
                    addq    #4, _fxobj_r25
                    addq    #4, _fxobj_r22
                    movei   #BigLoop64, r0
                    subq    #1, _bigloop_ctr
                    jump    nn,(r0)
                    nop
                    ; ----------------------------------------------------------------
                    ; End of Big Loop
                    ; ----------------------------------------------------------------

                    ; ----------------------------------------------------------------
                    ; Clean up and go to next fx object.
                    ; ----------------------------------------------------------------
                    load    (r14+_results), r0
                    ; Move to the next fx object.
GoToNext:           load    (r14+_object_counter), r2
                    subq    #1, r2
                    movei   #LoopThroughFXObjs, r3
                    or      r2, r2
                    store   r2, (r14+_object_counter)
                    jump    nn,(r3)                       ; Loop if we still have more objects to do.
                    nop
                    ; ----------------------------------------------------------------
                    ; End of the LoopThroughFXObjs loop.
                    ; ----------------------------------------------------------------
                    
                    ; ----------------------------------------------------------------
                    ; We've finished all objects. Run 'psi' as our final module.
                    ; ----------------------------------------------------------------
                    movei   #SetScreenReady, r2
                    movei   #_psi, r1                     ; Index into mods -> 'psi'
                    movei   #RunGPUModule, r0
                    or      r2, r2
                    store   r2, (r14+_post_gpu_routine)   ; Make SetScreenReady our post-GPU routine.
                    jump    (r0)                          ; Run the psi GPU module (psi.gas).
                    nop
                    
                    ; ----------------------------------------------------------------
                    ; Signal that a screen is ready for display by setting screen_ready.
                    ; Loop and run through all 6 fx objs all over again.
                    ; ----------------------------------------------------------------
SetScreenReady:     moveq   #1, r0                        ; Store 1 in r0.
                    movei   #screen_ready, r1             ; Point r1 at screen_ready.
                    store   r0, (r1)                      ; Store 1 in screen_ready.
                    movei   #RunFXObjModulesLoop, r0      ; Loop back to top!
                    jump    (r0)                          ; Loop back to top!
                    nop
                    
; *******************************************************************
; GPULoad
; Load the selected GPU module.
;
; There is a trick at work here. The 'omega' module
; orchestrates the loading of the others. Notice that 'omega' is loaded to 
; address $F03A78 in the GPU's RAM. It loads all the other modules as they
; are required. It can do this because all the others get loaded to $F03000 in 
; the GPU's RAM and none of them is longer than $A78 bytes! This means
; that 'omega' can stay resident in RAM at $F03a78 and load the others to $F03000 
; without getting overwritten by them!
;
;
; r0 -> the module itself.
; r1 -> the address to load the module to.
; r2 -> the length of the module.
; *******************************************************************
GPULoad:
                    blit_cmd REGEQU r20
                    a1_base REGEQU r20
                    a2_base REGEQU r21
                    module_length REGEQU r2
                    module_load_address REGEQU r1
                    module_itself REGEQU r0

                    ; Make sure the blitter has stopped.
                    movei   #B_CMD, r20
                    waitblit

                    movei   #A1_BASE, a1_base
                    movei   #A2_BASE, a2_base

                    ; Set up the a1_base address - the place we're loading the module to.
                    move    module_load_address, r25
                    movei   #$fffffff8, r26
                    move    r25, r24
                    and     r26, r25
                    sub     r25, r24
                    store   r25, (a1_base)
                    addq    #4, a1_base
                    movei   #$00004020, r22
                    store   r22, (a1_base)
                    addq    #8, a1_base
                    shrq    #1, r24
                    store   r24, (a1_base)

                    ; Set up the a2_base address - the data we're copying.
                    move    module_itself, r25
                    move    module_itself, r23
                    and     r26, r25
                    sub     r25, r23
                    store   r25, (a2_base)
                    addq    #4, a2_base
                    store   r22, (a2_base)
                    addq    #8, a2_base
                    shrq    #1, r23
                    store   r23, (a2_base)

                    ; Set up the counter.
                    shrq    #1, module_length
                    movei   #B_COUNT, r25
                    bset    #16, module_length
                    store   module_length, (r25)

                    ; Make the blit command.
                    movei  #1|LFU_AN|LFU_A,r22
                    or      r23, r24 ; Are a1 and a2 the same?
                    jr      z,JustBlit ; If so, adjust blitter command.
                    nop
.aligned:           movei  #1|4|LFU_AN|LFU_A,r22

JustBlit:           movei   #B_CMD, blit_cmd ; Point blit_cmd to the blit command register.
                    store   r22, (blit_cmd) ; Issue the blit command.
                    waitblit ; Wait for it to finish.
                    load    (r14+_post_gpu_routine), r20 ; Load the 'post-GPU' routine to run after loading the GPU module.
                    jump    (r20) ; Run it.
                    nop

; *******************************************************************
; RunGPUModule
; Figure out which GPU module we've been asked to run, load it using
; GPULoad and then run it.
;
; r1 -> index into 'mods' for the module to load.
; *******************************************************************
RunGPUModule:           
                    gpu_load REGEQU r6

                    ; Check if the module has already been loaded?
                    moveta  r3, r3
                    moveta  r14, r14
                    move    r1, r4
                    move    r1, r5
                    shlq    #16, r4
                    shrq    #16, r5
                    shrq    #16, r4
                    movei   #screen_ready+$c, r0
                    store   r4, (r0)
                    movei   #loaded_module, r0
                    movei   #previously_loaded_module, r1
                    load    (r1), r2
                    cmp     r2, r5
                    jump    z,(r0)
                    nop
                    store   r5, (r1)
                    
                    ; Select which module to use.
                    movei   #mods, r0                         ; Point r0 at the list of modules.
                    load    (r0), r4                          ; Store address of gpu mods in a4.
                    shlq    #2, r5                            ; Multiply our index by 4.
                    add     r4, r5                            ; Add the index to the address of gpu mods.
                    load    (r5), r4                          ; Store the resulting address in r4.
                    load    (r4), module_load_address         ; Stash the result, a pointer to the load address, in r1
                    addq    #4, r4                            ; Add 4 to point to the module length.
                    load    (r4), module_length               ; Store it in r2.
                    addq    #4, r4                            ; Add 4 to point to the module itself.
                    move    r4, module_itself                 ; Point r0 at our selected module in 'mods'.
                    
                    ; Load the selected GPU module.
                    load    (r14+_post_gpu_routine), r4       ; Store our 'post-GPU' routine in r4.
                    movei   #GPURun, r5
                    movei   #GPULoad, gpu_load
                    movei   #$8000, r20
                    or      r5, r5
                    add     r20, module_load_address
                    store   r5, (r14+_post_gpu_routine)
                    jump    (gpu_load)
                    nop
                    
                    ; This invokes the 'post-GPU' routine somehow!
GPURun:             or      r4, r4                            ; Make sure the post-GPU routine is loaded.
                    store   r4, (r14+_post_gpu_routine)       ; Stash it
                    movei   #loaded_module, r0
                    jump    (r0)
                    nop
                    dc.b    $00,$00,$00,$00,$00,$00
previously_loaded_module:
                    dc.b    $ff,$ff,$00,$00,$00,$00,$00,$00
; vim:ft=asm68k ts=2
